{
  "org.apache.commons.lang3.ArraySorterTest": {
    "testSortShortArray": {
      "name": "testSortShortArray",
      "mvn_run": "org.apache.commons.lang3.ArraySorterTest#testSortShortArray",
      "smells": {
        "Lazy Test": 1,
        "Assertion Roulette": 1
      }
    },
    "testSortObjects": {
      "name": "testSortObjects",
      "mvn_run": "org.apache.commons.lang3.ArraySorterTest#testSortObjects",
      "smells": {
        "Lazy Test": 1,
        "Assertion Roulette": 1
      }
    },
    "testSortLongArray": {
      "name": "testSortLongArray",
      "mvn_run": "org.apache.commons.lang3.ArraySorterTest#testSortLongArray",
      "smells": {
        "Lazy Test": 1,
        "Assertion Roulette": 1
      }
    },
    "testSortIntArray": {
      "name": "testSortIntArray",
      "mvn_run": "org.apache.commons.lang3.ArraySorterTest#testSortIntArray",
      "smells": {
        "Lazy Test": 1,
        "Assertion Roulette": 1
      }
    },
    "testSortFloatArray": {
      "name": "testSortFloatArray",
      "mvn_run": "org.apache.commons.lang3.ArraySorterTest#testSortFloatArray",
      "smells": {
        "Lazy Test": 1,
        "Assertion Roulette": 1
      }
    },
    "testSortDoubleArray": {
      "name": "testSortDoubleArray",
      "mvn_run": "org.apache.commons.lang3.ArraySorterTest#testSortDoubleArray",
      "smells": {
        "Lazy Test": 1,
        "Assertion Roulette": 1
      }
    },
    "testSortComparable": {
      "name": "testSortComparable",
      "mvn_run": "org.apache.commons.lang3.ArraySorterTest#testSortComparable",
      "smells": {
        "Lazy Test": 1,
        "Assertion Roulette": 1
      }
    },
    "testSortCharArray": {
      "name": "testSortCharArray",
      "mvn_run": "org.apache.commons.lang3.ArraySorterTest#testSortCharArray",
      "smells": {
        "Lazy Test": 1,
        "Assertion Roulette": 1
      }
    },
    "testSortByteArray": {
      "name": "testSortByteArray",
      "mvn_run": "org.apache.commons.lang3.ArraySorterTest#testSortByteArray",
      "smells": {
        "Lazy Test": 1,
        "Assertion Roulette": 1
      }
    }
  },
  "org.apache.commons.lang3.mutable.MutableDoubleTest": {
    "testAddAndGetValueObject": {
      "name": "testAddAndGetValueObject",
      "mvn_run": "org.apache.commons.lang3.mutable.MutableDoubleTest#testAddAndGetValueObject",
      "smells": {
        "Magic Number Test": 2,
        "Lazy Test": 3,
        "Eager Test": 1,
        "Assertion Roulette": 2
      }
    },
    "testAddAndGetValuePrimitive": {
      "name": "testAddAndGetValuePrimitive",
      "mvn_run": "org.apache.commons.lang3.mutable.MutableDoubleTest#testAddAndGetValuePrimitive",
      "smells": {
        "Magic Number Test": 2,
        "Lazy Test": 3,
        "Eager Test": 1,
        "Assertion Roulette": 2
      }
    },
    "testAddValueObject": {
      "name": "testAddValueObject",
      "mvn_run": "org.apache.commons.lang3.mutable.MutableDoubleTest#testAddValueObject",
      "smells": {
        "Magic Number Test": 1,
        "Lazy Test": 3,
        "Eager Test": 1,
        "Assertion Roulette": 1
      }
    },
    "testAddValuePrimitive": {
      "name": "testAddValuePrimitive",
      "mvn_run": "org.apache.commons.lang3.mutable.MutableDoubleTest#testAddValuePrimitive",
      "smells": {
        "Magic Number Test": 1,
        "Lazy Test": 3,
        "Eager Test": 1,
        "Assertion Roulette": 1
      }
    },
    "testCompareTo": {
      "name": "testCompareTo",
      "mvn_run": "org.apache.commons.lang3.mutable.MutableDoubleTest#testCompareTo",
      "smells": {
        "Magic Number Test": 3,
        "Lazy Test": 2,
        "Eager Test": 1,
        "Assertion Roulette": 3
      }
    },
    "testConstructors": {
      "name": "testConstructors",
      "mvn_run": "org.apache.commons.lang3.mutable.MutableDoubleTest#testConstructors",
      "smells": {
        "Magic Number Test": 5,
        "Lazy Test": 2,
        "Eager Test": 1,
        "Assertion Roulette": 5
      }
    },
    "testDecrement": {
      "name": "testDecrement",
      "mvn_run": "org.apache.commons.lang3.mutable.MutableDoubleTest#testDecrement",
      "smells": {
        "Magic Number Test": 1,
        "Lazy Test": 3,
        "Eager Test": 1,
        "Assertion Roulette": 2
      }
    },
    "testDecrementAndGet": {
      "name": "testDecrementAndGet",
      "mvn_run": "org.apache.commons.lang3.mutable.MutableDoubleTest#testDecrementAndGet",
      "smells": {
        "Magic Number Test": 2,
        "Lazy Test": 3,
        "Eager Test": 1,
        "Assertion Roulette": 3
      }
    },
    "testEquals": {
      "name": "testEquals",
      "mvn_run": "org.apache.commons.lang3.mutable.MutableDoubleTest#testEquals",
      "smells": {
        "Magic Number Test": 1,
        "Redundant Assertion": 3,
        "Lazy Test": 1,
        "Assertion Roulette": 10
      }
    },
    "testGetAndAddValueObject": {
      "name": "testGetAndAddValueObject",
      "mvn_run": "org.apache.commons.lang3.mutable.MutableDoubleTest#testGetAndAddValueObject",
      "smells": {
        "Magic Number Test": 2,
        "Lazy Test": 3,
        "Eager Test": 1,
        "Assertion Roulette": 2
      }
    },
    "testGetAndAddValuePrimitive": {
      "name": "testGetAndAddValuePrimitive",
      "mvn_run": "org.apache.commons.lang3.mutable.MutableDoubleTest#testGetAndAddValuePrimitive",
      "smells": {
        "Magic Number Test": 2,
        "Lazy Test": 3,
        "Eager Test": 1,
        "Assertion Roulette": 2
      }
    },
    "testGetAndDecrement": {
      "name": "testGetAndDecrement",
      "mvn_run": "org.apache.commons.lang3.mutable.MutableDoubleTest#testGetAndDecrement",
      "smells": {
        "Magic Number Test": 2,
        "Lazy Test": 3,
        "Eager Test": 1,
        "Assertion Roulette": 3
      }
    },
    "testGetAndIncrement": {
      "name": "testGetAndIncrement",
      "mvn_run": "org.apache.commons.lang3.mutable.MutableDoubleTest#testGetAndIncrement",
      "smells": {
        "Magic Number Test": 2,
        "Lazy Test": 3,
        "Eager Test": 1,
        "Assertion Roulette": 3
      }
    },
    "testGetSet": {
      "name": "testGetSet",
      "mvn_run": "org.apache.commons.lang3.mutable.MutableDoubleTest#testGetSet",
      "smells": {
        "Magic Number Test": 8,
        "Lazy Test": 3,
        "Eager Test": 1,
        "Assertion Roulette": 8
      }
    },
    "testIncrement": {
      "name": "testIncrement",
      "mvn_run": "org.apache.commons.lang3.mutable.MutableDoubleTest#testIncrement",
      "smells": {
        "Magic Number Test": 1,
        "Lazy Test": 3,
        "Eager Test": 1,
        "Assertion Roulette": 2
      }
    },
    "testIncrementAndGet": {
      "name": "testIncrementAndGet",
      "mvn_run": "org.apache.commons.lang3.mutable.MutableDoubleTest#testIncrementAndGet",
      "smells": {
        "Magic Number Test": 2,
        "Lazy Test": 3,
        "Eager Test": 1,
        "Assertion Roulette": 3
      }
    },
    "testPrimitiveValues": {
      "name": "testPrimitiveValues",
      "mvn_run": "org.apache.commons.lang3.mutable.MutableDoubleTest#testPrimitiveValues",
      "smells": {
        "Magic Number Test": 3,
        "Lazy Test": 4,
        "Eager Test": 1,
        "Assertion Roulette": 6
      }
    },
    "testSubtractValueObject": {
      "name": "testSubtractValueObject",
      "mvn_run": "org.apache.commons.lang3.mutable.MutableDoubleTest#testSubtractValueObject",
      "smells": {
        "Magic Number Test": 1,
        "Lazy Test": 3,
        "Eager Test": 1,
        "Assertion Roulette": 1
      }
    },
    "testSubtractValuePrimitive": {
      "name": "testSubtractValuePrimitive",
      "mvn_run": "org.apache.commons.lang3.mutable.MutableDoubleTest#testSubtractValuePrimitive",
      "smells": {
        "Magic Number Test": 1,
        "Lazy Test": 3,
        "Eager Test": 1,
        "Assertion Roulette": 1
      }
    },
    "testToDouble": {
      "name": "testToDouble",
      "mvn_run": "org.apache.commons.lang3.mutable.MutableDoubleTest#testToDouble",
      "smells": {
        "Magic Number Test": 2,
        "Lazy Test": 1,
        "Eager Test": 1,
        "Assertion Roulette": 2
      }
    },
    "testHashCode": {
      "name": "testHashCode",
      "mvn_run": "org.apache.commons.lang3.mutable.MutableDoubleTest#testHashCode",
      "smells": {
        "Redundant Assertion": 1,
        "Lazy Test": 1,
        "Eager Test": 1,
        "Assertion Roulette": 4
      }
    },
    "testToString": {
      "name": "testToString",
      "mvn_run": "org.apache.commons.lang3.mutable.MutableDoubleTest#testToString",
      "smells": {
        "Sensitive Equality": 3,
        "Lazy Test": 1,
        "Eager Test": 1,
        "Assertion Roulette": 3
      }
    },
    "testSetNull": {
      "name": "testSetNull",
      "mvn_run": "org.apache.commons.lang3.mutable.MutableDoubleTest#testSetNull",
      "smells": {
        "Lazy Test": 2,
        "Eager Test": 1
      }
    },
    "testNanInfinite": {
      "name": "testNanInfinite",
      "mvn_run": "org.apache.commons.lang3.mutable.MutableDoubleTest#testNanInfinite",
      "smells": {
        "Lazy Test": 1,
        "Duplicate Assert": 1,
        "Eager Test": 1,
        "Assertion Roulette": 3
      }
    },
    "testConstructorNull": {
      "name": "testConstructorNull",
      "mvn_run": "org.apache.commons.lang3.mutable.MutableDoubleTest#testConstructorNull",
      "smells": {
        "Lazy Test": 1
      }
    },
    "testCompareToNull": {
      "name": "testCompareToNull",
      "mvn_run": "org.apache.commons.lang3.mutable.MutableDoubleTest#testCompareToNull",
      "smells": {
        "Lazy Test": 2,
        "Eager Test": 1
      }
    }
  },
  "org.apache.commons.lang3.mutable.MutableShortTest": {
    "testDecrement": {
      "name": "testDecrement",
      "mvn_run": "org.apache.commons.lang3.mutable.MutableShortTest#testDecrement",
      "smells": {
        "Magic Number Test": 1,
        "Lazy Test": 3,
        "Eager Test": 1,
        "Assertion Roulette": 2
      }
    },
    "testDecrementAndGet": {
      "name": "testDecrementAndGet",
      "mvn_run": "org.apache.commons.lang3.mutable.MutableShortTest#testDecrementAndGet",
      "smells": {
        "Magic Number Test": 2,
        "Lazy Test": 3,
        "Eager Test": 1,
        "Assertion Roulette": 3
      }
    },
    "testGetAndDecrement": {
      "name": "testGetAndDecrement",
      "mvn_run": "org.apache.commons.lang3.mutable.MutableShortTest#testGetAndDecrement",
      "smells": {
        "Magic Number Test": 2,
        "Lazy Test": 3,
        "Eager Test": 1,
        "Assertion Roulette": 3
      }
    },
    "testGetAndIncrement": {
      "name": "testGetAndIncrement",
      "mvn_run": "org.apache.commons.lang3.mutable.MutableShortTest#testGetAndIncrement",
      "smells": {
        "Magic Number Test": 2,
        "Lazy Test": 3,
        "Eager Test": 1,
        "Assertion Roulette": 3
      }
    },
    "testIncrement": {
      "name": "testIncrement",
      "mvn_run": "org.apache.commons.lang3.mutable.MutableShortTest#testIncrement",
      "smells": {
        "Magic Number Test": 1,
        "Lazy Test": 3,
        "Eager Test": 1,
        "Assertion Roulette": 2
      }
    },
    "testIncrementAndGet": {
      "name": "testIncrementAndGet",
      "mvn_run": "org.apache.commons.lang3.mutable.MutableShortTest#testIncrementAndGet",
      "smells": {
        "Magic Number Test": 2,
        "Lazy Test": 3,
        "Eager Test": 1,
        "Assertion Roulette": 3
      }
    },
    "testPrimitiveValues": {
      "name": "testPrimitiveValues",
      "mvn_run": "org.apache.commons.lang3.mutable.MutableShortTest#testPrimitiveValues",
      "smells": {
        "Magic Number Test": 3,
        "Lazy Test": 4,
        "Eager Test": 1,
        "Assertion Roulette": 6
      }
    },
    "testEquals": {
      "name": "testEquals",
      "mvn_run": "org.apache.commons.lang3.mutable.MutableShortTest#testEquals",
      "smells": {
        "Redundant Assertion": 3,
        "Lazy Test": 1,
        "Assertion Roulette": 10
      }
    },
    "testHashCode": {
      "name": "testHashCode",
      "mvn_run": "org.apache.commons.lang3.mutable.MutableShortTest#testHashCode",
      "smells": {
        "Redundant Assertion": 1,
        "Lazy Test": 1,
        "Eager Test": 1,
        "Assertion Roulette": 4
      }
    },
    "testToString": {
      "name": "testToString",
      "mvn_run": "org.apache.commons.lang3.mutable.MutableShortTest#testToString",
      "smells": {
        "Sensitive Equality": 3,
        "Lazy Test": 1,
        "Eager Test": 1,
        "Assertion Roulette": 3
      }
    },
    "testAddValuePrimitive": {
      "name": "testAddValuePrimitive",
      "mvn_run": "org.apache.commons.lang3.mutable.MutableShortTest#testAddValuePrimitive",
      "smells": {
        "Lazy Test": 3,
        "Eager Test": 1,
        "Assertion Roulette": 1
      }
    },
    "testAddValueObject": {
      "name": "testAddValueObject",
      "mvn_run": "org.apache.commons.lang3.mutable.MutableShortTest#testAddValueObject",
      "smells": {
        "Lazy Test": 3,
        "Eager Test": 1,
        "Assertion Roulette": 1
      }
    },
    "testSubtractValuePrimitive": {
      "name": "testSubtractValuePrimitive",
      "mvn_run": "org.apache.commons.lang3.mutable.MutableShortTest#testSubtractValuePrimitive",
      "smells": {
        "Lazy Test": 3,
        "Eager Test": 1,
        "Assertion Roulette": 1
      }
    },
    "testSubtractValueObject": {
      "name": "testSubtractValueObject",
      "mvn_run": "org.apache.commons.lang3.mutable.MutableShortTest#testSubtractValueObject",
      "smells": {
        "Lazy Test": 3,
        "Eager Test": 1,
        "Assertion Roulette": 1
      }
    },
    "testToShort": {
      "name": "testToShort",
      "mvn_run": "org.apache.commons.lang3.mutable.MutableShortTest#testToShort",
      "smells": {
        "Lazy Test": 1,
        "Eager Test": 1,
        "Assertion Roulette": 2
      }
    },
    "testGetSet": {
      "name": "testGetSet",
      "mvn_run": "org.apache.commons.lang3.mutable.MutableShortTest#testGetSet",
      "smells": {
        "Lazy Test": 2,
        "Eager Test": 1,
        "Assertion Roulette": 8
      }
    },
    "testGetAndAddValuePrimitive": {
      "name": "testGetAndAddValuePrimitive",
      "mvn_run": "org.apache.commons.lang3.mutable.MutableShortTest#testGetAndAddValuePrimitive",
      "smells": {
        "Lazy Test": 3,
        "Eager Test": 1,
        "Assertion Roulette": 2
      }
    },
    "testGetAndAddValueObject": {
      "name": "testGetAndAddValueObject",
      "mvn_run": "org.apache.commons.lang3.mutable.MutableShortTest#testGetAndAddValueObject",
      "smells": {
        "Lazy Test": 3,
        "Eager Test": 1,
        "Assertion Roulette": 2
      }
    },
    "testConstructors": {
      "name": "testConstructors",
      "mvn_run": "org.apache.commons.lang3.mutable.MutableShortTest#testConstructors",
      "smells": {
        "Lazy Test": 2,
        "Eager Test": 1,
        "Assertion Roulette": 5
      }
    },
    "testCompareTo": {
      "name": "testCompareTo",
      "mvn_run": "org.apache.commons.lang3.mutable.MutableShortTest#testCompareTo",
      "smells": {
        "Lazy Test": 1,
        "Eager Test": 1,
        "Assertion Roulette": 3
      }
    },
    "testAddAndGetValuePrimitive": {
      "name": "testAddAndGetValuePrimitive",
      "mvn_run": "org.apache.commons.lang3.mutable.MutableShortTest#testAddAndGetValuePrimitive",
      "smells": {
        "Lazy Test": 3,
        "Eager Test": 1,
        "Assertion Roulette": 2
      }
    },
    "testAddAndGetValueObject": {
      "name": "testAddAndGetValueObject",
      "mvn_run": "org.apache.commons.lang3.mutable.MutableShortTest#testAddAndGetValueObject",
      "smells": {
        "Lazy Test": 3,
        "Eager Test": 1,
        "Assertion Roulette": 2
      }
    }
  },
  "org.apache.commons.lang3.mutable.MutableBooleanTest": {
    "testCompareTo": {
      "name": "testCompareTo",
      "mvn_run": "org.apache.commons.lang3.mutable.MutableBooleanTest#testCompareTo",
      "smells": {
        "Magic Number Test": 4,
        "Lazy Test": 3,
        "Eager Test": 1,
        "Assertion Roulette": 4
      }
    },
    "testEquals": {
      "name": "testEquals",
      "mvn_run": "org.apache.commons.lang3.mutable.MutableBooleanTest#testEquals",
      "smells": {
        "Redundant Assertion": 3,
        "Lazy Test": 1,
        "Assertion Roulette": 10
      }
    },
    "testHashCode": {
      "name": "testHashCode",
      "mvn_run": "org.apache.commons.lang3.mutable.MutableBooleanTest#testHashCode",
      "smells": {
        "Redundant Assertion": 1,
        "Lazy Test": 1,
        "Eager Test": 1,
        "Assertion Roulette": 5
      }
    },
    "testToString": {
      "name": "testToString",
      "mvn_run": "org.apache.commons.lang3.mutable.MutableBooleanTest#testToString",
      "smells": {
        "Sensitive Equality": 4,
        "Lazy Test": 1,
        "Eager Test": 1,
        "Assertion Roulette": 2
      }
    },
    "testSetNull": {
      "name": "testSetNull",
      "mvn_run": "org.apache.commons.lang3.mutable.MutableBooleanTest#testSetNull",
      "smells": {
        "Lazy Test": 2,
        "Eager Test": 1
      }
    },
    "testGetSet": {
      "name": "testGetSet",
      "mvn_run": "org.apache.commons.lang3.mutable.MutableBooleanTest#testGetSet",
      "smells": {
        "Lazy Test": 3,
        "Duplicate Assert": 2,
        "Eager Test": 1,
        "Assertion Roulette": 14
      }
    },
    "testConstructors": {
      "name": "testConstructors",
      "mvn_run": "org.apache.commons.lang3.mutable.MutableBooleanTest#testConstructors",
      "smells": {
        "Lazy Test": 2,
        "Eager Test": 1,
        "Assertion Roulette": 5
      }
    },
    "testConstructorNull": {
      "name": "testConstructorNull",
      "mvn_run": "org.apache.commons.lang3.mutable.MutableBooleanTest#testConstructorNull",
      "smells": {
        "Lazy Test": 1
      }
    },
    "testCompareToNull": {
      "name": "testCompareToNull",
      "mvn_run": "org.apache.commons.lang3.mutable.MutableBooleanTest#testCompareToNull",
      "smells": {
        "Lazy Test": 2,
        "Eager Test": 1
      }
    }
  },
  "org.apache.commons.lang3.mutable.MutableLongTest": {
    "testAddValueObject": {
      "name": "testAddValueObject",
      "mvn_run": "org.apache.commons.lang3.mutable.MutableLongTest#testAddValueObject",
      "smells": {
        "Magic Number Test": 1,
        "Lazy Test": 4,
        "Eager Test": 1,
        "Assertion Roulette": 2
      }
    },
    "testAddValuePrimitive": {
      "name": "testAddValuePrimitive",
      "mvn_run": "org.apache.commons.lang3.mutable.MutableLongTest#testAddValuePrimitive",
      "smells": {
        "Magic Number Test": 1,
        "Lazy Test": 4,
        "Eager Test": 1,
        "Assertion Roulette": 2
      }
    },
    "testCompareTo": {
      "name": "testCompareTo",
      "mvn_run": "org.apache.commons.lang3.mutable.MutableLongTest#testCompareTo",
      "smells": {
        "Magic Number Test": 3,
        "Lazy Test": 2,
        "Eager Test": 1,
        "Assertion Roulette": 3
      }
    },
    "testConstructors": {
      "name": "testConstructors",
      "mvn_run": "org.apache.commons.lang3.mutable.MutableLongTest#testConstructors",
      "smells": {
        "Magic Number Test": 5,
        "Lazy Test": 2,
        "Eager Test": 1,
        "Assertion Roulette": 5
      }
    },
    "testDecrement": {
      "name": "testDecrement",
      "mvn_run": "org.apache.commons.lang3.mutable.MutableLongTest#testDecrement",
      "smells": {
        "Magic Number Test": 1,
        "Lazy Test": 3,
        "Eager Test": 1,
        "Assertion Roulette": 2
      }
    },
    "testDecrementAndGet": {
      "name": "testDecrementAndGet",
      "mvn_run": "org.apache.commons.lang3.mutable.MutableLongTest#testDecrementAndGet",
      "smells": {
        "Magic Number Test": 2,
        "Lazy Test": 3,
        "Eager Test": 1,
        "Assertion Roulette": 3
      }
    },
    "testEquals": {
      "name": "testEquals",
      "mvn_run": "org.apache.commons.lang3.mutable.MutableLongTest#testEquals",
      "smells": {
        "Magic Number Test": 1,
        "Redundant Assertion": 3,
        "Lazy Test": 1,
        "Assertion Roulette": 10
      }
    },
    "testGetAndDecrement": {
      "name": "testGetAndDecrement",
      "mvn_run": "org.apache.commons.lang3.mutable.MutableLongTest#testGetAndDecrement",
      "smells": {
        "Magic Number Test": 2,
        "Lazy Test": 3,
        "Eager Test": 1,
        "Assertion Roulette": 3
      }
    },
    "testGetAndIncrement": {
      "name": "testGetAndIncrement",
      "mvn_run": "org.apache.commons.lang3.mutable.MutableLongTest#testGetAndIncrement",
      "smells": {
        "Magic Number Test": 2,
        "Lazy Test": 3,
        "Eager Test": 1,
        "Assertion Roulette": 3
      }
    },
    "testGetSet": {
      "name": "testGetSet",
      "mvn_run": "org.apache.commons.lang3.mutable.MutableLongTest#testGetSet",
      "smells": {
        "Magic Number Test": 8,
        "Lazy Test": 3,
        "Eager Test": 1,
        "Assertion Roulette": 8
      }
    },
    "testIncrement": {
      "name": "testIncrement",
      "mvn_run": "org.apache.commons.lang3.mutable.MutableLongTest#testIncrement",
      "smells": {
        "Magic Number Test": 1,
        "Lazy Test": 3,
        "Eager Test": 1,
        "Assertion Roulette": 2
      }
    },
    "testIncrementAndGet": {
      "name": "testIncrementAndGet",
      "mvn_run": "org.apache.commons.lang3.mutable.MutableLongTest#testIncrementAndGet",
      "smells": {
        "Magic Number Test": 2,
        "Lazy Test": 3,
        "Eager Test": 1,
        "Assertion Roulette": 3
      }
    },
    "testPrimitiveValues": {
      "name": "testPrimitiveValues",
      "mvn_run": "org.apache.commons.lang3.mutable.MutableLongTest#testPrimitiveValues",
      "smells": {
        "Magic Number Test": 3,
        "Lazy Test": 3,
        "Eager Test": 1,
        "Assertion Roulette": 6
      }
    },
    "testSubtractValueObject": {
      "name": "testSubtractValueObject",
      "mvn_run": "org.apache.commons.lang3.mutable.MutableLongTest#testSubtractValueObject",
      "smells": {
        "Magic Number Test": 1,
        "Lazy Test": 4,
        "Eager Test": 1,
        "Assertion Roulette": 2
      }
    },
    "testSubtractValuePrimitive": {
      "name": "testSubtractValuePrimitive",
      "mvn_run": "org.apache.commons.lang3.mutable.MutableLongTest#testSubtractValuePrimitive",
      "smells": {
        "Magic Number Test": 1,
        "Lazy Test": 4,
        "Eager Test": 1,
        "Assertion Roulette": 2
      }
    },
    "testHashCode": {
      "name": "testHashCode",
      "mvn_run": "org.apache.commons.lang3.mutable.MutableLongTest#testHashCode",
      "smells": {
        "Redundant Assertion": 1,
        "Lazy Test": 1,
        "Eager Test": 1,
        "Assertion Roulette": 4
      }
    },
    "testToString": {
      "name": "testToString",
      "mvn_run": "org.apache.commons.lang3.mutable.MutableLongTest#testToString",
      "smells": {
        "Sensitive Equality": 3,
        "Lazy Test": 1,
        "Eager Test": 1,
        "Assertion Roulette": 3
      }
    },
    "testCompareToNull": {
      "name": "testCompareToNull",
      "mvn_run": "org.apache.commons.lang3.mutable.MutableLongTest#testCompareToNull",
      "smells": {
        "Lazy Test": 2,
        "Eager Test": 1
      }
    },
    "testGetAndAddValuePrimitive": {
      "name": "testGetAndAddValuePrimitive",
      "mvn_run": "org.apache.commons.lang3.mutable.MutableLongTest#testGetAndAddValuePrimitive",
      "smells": {
        "Lazy Test": 3,
        "Eager Test": 1,
        "Assertion Roulette": 2
      }
    },
    "testGetAndAddValueObject": {
      "name": "testGetAndAddValueObject",
      "mvn_run": "org.apache.commons.lang3.mutable.MutableLongTest#testGetAndAddValueObject",
      "smells": {
        "Lazy Test": 3,
        "Eager Test": 1,
        "Assertion Roulette": 2
      }
    },
    "testAddAndGetValuePrimitive": {
      "name": "testAddAndGetValuePrimitive",
      "mvn_run": "org.apache.commons.lang3.mutable.MutableLongTest#testAddAndGetValuePrimitive",
      "smells": {
        "Lazy Test": 3,
        "Eager Test": 1,
        "Assertion Roulette": 2
      }
    },
    "testAddAndGetValueObject": {
      "name": "testAddAndGetValueObject",
      "mvn_run": "org.apache.commons.lang3.mutable.MutableLongTest#testAddAndGetValueObject",
      "smells": {
        "Lazy Test": 3,
        "Eager Test": 1,
        "Assertion Roulette": 2
      }
    },
    "testToLong": {
      "name": "testToLong",
      "mvn_run": "org.apache.commons.lang3.mutable.MutableLongTest#testToLong",
      "smells": {
        "Lazy Test": 1,
        "Eager Test": 1,
        "Assertion Roulette": 2
      }
    },
    "testSetNull": {
      "name": "testSetNull",
      "mvn_run": "org.apache.commons.lang3.mutable.MutableLongTest#testSetNull",
      "smells": {
        "Lazy Test": 2,
        "Eager Test": 1
      }
    },
    "testConstructorNull": {
      "name": "testConstructorNull",
      "mvn_run": "org.apache.commons.lang3.mutable.MutableLongTest#testConstructorNull",
      "smells": {
        "Lazy Test": 1
      }
    }
  },
  "org.apache.commons.lang3.mutable.MutableFloatTest": {
    "testAddAndGetValueObject": {
      "name": "testAddAndGetValueObject",
      "mvn_run": "org.apache.commons.lang3.mutable.MutableFloatTest#testAddAndGetValueObject",
      "smells": {
        "Magic Number Test": 2,
        "Lazy Test": 3,
        "Eager Test": 1,
        "Assertion Roulette": 2
      }
    },
    "testAddAndGetValuePrimitive": {
      "name": "testAddAndGetValuePrimitive",
      "mvn_run": "org.apache.commons.lang3.mutable.MutableFloatTest#testAddAndGetValuePrimitive",
      "smells": {
        "Magic Number Test": 2,
        "Lazy Test": 3,
        "Eager Test": 1,
        "Assertion Roulette": 2
      }
    },
    "testAddValueObject": {
      "name": "testAddValueObject",
      "mvn_run": "org.apache.commons.lang3.mutable.MutableFloatTest#testAddValueObject",
      "smells": {
        "Magic Number Test": 1,
        "Lazy Test": 3,
        "Eager Test": 1,
        "Assertion Roulette": 1
      }
    },
    "testAddValuePrimitive": {
      "name": "testAddValuePrimitive",
      "mvn_run": "org.apache.commons.lang3.mutable.MutableFloatTest#testAddValuePrimitive",
      "smells": {
        "Magic Number Test": 1,
        "Lazy Test": 3,
        "Eager Test": 1,
        "Assertion Roulette": 1
      }
    },
    "testCompareTo": {
      "name": "testCompareTo",
      "mvn_run": "org.apache.commons.lang3.mutable.MutableFloatTest#testCompareTo",
      "smells": {
        "Magic Number Test": 3,
        "Lazy Test": 2,
        "Eager Test": 1,
        "Assertion Roulette": 3
      }
    },
    "testConstructors": {
      "name": "testConstructors",
      "mvn_run": "org.apache.commons.lang3.mutable.MutableFloatTest#testConstructors",
      "smells": {
        "Magic Number Test": 5,
        "Lazy Test": 2,
        "Eager Test": 1,
        "Assertion Roulette": 5
      }
    },
    "testDecrement": {
      "name": "testDecrement",
      "mvn_run": "org.apache.commons.lang3.mutable.MutableFloatTest#testDecrement",
      "smells": {
        "Magic Number Test": 1,
        "Lazy Test": 3,
        "Eager Test": 1,
        "Assertion Roulette": 2
      }
    },
    "testDecrementAndGet": {
      "name": "testDecrementAndGet",
      "mvn_run": "org.apache.commons.lang3.mutable.MutableFloatTest#testDecrementAndGet",
      "smells": {
        "Magic Number Test": 2,
        "Lazy Test": 3,
        "Eager Test": 1,
        "Assertion Roulette": 3
      }
    },
    "testEquals": {
      "name": "testEquals",
      "mvn_run": "org.apache.commons.lang3.mutable.MutableFloatTest#testEquals",
      "smells": {
        "Magic Number Test": 1,
        "Redundant Assertion": 3,
        "Lazy Test": 1,
        "Assertion Roulette": 10
      }
    },
    "testGetAndAddValueObject": {
      "name": "testGetAndAddValueObject",
      "mvn_run": "org.apache.commons.lang3.mutable.MutableFloatTest#testGetAndAddValueObject",
      "smells": {
        "Magic Number Test": 2,
        "Lazy Test": 3,
        "Eager Test": 1,
        "Assertion Roulette": 2
      }
    },
    "testGetAndAddValuePrimitive": {
      "name": "testGetAndAddValuePrimitive",
      "mvn_run": "org.apache.commons.lang3.mutable.MutableFloatTest#testGetAndAddValuePrimitive",
      "smells": {
        "Magic Number Test": 2,
        "Lazy Test": 3,
        "Eager Test": 1,
        "Assertion Roulette": 2
      }
    },
    "testGetAndDecrement": {
      "name": "testGetAndDecrement",
      "mvn_run": "org.apache.commons.lang3.mutable.MutableFloatTest#testGetAndDecrement",
      "smells": {
        "Magic Number Test": 2,
        "Lazy Test": 3,
        "Eager Test": 1,
        "Assertion Roulette": 3
      }
    },
    "testGetAndIncrement": {
      "name": "testGetAndIncrement",
      "mvn_run": "org.apache.commons.lang3.mutable.MutableFloatTest#testGetAndIncrement",
      "smells": {
        "Magic Number Test": 2,
        "Lazy Test": 3,
        "Eager Test": 1,
        "Assertion Roulette": 3
      }
    },
    "testGetSet": {
      "name": "testGetSet",
      "mvn_run": "org.apache.commons.lang3.mutable.MutableFloatTest#testGetSet",
      "smells": {
        "Magic Number Test": 8,
        "Lazy Test": 3,
        "Eager Test": 1,
        "Assertion Roulette": 8
      }
    },
    "testIncrement": {
      "name": "testIncrement",
      "mvn_run": "org.apache.commons.lang3.mutable.MutableFloatTest#testIncrement",
      "smells": {
        "Magic Number Test": 1,
        "Lazy Test": 3,
        "Eager Test": 1,
        "Assertion Roulette": 2
      }
    },
    "testIncrementAndGet": {
      "name": "testIncrementAndGet",
      "mvn_run": "org.apache.commons.lang3.mutable.MutableFloatTest#testIncrementAndGet",
      "smells": {
        "Magic Number Test": 2,
        "Lazy Test": 3,
        "Eager Test": 1,
        "Assertion Roulette": 3
      }
    },
    "testPrimitiveValues": {
      "name": "testPrimitiveValues",
      "mvn_run": "org.apache.commons.lang3.mutable.MutableFloatTest#testPrimitiveValues",
      "smells": {
        "Magic Number Test": 3,
        "Lazy Test": 3,
        "Duplicate Assert": 1,
        "Eager Test": 1,
        "Assertion Roulette": 6
      }
    },
    "testSubtractValueObject": {
      "name": "testSubtractValueObject",
      "mvn_run": "org.apache.commons.lang3.mutable.MutableFloatTest#testSubtractValueObject",
      "smells": {
        "Magic Number Test": 1,
        "Lazy Test": 3,
        "Eager Test": 1,
        "Assertion Roulette": 1
      }
    },
    "testSubtractValuePrimitive": {
      "name": "testSubtractValuePrimitive",
      "mvn_run": "org.apache.commons.lang3.mutable.MutableFloatTest#testSubtractValuePrimitive",
      "smells": {
        "Magic Number Test": 1,
        "Lazy Test": 3,
        "Eager Test": 1,
        "Assertion Roulette": 1
      }
    },
    "testToFloat": {
      "name": "testToFloat",
      "mvn_run": "org.apache.commons.lang3.mutable.MutableFloatTest#testToFloat",
      "smells": {
        "Magic Number Test": 2,
        "Lazy Test": 1,
        "Eager Test": 1,
        "Assertion Roulette": 2
      }
    },
    "testHashCode": {
      "name": "testHashCode",
      "mvn_run": "org.apache.commons.lang3.mutable.MutableFloatTest#testHashCode",
      "smells": {
        "Redundant Assertion": 1,
        "Lazy Test": 1,
        "Eager Test": 1,
        "Assertion Roulette": 4
      }
    },
    "testToString": {
      "name": "testToString",
      "mvn_run": "org.apache.commons.lang3.mutable.MutableFloatTest#testToString",
      "smells": {
        "Sensitive Equality": 3,
        "Lazy Test": 1,
        "Eager Test": 1,
        "Assertion Roulette": 3
      }
    },
    "testCompareToNull": {
      "name": "testCompareToNull",
      "mvn_run": "org.apache.commons.lang3.mutable.MutableFloatTest#testCompareToNull",
      "smells": {
        "Lazy Test": 2,
        "Eager Test": 1
      }
    },
    "testSetNull": {
      "name": "testSetNull",
      "mvn_run": "org.apache.commons.lang3.mutable.MutableFloatTest#testSetNull",
      "smells": {
        "Lazy Test": 2,
        "Eager Test": 1
      }
    },
    "testNanInfinite": {
      "name": "testNanInfinite",
      "mvn_run": "org.apache.commons.lang3.mutable.MutableFloatTest#testNanInfinite",
      "smells": {
        "Lazy Test": 1,
        "Duplicate Assert": 1,
        "Eager Test": 1,
        "Assertion Roulette": 3
      }
    },
    "testConstructorNull": {
      "name": "testConstructorNull",
      "mvn_run": "org.apache.commons.lang3.mutable.MutableFloatTest#testConstructorNull",
      "smells": {
        "Lazy Test": 1
      }
    }
  },
  "org.apache.commons.lang3.mutable.MutableByteTest": {
    "testDecrement": {
      "name": "testDecrement",
      "mvn_run": "org.apache.commons.lang3.mutable.MutableByteTest#testDecrement",
      "smells": {
        "Magic Number Test": 1,
        "Lazy Test": 3,
        "Eager Test": 1,
        "Assertion Roulette": 2
      }
    },
    "testDecrementAndGet": {
      "name": "testDecrementAndGet",
      "mvn_run": "org.apache.commons.lang3.mutable.MutableByteTest#testDecrementAndGet",
      "smells": {
        "Magic Number Test": 2,
        "Lazy Test": 3,
        "Eager Test": 1,
        "Assertion Roulette": 3
      }
    },
    "testGetAndDecrement": {
      "name": "testGetAndDecrement",
      "mvn_run": "org.apache.commons.lang3.mutable.MutableByteTest#testGetAndDecrement",
      "smells": {
        "Magic Number Test": 2,
        "Lazy Test": 3,
        "Eager Test": 1,
        "Assertion Roulette": 3
      }
    },
    "testGetAndIncrement": {
      "name": "testGetAndIncrement",
      "mvn_run": "org.apache.commons.lang3.mutable.MutableByteTest#testGetAndIncrement",
      "smells": {
        "Magic Number Test": 2,
        "Lazy Test": 3,
        "Eager Test": 1,
        "Assertion Roulette": 3
      }
    },
    "testIncrement": {
      "name": "testIncrement",
      "mvn_run": "org.apache.commons.lang3.mutable.MutableByteTest#testIncrement",
      "smells": {
        "Magic Number Test": 1,
        "Lazy Test": 3,
        "Eager Test": 1,
        "Assertion Roulette": 2
      }
    },
    "testIncrementAndGet": {
      "name": "testIncrementAndGet",
      "mvn_run": "org.apache.commons.lang3.mutable.MutableByteTest#testIncrementAndGet",
      "smells": {
        "Magic Number Test": 2,
        "Lazy Test": 3,
        "Eager Test": 1,
        "Assertion Roulette": 3
      }
    },
    "testPrimitiveValues": {
      "name": "testPrimitiveValues",
      "mvn_run": "org.apache.commons.lang3.mutable.MutableByteTest#testPrimitiveValues",
      "smells": {
        "Magic Number Test": 3,
        "Lazy Test": 4,
        "Eager Test": 1,
        "Assertion Roulette": 6
      }
    },
    "testEquals": {
      "name": "testEquals",
      "mvn_run": "org.apache.commons.lang3.mutable.MutableByteTest#testEquals",
      "smells": {
        "Redundant Assertion": 3,
        "Lazy Test": 1,
        "Assertion Roulette": 10
      }
    },
    "testHashCode": {
      "name": "testHashCode",
      "mvn_run": "org.apache.commons.lang3.mutable.MutableByteTest#testHashCode",
      "smells": {
        "Redundant Assertion": 1,
        "Lazy Test": 1,
        "Eager Test": 1,
        "Assertion Roulette": 4
      }
    },
    "testToString": {
      "name": "testToString",
      "mvn_run": "org.apache.commons.lang3.mutable.MutableByteTest#testToString",
      "smells": {
        "Sensitive Equality": 3,
        "Lazy Test": 1,
        "Eager Test": 1,
        "Assertion Roulette": 3
      }
    },
    "testAddValuePrimitive": {
      "name": "testAddValuePrimitive",
      "mvn_run": "org.apache.commons.lang3.mutable.MutableByteTest#testAddValuePrimitive",
      "smells": {
        "Lazy Test": 3,
        "Eager Test": 1,
        "Assertion Roulette": 1
      }
    },
    "testAddValueObject": {
      "name": "testAddValueObject",
      "mvn_run": "org.apache.commons.lang3.mutable.MutableByteTest#testAddValueObject",
      "smells": {
        "Lazy Test": 3,
        "Eager Test": 1,
        "Assertion Roulette": 1
      }
    },
    "testToByte": {
      "name": "testToByte",
      "mvn_run": "org.apache.commons.lang3.mutable.MutableByteTest#testToByte",
      "smells": {
        "Lazy Test": 1,
        "Eager Test": 1,
        "Assertion Roulette": 2
      }
    },
    "testSubtractValuePrimitive": {
      "name": "testSubtractValuePrimitive",
      "mvn_run": "org.apache.commons.lang3.mutable.MutableByteTest#testSubtractValuePrimitive",
      "smells": {
        "Lazy Test": 3,
        "Eager Test": 1,
        "Assertion Roulette": 1
      }
    },
    "testSubtractValueObject": {
      "name": "testSubtractValueObject",
      "mvn_run": "org.apache.commons.lang3.mutable.MutableByteTest#testSubtractValueObject",
      "smells": {
        "Lazy Test": 3,
        "Eager Test": 1,
        "Assertion Roulette": 1
      }
    },
    "testSetNull": {
      "name": "testSetNull",
      "mvn_run": "org.apache.commons.lang3.mutable.MutableByteTest#testSetNull",
      "smells": {
        "Lazy Test": 2,
        "Eager Test": 1
      }
    },
    "testGetSet": {
      "name": "testGetSet",
      "mvn_run": "org.apache.commons.lang3.mutable.MutableByteTest#testGetSet",
      "smells": {
        "Lazy Test": 3,
        "Eager Test": 1,
        "Assertion Roulette": 8
      }
    },
    "testGetAndAddValuePrimitive": {
      "name": "testGetAndAddValuePrimitive",
      "mvn_run": "org.apache.commons.lang3.mutable.MutableByteTest#testGetAndAddValuePrimitive",
      "smells": {
        "Lazy Test": 3,
        "Eager Test": 1,
        "Assertion Roulette": 2
      }
    },
    "testGetAndAddValueObject": {
      "name": "testGetAndAddValueObject",
      "mvn_run": "org.apache.commons.lang3.mutable.MutableByteTest#testGetAndAddValueObject",
      "smells": {
        "Lazy Test": 3,
        "Eager Test": 1,
        "Assertion Roulette": 2
      }
    },
    "testConstructors": {
      "name": "testConstructors",
      "mvn_run": "org.apache.commons.lang3.mutable.MutableByteTest#testConstructors",
      "smells": {
        "Lazy Test": 2,
        "Eager Test": 1,
        "Assertion Roulette": 5
      }
    },
    "testConstructorNull": {
      "name": "testConstructorNull",
      "mvn_run": "org.apache.commons.lang3.mutable.MutableByteTest#testConstructorNull",
      "smells": {
        "Lazy Test": 1
      }
    },
    "testCompareToNull": {
      "name": "testCompareToNull",
      "mvn_run": "org.apache.commons.lang3.mutable.MutableByteTest#testCompareToNull",
      "smells": {
        "Lazy Test": 2,
        "Eager Test": 1
      }
    },
    "testCompareTo": {
      "name": "testCompareTo",
      "mvn_run": "org.apache.commons.lang3.mutable.MutableByteTest#testCompareTo",
      "smells": {
        "Lazy Test": 2,
        "Eager Test": 1,
        "Assertion Roulette": 3
      }
    },
    "testAddAndGetValuePrimitive": {
      "name": "testAddAndGetValuePrimitive",
      "mvn_run": "org.apache.commons.lang3.mutable.MutableByteTest#testAddAndGetValuePrimitive",
      "smells": {
        "Lazy Test": 3,
        "Eager Test": 1,
        "Assertion Roulette": 2
      }
    },
    "testAddAndGetValueObject": {
      "name": "testAddAndGetValueObject",
      "mvn_run": "org.apache.commons.lang3.mutable.MutableByteTest#testAddAndGetValueObject",
      "smells": {
        "Lazy Test": 3,
        "Eager Test": 1,
        "Assertion Roulette": 2
      }
    }
  },
  "org.apache.commons.lang3.mutable.MutableIntTest": {
    "testEquals": {
      "name": "testEquals",
      "mvn_run": "org.apache.commons.lang3.mutable.MutableIntTest#testEquals",
      "smells": {
        "Unknown Test": 1,
        "IgnoredTest": 1,
        "Magic Number Test": 1,
        "Redundant Assertion": 3,
        "Lazy Test": 1,
        "Assertion Roulette": 10
      }
    },
    "testAddAndGetValueObject": {
      "name": "testAddAndGetValueObject",
      "mvn_run": "org.apache.commons.lang3.mutable.MutableIntTest#testAddAndGetValueObject",
      "smells": {
        "Magic Number Test": 2,
        "Lazy Test": 3,
        "Eager Test": 1,
        "Assertion Roulette": 2
      }
    },
    "testAddAndGetValuePrimitive": {
      "name": "testAddAndGetValuePrimitive",
      "mvn_run": "org.apache.commons.lang3.mutable.MutableIntTest#testAddAndGetValuePrimitive",
      "smells": {
        "Magic Number Test": 2,
        "Lazy Test": 3,
        "Eager Test": 1,
        "Assertion Roulette": 2
      }
    },
    "testAddValueObject": {
      "name": "testAddValueObject",
      "mvn_run": "org.apache.commons.lang3.mutable.MutableIntTest#testAddValueObject",
      "smells": {
        "Magic Number Test": 1,
        "Lazy Test": 4,
        "Eager Test": 1,
        "Assertion Roulette": 2
      }
    },
    "testAddValuePrimitive": {
      "name": "testAddValuePrimitive",
      "mvn_run": "org.apache.commons.lang3.mutable.MutableIntTest#testAddValuePrimitive",
      "smells": {
        "Magic Number Test": 1,
        "Lazy Test": 4,
        "Eager Test": 1,
        "Assertion Roulette": 2
      }
    },
    "testCompareTo": {
      "name": "testCompareTo",
      "mvn_run": "org.apache.commons.lang3.mutable.MutableIntTest#testCompareTo",
      "smells": {
        "Magic Number Test": 3,
        "Lazy Test": 2,
        "Eager Test": 1,
        "Assertion Roulette": 3
      }
    },
    "testConstructors": {
      "name": "testConstructors",
      "mvn_run": "org.apache.commons.lang3.mutable.MutableIntTest#testConstructors",
      "smells": {
        "Magic Number Test": 5,
        "Lazy Test": 2,
        "Eager Test": 1,
        "Assertion Roulette": 5
      }
    },
    "testDecrement": {
      "name": "testDecrement",
      "mvn_run": "org.apache.commons.lang3.mutable.MutableIntTest#testDecrement",
      "smells": {
        "Magic Number Test": 1,
        "Lazy Test": 3,
        "Eager Test": 1,
        "Assertion Roulette": 2
      }
    },
    "testDecrementAndGet": {
      "name": "testDecrementAndGet",
      "mvn_run": "org.apache.commons.lang3.mutable.MutableIntTest#testDecrementAndGet",
      "smells": {
        "Magic Number Test": 2,
        "Lazy Test": 3,
        "Eager Test": 1,
        "Assertion Roulette": 3
      }
    },
    "testGetAndAddValueObject": {
      "name": "testGetAndAddValueObject",
      "mvn_run": "org.apache.commons.lang3.mutable.MutableIntTest#testGetAndAddValueObject",
      "smells": {
        "Magic Number Test": 2,
        "Lazy Test": 3,
        "Eager Test": 1,
        "Assertion Roulette": 2
      }
    },
    "testGetAndAddValuePrimitive": {
      "name": "testGetAndAddValuePrimitive",
      "mvn_run": "org.apache.commons.lang3.mutable.MutableIntTest#testGetAndAddValuePrimitive",
      "smells": {
        "Magic Number Test": 2,
        "Lazy Test": 3,
        "Eager Test": 1,
        "Assertion Roulette": 2
      }
    },
    "testGetAndDecrement": {
      "name": "testGetAndDecrement",
      "mvn_run": "org.apache.commons.lang3.mutable.MutableIntTest#testGetAndDecrement",
      "smells": {
        "Magic Number Test": 2,
        "Lazy Test": 3,
        "Eager Test": 1,
        "Assertion Roulette": 3
      }
    },
    "testGetAndIncrement": {
      "name": "testGetAndIncrement",
      "mvn_run": "org.apache.commons.lang3.mutable.MutableIntTest#testGetAndIncrement",
      "smells": {
        "Magic Number Test": 2,
        "Lazy Test": 3,
        "Eager Test": 1,
        "Assertion Roulette": 3
      }
    },
    "testGetSet": {
      "name": "testGetSet",
      "mvn_run": "org.apache.commons.lang3.mutable.MutableIntTest#testGetSet",
      "smells": {
        "Magic Number Test": 8,
        "Lazy Test": 3,
        "Eager Test": 1,
        "Assertion Roulette": 8
      }
    },
    "testIncrement": {
      "name": "testIncrement",
      "mvn_run": "org.apache.commons.lang3.mutable.MutableIntTest#testIncrement",
      "smells": {
        "Magic Number Test": 1,
        "Lazy Test": 3,
        "Eager Test": 1,
        "Assertion Roulette": 2
      }
    },
    "testIncrementAndGet": {
      "name": "testIncrementAndGet",
      "mvn_run": "org.apache.commons.lang3.mutable.MutableIntTest#testIncrementAndGet",
      "smells": {
        "Magic Number Test": 2,
        "Lazy Test": 3,
        "Eager Test": 1,
        "Assertion Roulette": 3
      }
    },
    "testPrimitiveValues": {
      "name": "testPrimitiveValues",
      "mvn_run": "org.apache.commons.lang3.mutable.MutableIntTest#testPrimitiveValues",
      "smells": {
        "Magic Number Test": 2,
        "Lazy Test": 2,
        "Eager Test": 1,
        "Assertion Roulette": 5
      }
    },
    "testSubtractValueObject": {
      "name": "testSubtractValueObject",
      "mvn_run": "org.apache.commons.lang3.mutable.MutableIntTest#testSubtractValueObject",
      "smells": {
        "Magic Number Test": 1,
        "Lazy Test": 4,
        "Eager Test": 1,
        "Assertion Roulette": 2
      }
    },
    "testSubtractValuePrimitive": {
      "name": "testSubtractValuePrimitive",
      "mvn_run": "org.apache.commons.lang3.mutable.MutableIntTest#testSubtractValuePrimitive",
      "smells": {
        "Magic Number Test": 1,
        "Lazy Test": 4,
        "Eager Test": 1,
        "Assertion Roulette": 2
      }
    },
    "testToInteger": {
      "name": "testToInteger",
      "mvn_run": "org.apache.commons.lang3.mutable.MutableIntTest#testToInteger",
      "smells": {
        "Magic Number Test": 2,
        "Lazy Test": 1,
        "Eager Test": 1,
        "Assertion Roulette": 2
      }
    },
    "testHashCode": {
      "name": "testHashCode",
      "mvn_run": "org.apache.commons.lang3.mutable.MutableIntTest#testHashCode",
      "smells": {
        "Redundant Assertion": 1,
        "Lazy Test": 1,
        "Eager Test": 1,
        "Assertion Roulette": 4
      }
    },
    "testToString": {
      "name": "testToString",
      "mvn_run": "org.apache.commons.lang3.mutable.MutableIntTest#testToString",
      "smells": {
        "Sensitive Equality": 3,
        "Lazy Test": 1,
        "Eager Test": 1,
        "Assertion Roulette": 3
      }
    },
    "testCompareToNull": {
      "name": "testCompareToNull",
      "mvn_run": "org.apache.commons.lang3.mutable.MutableIntTest#testCompareToNull",
      "smells": {
        "Lazy Test": 2,
        "Eager Test": 1
      }
    },
    "testSetNull": {
      "name": "testSetNull",
      "mvn_run": "org.apache.commons.lang3.mutable.MutableIntTest#testSetNull",
      "smells": {
        "Lazy Test": 2,
        "Eager Test": 1
      }
    },
    "testConstructorNull": {
      "name": "testConstructorNull",
      "mvn_run": "org.apache.commons.lang3.mutable.MutableIntTest#testConstructorNull",
      "smells": {
        "Lazy Test": 1
      }
    }
  },
  "org.apache.commons.lang3.mutable.MutableObjectTest": {
    "testHashCode": {
      "name": "testHashCode",
      "mvn_run": "org.apache.commons.lang3.mutable.MutableObjectTest#testHashCode",
      "smells": {
        "Magic Number Test": 1,
        "Redundant Assertion": 1,
        "Assertion Roulette": 6
      }
    },
    "testEquals": {
      "name": "testEquals",
      "mvn_run": "org.apache.commons.lang3.mutable.MutableObjectTest#testEquals",
      "smells": {
        "Redundant Assertion": 4,
        "Assertion Roulette": 12
      }
    },
    "testToString": {
      "name": "testToString",
      "mvn_run": "org.apache.commons.lang3.mutable.MutableObjectTest#testToString",
      "smells": {
        "Sensitive Equality": 3,
        "Assertion Roulette": 3
      }
    },
    "testGetSet": {
      "name": "testGetSet",
      "mvn_run": "org.apache.commons.lang3.mutable.MutableObjectTest#testGetSet",
      "smells": {
        "Lazy Test": 1,
        "Eager Test": 1,
        "Assertion Roulette": 3
      }
    },
    "testConstructors": {
      "name": "testConstructors",
      "mvn_run": "org.apache.commons.lang3.mutable.MutableObjectTest#testConstructors",
      "smells": {
        "Lazy Test": 1,
        "Assertion Roulette": 4
      }
    }
  },
  "org.apache.commons.lang3.LocaleUtilsTest": {
    "testConstructor": {
      "name": "testConstructor",
      "mvn_run": "org.apache.commons.lang3.LocaleUtilsTest#testConstructor",
      "smells": {
        "Magic Number Test": 1,
        "Assertion Roulette": 5
      }
    },
    "testLocaleLookupList_LocaleLocale": {
      "name": "testLocaleLookupList_LocaleLocale",
      "mvn_run": "org.apache.commons.lang3.LocaleUtilsTest#testLocaleLookupList_LocaleLocale",
      "smells": {
        "Verbose Test": 1
      }
    },
    "testLang865": {
      "name": "testLang865",
      "mvn_run": "org.apache.commons.lang3.LocaleUtilsTest#testLang865",
      "smells": {
        "Verbose Test": 1,
        "Lazy Test": 1
      }
    },
    "testParseAllLocales": {
      "name": "testParseAllLocales",
      "mvn_run": "org.apache.commons.lang3.LocaleUtilsTest#testParseAllLocales",
      "smells": {
        "Lazy Test": 1,
        "Assertion Roulette": 1,
        "Conditional Test Logic": 3
      }
    },
    "testThreeCharsLocale": {
      "name": "testThreeCharsLocale",
      "mvn_run": "org.apache.commons.lang3.LocaleUtilsTest#testThreeCharsLocale",
      "smells": {
        "Lazy Test": 1,
        "Assertion Roulette": 4,
        "Conditional Test Logic": 1
      }
    },
    "testToLocale_3Part": {
      "name": "testToLocale_3Part",
      "mvn_run": "org.apache.commons.lang3.LocaleUtilsTest#testToLocale_3Part",
      "smells": {
        "Lazy Test": 1,
        "Conditional Test Logic": 1
      }
    },
    "testToLocale_2Part": {
      "name": "testToLocale_2Part",
      "mvn_run": "org.apache.commons.lang3.LocaleUtilsTest#testToLocale_2Part",
      "smells": {
        "Lazy Test": 1
      }
    },
    "testToLocale_1Part": {
      "name": "testToLocale_1Part",
      "mvn_run": "org.apache.commons.lang3.LocaleUtilsTest#testToLocale_1Part",
      "smells": {
        "Lazy Test": 1,
        "Assertion Roulette": 1
      }
    },
    "testToLocales": {
      "name": "testToLocales",
      "mvn_run": "org.apache.commons.lang3.LocaleUtilsTest#testToLocales",
      "smells": {
        "Lazy Test": 1,
        "Assertion Roulette": 1
      }
    },
    "testToLocale_Locale_defaults": {
      "name": "testToLocale_Locale_defaults",
      "mvn_run": "org.apache.commons.lang3.LocaleUtilsTest#testToLocale_Locale_defaults",
      "smells": {
        "Lazy Test": 1,
        "Assertion Roulette": 3
      }
    },
    "testIsAvailableLocale": {
      "name": "testIsAvailableLocale",
      "mvn_run": "org.apache.commons.lang3.LocaleUtilsTest#testIsAvailableLocale",
      "smells": {
        "Lazy Test": 1,
        "Eager Test": 1,
        "Assertion Roulette": 7
      }
    },
    "testAvailableLocaleSet": {
      "name": "testAvailableLocaleSet",
      "mvn_run": "org.apache.commons.lang3.LocaleUtilsTest#testAvailableLocaleSet",
      "smells": {
        "Lazy Test": 1,
        "Assertion Roulette": 3
      }
    },
    "testLocaleLookupList_Locale": {
      "name": "testLocaleLookupList_Locale",
      "mvn_run": "org.apache.commons.lang3.LocaleUtilsTest#testLocaleLookupList_Locale",
      "smells": {
        "Duplicate Assert": 1
      }
    },
    "testAvailableLocaleList": {
      "name": "testAvailableLocaleList",
      "mvn_run": "org.apache.commons.lang3.LocaleUtilsTest#testAvailableLocaleList",
      "smells": {
        "Assertion Roulette": 3
      }
    }
  },
  "org.apache.commons.lang3.CharSetTest": {
    "testConstructor_String_simple": {
      "name": "testConstructor_String_simple",
      "mvn_run": "org.apache.commons.lang3.CharSetTest#testConstructor_String_simple",
      "smells": {
        "Magic Number Test": 6,
        "Sensitive Equality": 10,
        "Verbose Test": 1,
        "Lazy Test": 3,
        "Duplicate Assert": 3,
        "Eager Test": 1,
        "Assertion Roulette": 16
      }
    },
    "testConstructor_String_combo": {
      "name": "testConstructor_String_combo",
      "mvn_run": "org.apache.commons.lang3.CharSetTest#testConstructor_String_combo",
      "smells": {
        "Magic Number Test": 5,
        "Verbose Test": 1,
        "Lazy Test": 2,
        "Duplicate Assert": 3,
        "Eager Test": 1,
        "Assertion Roulette": 18
      }
    },
    "testConstructor_String_comboNegated": {
      "name": "testConstructor_String_comboNegated",
      "mvn_run": "org.apache.commons.lang3.CharSetTest#testConstructor_String_comboNegated",
      "smells": {
        "Magic Number Test": 5,
        "Verbose Test": 1,
        "Lazy Test": 2,
        "Duplicate Assert": 4,
        "Eager Test": 1,
        "Assertion Roulette": 20
      }
    },
    "testConstructor_String_oddDash": {
      "name": "testConstructor_String_oddDash",
      "mvn_run": "org.apache.commons.lang3.CharSetTest#testConstructor_String_oddDash",
      "smells": {
        "Magic Number Test": 8,
        "Verbose Test": 1,
        "Lazy Test": 2,
        "Duplicate Assert": 4,
        "Eager Test": 1,
        "Assertion Roulette": 18
      }
    },
    "testConstructor_String_oddNegate": {
      "name": "testConstructor_String_oddNegate",
      "mvn_run": "org.apache.commons.lang3.CharSetTest#testConstructor_String_oddNegate",
      "smells": {
        "Magic Number Test": 10,
        "Verbose Test": 1,
        "Lazy Test": 2,
        "Duplicate Assert": 6,
        "Eager Test": 1,
        "Assertion Roulette": 25
      }
    },
    "testContains_Char": {
      "name": "testContains_Char",
      "mvn_run": "org.apache.commons.lang3.CharSetTest#testContains_Char",
      "smells": {
        "Magic Number Test": 1,
        "Sensitive Equality": 1,
        "Verbose Test": 1,
        "Lazy Test": 4,
        "Eager Test": 1,
        "Assertion Roulette": 27
      }
    },
    "testStatics": {
      "name": "testStatics",
      "mvn_run": "org.apache.commons.lang3.CharSetTest#testStatics",
      "smells": {
        "Magic Number Test": 5,
        "Duplicate Assert": 3,
        "Assertion Roulette": 10
      }
    },
    "testEquals_Object": {
      "name": "testEquals_Object",
      "mvn_run": "org.apache.commons.lang3.CharSetTest#testEquals_Object",
      "smells": {
        "Redundant Assertion": 3,
        "Lazy Test": 1,
        "Assertion Roulette": 13
      }
    },
    "testHashCode": {
      "name": "testHashCode",
      "mvn_run": "org.apache.commons.lang3.CharSetTest#testHashCode",
      "smells": {
        "Redundant Assertion": 3,
        "Lazy Test": 1,
        "Eager Test": 1,
        "Assertion Roulette": 6
      }
    },
    "testGetInstance_Stringarray": {
      "name": "testGetInstance_Stringarray",
      "mvn_run": "org.apache.commons.lang3.CharSetTest#testGetInstance_Stringarray",
      "smells": {
        "Sensitive Equality": 3,
        "Lazy Test": 2,
        "Eager Test": 1,
        "Assertion Roulette": 4
      }
    },
    "testConstructor_String_oddCombinations": {
      "name": "testConstructor_String_oddCombinations",
      "mvn_run": "org.apache.commons.lang3.CharSetTest#testConstructor_String_oddCombinations",
      "smells": {
        "Verbose Test": 1,
        "Lazy Test": 3,
        "Duplicate Assert": 6,
        "Eager Test": 1,
        "Assertion Roulette": 28
      }
    },
    "testJavadocExamples": {
      "name": "testJavadocExamples",
      "mvn_run": "org.apache.commons.lang3.CharSetTest#testJavadocExamples",
      "smells": {
        "Lazy Test": 2,
        "Eager Test": 1,
        "Assertion Roulette": 7
      }
    },
    "testSerialization": {
      "name": "testSerialization",
      "mvn_run": "org.apache.commons.lang3.CharSetTest#testSerialization",
      "smells": {
        "Lazy Test": 1,
        "Duplicate Assert": 1,
        "Assertion Roulette": 3
      }
    },
    "testGetInstance": {
      "name": "testGetInstance",
      "mvn_run": "org.apache.commons.lang3.CharSetTest#testGetInstance",
      "smells": {
        "Lazy Test": 1,
        "Assertion Roulette": 7
      }
    },
    "testClass": {
      "name": "testClass",
      "mvn_run": "org.apache.commons.lang3.CharSetTest#testClass",
      "smells": {
        "Assertion Roulette": 2
      }
    }
  },
  "org.apache.commons.lang3.ClassLoaderUtilsTest": {
    "testToString_ClassLoader": {
      "name": "testToString_ClassLoader",
      "mvn_run": "org.apache.commons.lang3.ClassLoaderUtilsTest#testToString_ClassLoader",
      "smells": {
        "Sensitive Equality": 1,
        "Lazy Test": 1,
        "Assertion Roulette": 1,
        "Exception Catching Throwing": 1
      }
    },
    "testToString_URLClassLoader": {
      "name": "testToString_URLClassLoader",
      "mvn_run": "org.apache.commons.lang3.ClassLoaderUtilsTest#testToString_URLClassLoader",
      "smells": {
        "Sensitive Equality": 1,
        "Lazy Test": 1,
        "Assertion Roulette": 1,
        "Exception Catching Throwing": 1
      }
    }
  },
  "org.apache.commons.lang3.ConversionTest": {
    "testHexDigitToInt": {
      "name": "testHexDigitToInt",
      "mvn_run": "org.apache.commons.lang3.ConversionTest#testHexDigitToInt",
      "smells": {
        "Magic Number Test": 22,
        "Assertion Roulette": 22
      }
    },
    "testBinaryToHexDigit_2args": {
      "name": "testBinaryToHexDigit_2args",
      "mvn_run": "org.apache.commons.lang3.ConversionTest#testBinaryToHexDigit_2args",
      "smells": {
        "Magic Number Test": 10,
        "Lazy Test": 1,
        "Assertion Roulette": 10
      }
    },
    "testBinaryToHexDigitMsb0_4bits_2args": {
      "name": "testBinaryToHexDigitMsb0_4bits_2args",
      "mvn_run": "org.apache.commons.lang3.ConversionTest#testBinaryToHexDigitMsb0_4bits_2args",
      "smells": {
        "Magic Number Test": 11,
        "Lazy Test": 1,
        "Assertion Roulette": 11
      }
    },
    "testBinaryBeMsb0ToHexDigit_2args": {
      "name": "testBinaryBeMsb0ToHexDigit_2args",
      "mvn_run": "org.apache.commons.lang3.ConversionTest#testBinaryBeMsb0ToHexDigit_2args",
      "smells": {
        "Magic Number Test": 28,
        "Verbose Test": 1,
        "Lazy Test": 1,
        "Assertion Roulette": 28
      }
    },
    "testIntToHexDigit": {
      "name": "testIntToHexDigit",
      "mvn_run": "org.apache.commons.lang3.ConversionTest#testIntToHexDigit",
      "smells": {
        "Magic Number Test": 16,
        "Assertion Roulette": 16
      }
    },
    "testIntToHexDigitMsb0": {
      "name": "testIntToHexDigitMsb0",
      "mvn_run": "org.apache.commons.lang3.ConversionTest#testIntToHexDigitMsb0",
      "smells": {
        "Magic Number Test": 16,
        "Assertion Roulette": 16
      }
    },
    "testIntArrayToLong": {
      "name": "testIntArrayToLong",
      "mvn_run": "org.apache.commons.lang3.ConversionTest#testIntArrayToLong",
      "smells": {
        "Magic Number Test": 7,
        "Assertion Roulette": 7
      }
    },
    "testShortArrayToLong": {
      "name": "testShortArrayToLong",
      "mvn_run": "org.apache.commons.lang3.ConversionTest#testShortArrayToLong",
      "smells": {
        "Magic Number Test": 7,
        "Assertion Roulette": 7
      }
    },
    "testByteArrayToLong": {
      "name": "testByteArrayToLong",
      "mvn_run": "org.apache.commons.lang3.ConversionTest#testByteArrayToLong",
      "smells": {
        "Magic Number Test": 7,
        "Assertion Roulette": 7
      }
    },
    "testShortArrayToInt": {
      "name": "testShortArrayToInt",
      "mvn_run": "org.apache.commons.lang3.ConversionTest#testShortArrayToInt",
      "smells": {
        "Magic Number Test": 6,
        "Assertion Roulette": 6
      }
    },
    "testByteArrayToInt": {
      "name": "testByteArrayToInt",
      "mvn_run": "org.apache.commons.lang3.ConversionTest#testByteArrayToInt",
      "smells": {
        "Magic Number Test": 6,
        "Assertion Roulette": 6
      }
    },
    "testByteArrayToShort": {
      "name": "testByteArrayToShort",
      "mvn_run": "org.apache.commons.lang3.ConversionTest#testByteArrayToShort",
      "smells": {
        "Magic Number Test": 6,
        "Assertion Roulette": 6
      }
    },
    "testHexToLong": {
      "name": "testHexToLong",
      "mvn_run": "org.apache.commons.lang3.ConversionTest#testHexToLong",
      "smells": {
        "Magic Number Test": 6,
        "Assertion Roulette": 6
      }
    },
    "testHexToInt": {
      "name": "testHexToInt",
      "mvn_run": "org.apache.commons.lang3.ConversionTest#testHexToInt",
      "smells": {
        "Magic Number Test": 6,
        "Assertion Roulette": 6
      }
    },
    "testHexToShort": {
      "name": "testHexToShort",
      "mvn_run": "org.apache.commons.lang3.ConversionTest#testHexToShort",
      "smells": {
        "Magic Number Test": 6,
        "Assertion Roulette": 6
      }
    },
    "testHexToByte": {
      "name": "testHexToByte",
      "mvn_run": "org.apache.commons.lang3.ConversionTest#testHexToByte",
      "smells": {
        "Magic Number Test": 6,
        "Assertion Roulette": 6
      }
    },
    "testBinaryToLong": {
      "name": "testBinaryToLong",
      "mvn_run": "org.apache.commons.lang3.ConversionTest#testBinaryToLong",
      "smells": {
        "Magic Number Test": 6,
        "Assertion Roulette": 6
      }
    },
    "testBinaryToInt": {
      "name": "testBinaryToInt",
      "mvn_run": "org.apache.commons.lang3.ConversionTest#testBinaryToInt",
      "smells": {
        "Magic Number Test": 6,
        "Assertion Roulette": 6
      }
    },
    "testBinaryToShort": {
      "name": "testBinaryToShort",
      "mvn_run": "org.apache.commons.lang3.ConversionTest#testBinaryToShort",
      "smells": {
        "Magic Number Test": 6,
        "Assertion Roulette": 6
      }
    },
    "testBinaryToByte": {
      "name": "testBinaryToByte",
      "mvn_run": "org.apache.commons.lang3.ConversionTest#testBinaryToByte",
      "smells": {
        "Magic Number Test": 6,
        "Assertion Roulette": 6
      }
    },
    "testLongToIntArray": {
      "name": "testLongToIntArray",
      "mvn_run": "org.apache.commons.lang3.ConversionTest#testLongToIntArray",
      "smells": {
        "Magic Number Test": 14,
        "Verbose Test": 1,
        "Assertion Roulette": 14
      }
    },
    "testLongToShortArray": {
      "name": "testLongToShortArray",
      "mvn_run": "org.apache.commons.lang3.ConversionTest#testLongToShortArray",
      "smells": {
        "Magic Number Test": 18,
        "Verbose Test": 1,
        "Assertion Roulette": 18
      }
    },
    "testIntToShortArray": {
      "name": "testIntToShortArray",
      "mvn_run": "org.apache.commons.lang3.ConversionTest#testIntToShortArray",
      "smells": {
        "Magic Number Test": 14,
        "Verbose Test": 1,
        "Assertion Roulette": 14
      }
    },
    "testLongToByteArray": {
      "name": "testLongToByteArray",
      "mvn_run": "org.apache.commons.lang3.ConversionTest#testLongToByteArray",
      "smells": {
        "Magic Number Test": 18,
        "Verbose Test": 1,
        "Assertion Roulette": 18
      }
    },
    "testIntToByteArray": {
      "name": "testIntToByteArray",
      "mvn_run": "org.apache.commons.lang3.ConversionTest#testIntToByteArray",
      "smells": {
        "Magic Number Test": 14,
        "Verbose Test": 1,
        "Assertion Roulette": 14
      }
    },
    "testShortToByteArray": {
      "name": "testShortToByteArray",
      "mvn_run": "org.apache.commons.lang3.ConversionTest#testShortToByteArray",
      "smells": {
        "Magic Number Test": 12,
        "Verbose Test": 1,
        "Assertion Roulette": 12
      }
    },
    "testLongToHex": {
      "name": "testLongToHex",
      "mvn_run": "org.apache.commons.lang3.ConversionTest#testLongToHex",
      "smells": {
        "Magic Number Test": 19,
        "Verbose Test": 1,
        "Assertion Roulette": 19
      }
    },
    "testIntToHex": {
      "name": "testIntToHex",
      "mvn_run": "org.apache.commons.lang3.ConversionTest#testIntToHex",
      "smells": {
        "Magic Number Test": 19,
        "Verbose Test": 1,
        "Assertion Roulette": 19
      }
    },
    "testShortToHex": {
      "name": "testShortToHex",
      "mvn_run": "org.apache.commons.lang3.ConversionTest#testShortToHex",
      "smells": {
        "Magic Number Test": 15,
        "Verbose Test": 1,
        "Assertion Roulette": 15
      }
    },
    "testByteToHex": {
      "name": "testByteToHex",
      "mvn_run": "org.apache.commons.lang3.ConversionTest#testByteToHex",
      "smells": {
        "Magic Number Test": 13,
        "Assertion Roulette": 13
      }
    },
    "testLongToBinary": {
      "name": "testLongToBinary",
      "mvn_run": "org.apache.commons.lang3.ConversionTest#testLongToBinary",
      "smells": {
        "Magic Number Test": 14,
        "Verbose Test": 1,
        "Lazy Test": 1,
        "Assertion Roulette": 14
      }
    },
    "testIntToBinary": {
      "name": "testIntToBinary",
      "mvn_run": "org.apache.commons.lang3.ConversionTest#testIntToBinary",
      "smells": {
        "Magic Number Test": 14,
        "Verbose Test": 1,
        "Assertion Roulette": 14
      }
    },
    "testShortToBinary": {
      "name": "testShortToBinary",
      "mvn_run": "org.apache.commons.lang3.ConversionTest#testShortToBinary",
      "smells": {
        "Magic Number Test": 14,
        "Verbose Test": 1,
        "Assertion Roulette": 14
      }
    },
    "testByteToBinary": {
      "name": "testByteToBinary",
      "mvn_run": "org.apache.commons.lang3.ConversionTest#testByteToBinary",
      "smells": {
        "Magic Number Test": 14,
        "Verbose Test": 1,
        "Assertion Roulette": 14
      }
    },
    "testUuidToByteArray": {
      "name": "testUuidToByteArray",
      "mvn_run": "org.apache.commons.lang3.ConversionTest#testUuidToByteArray",
      "smells": {
        "Magic Number Test": 4,
        "Assertion Roulette": 4
      }
    },
    "testByteArrayToUuid": {
      "name": "testByteArrayToUuid",
      "mvn_run": "org.apache.commons.lang3.ConversionTest#testByteArrayToUuid",
      "smells": {
        "Magic Number Test": 3,
        "Assertion Roulette": 3
      }
    },
    "testHexDigitToBinary": {
      "name": "testHexDigitToBinary",
      "mvn_run": "org.apache.commons.lang3.ConversionTest#testHexDigitToBinary",
      "smells": {
        "Verbose Test": 1,
        "Assertion Roulette": 22
      }
    },
    "testHexDigitMsb0ToBinary": {
      "name": "testHexDigitMsb0ToBinary",
      "mvn_run": "org.apache.commons.lang3.ConversionTest#testHexDigitMsb0ToBinary",
      "smells": {
        "Verbose Test": 1,
        "Assertion Roulette": 22
      }
    },
    "testBinaryToHexDigitMsb0_bits": {
      "name": "testBinaryToHexDigitMsb0_bits",
      "mvn_run": "org.apache.commons.lang3.ConversionTest#testBinaryToHexDigitMsb0_bits",
      "smells": {
        "Verbose Test": 1,
        "Lazy Test": 1,
        "Assertion Roulette": 16
      }
    },
    "testBinaryBeMsb0ToHexDigit": {
      "name": "testBinaryBeMsb0ToHexDigit",
      "mvn_run": "org.apache.commons.lang3.ConversionTest#testBinaryBeMsb0ToHexDigit",
      "smells": {
        "Verbose Test": 1,
        "Lazy Test": 1,
        "Assertion Roulette": 17
      }
    },
    "testBinaryToHexDigitReverse": {
      "name": "testBinaryToHexDigitReverse",
      "mvn_run": "org.apache.commons.lang3.ConversionTest#testBinaryToHexDigitReverse",
      "smells": {
        "Lazy Test": 3,
        "Eager Test": 1,
        "Assertion Roulette": 1,
        "Conditional Test Logic": 3
      }
    },
    "testBinaryToHexDigit": {
      "name": "testBinaryToHexDigit",
      "mvn_run": "org.apache.commons.lang3.ConversionTest#testBinaryToHexDigit",
      "smells": {
        "Lazy Test": 1,
        "Assertion Roulette": 18
      }
    },
    "testHexDigitMsb0ToInt": {
      "name": "testHexDigitMsb0ToInt",
      "mvn_run": "org.apache.commons.lang3.ConversionTest#testHexDigitMsb0ToInt",
      "smells": {
        "Assertion Roulette": 22
      }
    }
  },
  "org.apache.commons.lang3.SystemUtilsTest": {
    "testConstructor": {
      "name": "testConstructor",
      "mvn_run": "org.apache.commons.lang3.SystemUtilsTest#testConstructor",
      "smells": {
        "Magic Number Test": 1,
        "Assertion Roulette": 5
      }
    },
    "test_IS_JAVA": {
      "name": "test_IS_JAVA",
      "mvn_run": "org.apache.commons.lang3.SystemUtilsTest#test_IS_JAVA",
      "smells": {
        "Verbose Test": 1,
        "Duplicate Assert": 19,
        "Assertion Roulette": 228,
        "Conditional Test Logic": 12,
        "Print Statement": 1
      }
    },
    "test_IS_OS": {
      "name": "test_IS_OS",
      "mvn_run": "org.apache.commons.lang3.SystemUtilsTest#test_IS_OS",
      "smells": {
        "Verbose Test": 1,
        "Duplicate Assert": 3,
        "Assertion Roulette": 25,
        "Conditional Test Logic": 8,
        "Print Statement": 1
      }
    },
    "testIsJavaVersionAtLeast": {
      "name": "testIsJavaVersionAtLeast",
      "mvn_run": "org.apache.commons.lang3.SystemUtilsTest#testIsJavaVersionAtLeast",
      "smells": {
        "Verbose Test": 1,
        "Duplicate Assert": 16,
        "Assertion Roulette": 78,
        "Conditional Test Logic": 6
      }
    },
    "testIsJavaVersionAtMost": {
      "name": "testIsJavaVersionAtMost",
      "mvn_run": "org.apache.commons.lang3.SystemUtilsTest#testIsJavaVersionAtMost",
      "smells": {
        "Verbose Test": 1,
        "Duplicate Assert": 16,
        "Assertion Roulette": 78,
        "Conditional Test Logic": 6
      }
    },
    "testJavaVersionMatches": {
      "name": "testJavaVersionMatches",
      "mvn_run": "org.apache.commons.lang3.SystemUtilsTest#testJavaVersionMatches",
      "smells": {
        "Verbose Test": 1,
        "Duplicate Assert": 12,
        "Assertion Roulette": 150
      }
    },
    "testOsVersionMatches": {
      "name": "testOsVersionMatches",
      "mvn_run": "org.apache.commons.lang3.SystemUtilsTest#testOsVersionMatches",
      "smells": {
        "Verbose Test": 1,
        "Duplicate Assert": 8,
        "Assertion Roulette": 22
      }
    },
    "testGetEnvironmentVariablePresent": {
      "name": "testGetEnvironmentVariablePresent",
      "mvn_run": "org.apache.commons.lang3.SystemUtilsTest#testGetEnvironmentVariablePresent",
      "smells": {
        "Lazy Test": 1,
        "Assertion Roulette": 1
      }
    },
    "testGetEnvironmentVariableAbsent": {
      "name": "testGetEnvironmentVariableAbsent",
      "mvn_run": "org.apache.commons.lang3.SystemUtilsTest#testGetEnvironmentVariableAbsent",
      "smells": {
        "Lazy Test": 1,
        "Assertion Roulette": 2
      }
    },
    "testOSMatchesName": {
      "name": "testOSMatchesName",
      "mvn_run": "org.apache.commons.lang3.SystemUtilsTest#testOSMatchesName",
      "smells": {
        "Duplicate Assert": 2,
        "Assertion Roulette": 5
      }
    },
    "testOSMatchesNameAndVersion": {
      "name": "testOSMatchesNameAndVersion",
      "mvn_run": "org.apache.commons.lang3.SystemUtilsTest#testOSMatchesNameAndVersion",
      "smells": {
        "Duplicate Assert": 2,
        "Assertion Roulette": 7
      }
    },
    "test_IS_zOS": {
      "name": "test_IS_zOS",
      "mvn_run": "org.apache.commons.lang3.SystemUtilsTest#test_IS_zOS",
      "smells": {
        "Assertion Roulette": 3,
        "Conditional Test Logic": 2
      }
    },
    "test_USER_NAME": {
      "name": "test_USER_NAME",
      "mvn_run": "org.apache.commons.lang3.SystemUtilsTest#test_USER_NAME",
      "smells": {
        "Assertion Roulette": 1
      }
    },
    "testGetHostName": {
      "name": "testGetHostName",
      "mvn_run": "org.apache.commons.lang3.SystemUtilsTest#testGetHostName",
      "smells": {
        "Assertion Roulette": 1,
        "Conditional Test Logic": 1
      }
    },
    "testGetJavaHome": {
      "name": "testGetJavaHome",
      "mvn_run": "org.apache.commons.lang3.SystemUtilsTest#testGetJavaHome",
      "smells": {
        "Assertion Roulette": 2,
        "Mystery Guest": 1
      }
    },
    "testGetJavaIoTmpDir": {
      "name": "testGetJavaIoTmpDir",
      "mvn_run": "org.apache.commons.lang3.SystemUtilsTest#testGetJavaIoTmpDir",
      "smells": {
        "Assertion Roulette": 2,
        "Mystery Guest": 1
      }
    },
    "testGetUserDir": {
      "name": "testGetUserDir",
      "mvn_run": "org.apache.commons.lang3.SystemUtilsTest#testGetUserDir",
      "smells": {
        "Assertion Roulette": 2,
        "Mystery Guest": 1
      }
    },
    "testGetUserHome": {
      "name": "testGetUserHome",
      "mvn_run": "org.apache.commons.lang3.SystemUtilsTest#testGetUserHome",
      "smells": {
        "Assertion Roulette": 2,
        "Mystery Guest": 1
      }
    },
    "testGetUserName": {
      "name": "testGetUserName",
      "mvn_run": "org.apache.commons.lang3.SystemUtilsTest#testGetUserName",
      "smells": {
        "Assertion Roulette": 2
      }
    },
    "testJavaAwtHeadless": {
      "name": "testJavaAwtHeadless",
      "mvn_run": "org.apache.commons.lang3.SystemUtilsTest#testJavaAwtHeadless",
      "smells": {
        "Assertion Roulette": 4,
        "Conditional Test Logic": 1
      }
    }
  },
  "org.apache.commons.lang3.AnnotationUtilsTest": {
    "testGeneratedAnnotationEquivalentToRealAnnotation": {
      "name": "testGeneratedAnnotationEquivalentToRealAnnotation",
      "mvn_run": "org.apache.commons.lang3.AnnotationUtilsTest#testGeneratedAnnotationEquivalentToRealAnnotation",
      "smells": {
        "Sensitive Equality": 1,
        "Verbose Test": 1,
        "Lazy Test": 1,
        "Assertion Roulette": 8,
        "Conditional Test Logic": 3
      }
    },
    "testToString": {
      "name": "testToString",
      "mvn_run": "org.apache.commons.lang3.AnnotationUtilsTest#testToString",
      "smells": {
        "Sensitive Equality": 1,
        "Assertion Roulette": 5
      }
    },
    "testBothArgsNull": {
      "name": "testBothArgsNull",
      "mvn_run": "org.apache.commons.lang3.AnnotationUtilsTest#testBothArgsNull",
      "smells": {
        "Lazy Test": 1,
        "Assertion Roulette": 1
      }
    },
    "testOneArgNull": {
      "name": "testOneArgNull",
      "mvn_run": "org.apache.commons.lang3.AnnotationUtilsTest#testOneArgNull",
      "smells": {
        "Lazy Test": 1,
        "Assertion Roulette": 2
      }
    },
    "testAnnotationsOfDifferingTypes": {
      "name": "testAnnotationsOfDifferingTypes",
      "mvn_run": "org.apache.commons.lang3.AnnotationUtilsTest#testAnnotationsOfDifferingTypes",
      "smells": {
        "Lazy Test": 1,
        "Assertion Roulette": 2
      }
    },
    "testNonEquivalentAnnotationsOfSameType": {
      "name": "testNonEquivalentAnnotationsOfSameType",
      "mvn_run": "org.apache.commons.lang3.AnnotationUtilsTest#testNonEquivalentAnnotationsOfSameType",
      "smells": {
        "Lazy Test": 1,
        "Assertion Roulette": 2
      }
    },
    "testSameInstance": {
      "name": "testSameInstance",
      "mvn_run": "org.apache.commons.lang3.AnnotationUtilsTest#testSameInstance",
      "smells": {
        "Lazy Test": 1,
        "Assertion Roulette": 1
      }
    },
    "testEquivalence": {
      "name": "testEquivalence",
      "mvn_run": "org.apache.commons.lang3.AnnotationUtilsTest#testEquivalence",
      "smells": {
        "Lazy Test": 1,
        "Assertion Roulette": 2
      }
    },
    "testIsValidAnnotationMemberType": {
      "name": "testIsValidAnnotationMemberType",
      "mvn_run": "org.apache.commons.lang3.AnnotationUtilsTest#testIsValidAnnotationMemberType",
      "smells": {
        "Assertion Roulette": 4,
        "Conditional Test Logic": 2
      }
    },
    "testHashCode": {
      "name": "testHashCode",
      "mvn_run": "org.apache.commons.lang3.AnnotationUtilsTest#testHashCode",
      "smells": {
        "Assertion Roulette": 3
      }
    }
  },
  "org.apache.commons.lang3.StreamsTest": {
    "testSimpleStreamMap": {
      "name": "testSimpleStreamMap",
      "mvn_run": "org.apache.commons.lang3.StreamsTest#testSimpleStreamMap",
      "smells": {
        "Magic Number Test": 4,
        "Lazy Test": 6,
        "Eager Test": 2,
        "Assertion Roulette": 4,
        "Conditional Test Logic": 2
      }
    },
    "testSimpleStreamForEach": {
      "name": "testSimpleStreamForEach",
      "mvn_run": "org.apache.commons.lang3.StreamsTest#testSimpleStreamForEach",
      "smells": {
        "Magic Number Test": 4,
        "Lazy Test": 2,
        "Eager Test": 2,
        "Assertion Roulette": 4,
        "Conditional Test Logic": 2
      }
    },
    "testToArray": {
      "name": "testToArray",
      "mvn_run": "org.apache.commons.lang3.StreamsTest#testToArray",
      "smells": {
        "Magic Number Test": 2,
        "Lazy Test": 4,
        "Eager Test": 2,
        "Assertion Roulette": 10
      }
    },
    "testSimpleStreamFilter": {
      "name": "testSimpleStreamFilter",
      "mvn_run": "org.apache.commons.lang3.StreamsTest#testSimpleStreamFilter",
      "smells": {
        "Lazy Test": 6,
        "Eager Test": 2
      }
    },
    "testSimpleStreamMapFailing": {
      "name": "testSimpleStreamMapFailing",
      "mvn_run": "org.apache.commons.lang3.StreamsTest#testSimpleStreamMapFailing",
      "smells": {
        "Lazy Test": 6,
        "Eager Test": 2,
        "Assertion Roulette": 2
      }
    },
    "testInstanceOfStream": {
      "name": "testInstanceOfStream",
      "mvn_run": "org.apache.commons.lang3.StreamsTest#testInstanceOfStream",
      "smells": {
        "Magic Number Test": 4,
        "Lazy Test": 1,
        "Assertion Roulette": 4
      }
    },
    "testNullSafeStreamNotNull": {
      "name": "testNullSafeStreamNotNull",
      "mvn_run": "org.apache.commons.lang3.StreamsTest#testNullSafeStreamNotNull",
      "smells": {
        "Magic Number Test": 3,
        "Lazy Test": 1,
        "Assertion Roulette": 3
      }
    },
    "testNullSafeStreamNull": {
      "name": "testNullSafeStreamNull",
      "mvn_run": "org.apache.commons.lang3.StreamsTest#testNullSafeStreamNull",
      "smells": {
        "Magic Number Test": 1,
        "Lazy Test": 1,
        "Assertion Roulette": 1
      }
    },
    "testOfArray": {
      "name": "testOfArray",
      "mvn_run": "org.apache.commons.lang3.StreamsTest#testOfArray",
      "smells": {
        "Magic Number Test": 3,
        "Assertion Roulette": 3
      }
    },
    "testOfCollectionNotNull": {
      "name": "testOfCollectionNotNull",
      "mvn_run": "org.apache.commons.lang3.StreamsTest#testOfCollectionNotNull",
      "smells": {
        "Magic Number Test": 1,
        "Lazy Test": 1,
        "Assertion Roulette": 1
      }
    },
    "testOfCollectionNull": {
      "name": "testOfCollectionNull",
      "mvn_run": "org.apache.commons.lang3.StreamsTest#testOfCollectionNull",
      "smells": {
        "Magic Number Test": 1,
        "Lazy Test": 1,
        "Assertion Roulette": 1
      }
    },
    "testOfEnumeration": {
      "name": "testOfEnumeration",
      "mvn_run": "org.apache.commons.lang3.StreamsTest#testOfEnumeration",
      "smells": {
        "Magic Number Test": 4,
        "Lazy Test": 1,
        "Assertion Roulette": 6
      }
    },
    "testOfIterableNotNull": {
      "name": "testOfIterableNotNull",
      "mvn_run": "org.apache.commons.lang3.StreamsTest#testOfIterableNotNull",
      "smells": {
        "Magic Number Test": 1,
        "Lazy Test": 1,
        "Assertion Roulette": 1
      }
    },
    "testOfIterableNull": {
      "name": "testOfIterableNull",
      "mvn_run": "org.apache.commons.lang3.StreamsTest#testOfIterableNull",
      "smells": {
        "Magic Number Test": 1,
        "Lazy Test": 1,
        "Assertion Roulette": 1
      }
    },
    "testOfIteratorNotNull": {
      "name": "testOfIteratorNotNull",
      "mvn_run": "org.apache.commons.lang3.StreamsTest#testOfIteratorNotNull",
      "smells": {
        "Magic Number Test": 1,
        "Lazy Test": 1,
        "Assertion Roulette": 1
      }
    },
    "testOfIteratorNull": {
      "name": "testOfIteratorNull",
      "mvn_run": "org.apache.commons.lang3.StreamsTest#testOfIteratorNull",
      "smells": {
        "Magic Number Test": 1,
        "Lazy Test": 1,
        "Assertion Roulette": 1
      }
    },
    "testStreamCollection": {
      "name": "testStreamCollection",
      "mvn_run": "org.apache.commons.lang3.StreamsTest#testStreamCollection",
      "smells": {
        "Magic Number Test": 1,
        "Lazy Test": 2,
        "Eager Test": 1,
        "Assertion Roulette": 1
      }
    },
    "testStreamCollectionNull": {
      "name": "testStreamCollectionNull",
      "mvn_run": "org.apache.commons.lang3.StreamsTest#testStreamCollectionNull",
      "smells": {
        "Magic Number Test": 1,
        "Lazy Test": 2,
        "Eager Test": 1,
        "Assertion Roulette": 1
      }
    }
  },
  "org.apache.commons.lang3.util.FluentBitSetTest": {
    "test_and": {
      "name": "test_and",
      "mvn_run": "org.apache.commons.lang3.util.FluentBitSetTest#test_and",
      "smells": {
        "Magic Number Test": 1,
        "Lazy Test": 4,
        "Eager Test": 1,
        "Conditional Test Logic": 2
      }
    },
    "test_and_BitSet": {
      "name": "test_and_BitSet",
      "mvn_run": "org.apache.commons.lang3.util.FluentBitSetTest#test_and_BitSet",
      "smells": {
        "Magic Number Test": 1,
        "Lazy Test": 5,
        "Eager Test": 1,
        "Conditional Test Logic": 2
      }
    },
    "test_andNot": {
      "name": "test_andNot",
      "mvn_run": "org.apache.commons.lang3.util.FluentBitSetTest#test_andNot",
      "smells": {
        "Magic Number Test": 1,
        "Sensitive Equality": 1,
        "Lazy Test": 6,
        "Eager Test": 1,
        "Assertion Roulette": 1
      }
    },
    "test_andNot_BitSet": {
      "name": "test_andNot_BitSet",
      "mvn_run": "org.apache.commons.lang3.util.FluentBitSetTest#test_andNot_BitSet",
      "smells": {
        "Magic Number Test": 1,
        "Sensitive Equality": 1,
        "Lazy Test": 7,
        "Eager Test": 1,
        "Assertion Roulette": 1
      }
    },
    "test_cardinality": {
      "name": "test_cardinality",
      "mvn_run": "org.apache.commons.lang3.util.FluentBitSetTest#test_cardinality",
      "smells": {
        "Magic Number Test": 4,
        "Lazy Test": 4,
        "Eager Test": 1,
        "Assertion Roulette": 4
      }
    },
    "test_clear": {
      "name": "test_clear",
      "mvn_run": "org.apache.commons.lang3.util.FluentBitSetTest#test_clear",
      "smells": {
        "Magic Number Test": 3,
        "Lazy Test": 7,
        "Eager Test": 1,
        "Assertion Roulette": 3,
        "Conditional Test Logic": 1
      }
    },
    "test_clearI": {
      "name": "test_clearI",
      "mvn_run": "org.apache.commons.lang3.util.FluentBitSetTest#test_clearI",
      "smells": {
        "Magic Number Test": 16,
        "Verbose Test": 1,
        "Lazy Test": 5,
        "Eager Test": 1,
        "Assertion Roulette": 14,
        "Conditional Test Logic": 1
      }
    },
    "test_clearII": {
      "name": "test_clearII",
      "mvn_run": "org.apache.commons.lang3.util.FluentBitSetTest#test_clearII",
      "smells": {
        "Magic Number Test": 20,
        "Verbose Test": 1,
        "Lazy Test": 5,
        "Duplicate Assert": 3,
        "Eager Test": 1,
        "Assertion Roulette": 19,
        "Conditional Test Logic": 25
      }
    },
    "test_clearIntArray": {
      "name": "test_clearIntArray",
      "mvn_run": "org.apache.commons.lang3.util.FluentBitSetTest#test_clearIntArray",
      "smells": {
        "Magic Number Test": 16,
        "Verbose Test": 1,
        "Lazy Test": 5,
        "Eager Test": 1,
        "Assertion Roulette": 14,
        "Conditional Test Logic": 1
      }
    },
    "test_Constructor": {
      "name": "test_Constructor",
      "mvn_run": "org.apache.commons.lang3.util.FluentBitSetTest#test_Constructor",
      "smells": {
        "Magic Number Test": 1,
        "Sensitive Equality": 1,
        "Lazy Test": 2,
        "Eager Test": 1,
        "Assertion Roulette": 1
      }
    },
    "test_ConstructorInt": {
      "name": "test_ConstructorInt",
      "mvn_run": "org.apache.commons.lang3.util.FluentBitSetTest#test_ConstructorInt",
      "smells": {
        "Magic Number Test": 2,
        "Sensitive Equality": 2,
        "Lazy Test": 2,
        "Eager Test": 1,
        "Assertion Roulette": 2
      }
    },
    "test_flipI": {
      "name": "test_flipI",
      "mvn_run": "org.apache.commons.lang3.util.FluentBitSetTest#test_flipI",
      "smells": {
        "Magic Number Test": 16,
        "Verbose Test": 1,
        "Lazy Test": 6,
        "Eager Test": 1,
        "Assertion Roulette": 8,
        "Conditional Test Logic": 4
      }
    },
    "test_flipII": {
      "name": "test_flipII",
      "mvn_run": "org.apache.commons.lang3.util.FluentBitSetTest#test_flipII",
      "smells": {
        "Magic Number Test": 28,
        "Verbose Test": 1,
        "Lazy Test": 4,
        "Duplicate Assert": 12,
        "Eager Test": 1,
        "Assertion Roulette": 1,
        "Conditional Test Logic": 17,
        "Exception Catching Throwing": 3
      }
    },
    "test_getI": {
      "name": "test_getI",
      "mvn_run": "org.apache.commons.lang3.util.FluentBitSetTest#test_getI",
      "smells": {
        "Magic Number Test": 11,
        "Verbose Test": 1,
        "Lazy Test": 4,
        "Eager Test": 1,
        "Assertion Roulette": 6
      }
    },
    "test_getII": {
      "name": "test_getII",
      "mvn_run": "org.apache.commons.lang3.util.FluentBitSetTest#test_getII",
      "smells": {
        "Magic Number Test": 19,
        "Verbose Test": 1,
        "Lazy Test": 5,
        "Eager Test": 1,
        "Assertion Roulette": 28
      }
    },
    "test_hashCode": {
      "name": "test_hashCode",
      "mvn_run": "org.apache.commons.lang3.util.FluentBitSetTest#test_hashCode",
      "smells": {
        "Magic Number Test": 1,
        "Lazy Test": 4,
        "Eager Test": 1,
        "Assertion Roulette": 2
      }
    },
    "test_length": {
      "name": "test_length",
      "mvn_run": "org.apache.commons.lang3.util.FluentBitSetTest#test_length",
      "smells": {
        "Magic Number Test": 5,
        "Lazy Test": 2,
        "Duplicate Assert": 1,
        "Eager Test": 1,
        "Assertion Roulette": 5
      }
    },
    "test_nextClearBitI": {
      "name": "test_nextClearBitI",
      "mvn_run": "org.apache.commons.lang3.util.FluentBitSetTest#test_nextClearBitI",
      "smells": {
        "Magic Number Test": 26,
        "Verbose Test": 1,
        "Lazy Test": 3,
        "Eager Test": 1,
        "Assertion Roulette": 26,
        "Exception Catching Throwing": 1
      }
    },
    "test_nextSetBitI": {
      "name": "test_nextSetBitI",
      "mvn_run": "org.apache.commons.lang3.util.FluentBitSetTest#test_nextSetBitI",
      "smells": {
        "Magic Number Test": 25,
        "Verbose Test": 1,
        "Lazy Test": 1,
        "Eager Test": 1,
        "Assertion Roulette": 25,
        "Exception Catching Throwing": 1
      }
    },
    "test_or": {
      "name": "test_or",
      "mvn_run": "org.apache.commons.lang3.util.FluentBitSetTest#test_or",
      "smells": {
        "Magic Number Test": 1,
        "Lazy Test": 3,
        "Eager Test": 1,
        "Conditional Test Logic": 2
      }
    },
    "test_or_BitSet": {
      "name": "test_or_BitSet",
      "mvn_run": "org.apache.commons.lang3.util.FluentBitSetTest#test_or_BitSet",
      "smells": {
        "Magic Number Test": 1,
        "Lazy Test": 4,
        "Eager Test": 1,
        "Conditional Test Logic": 2
      }
    },
    "test_or_FluentBitSetArray": {
      "name": "test_or_FluentBitSetArray",
      "mvn_run": "org.apache.commons.lang3.util.FluentBitSetTest#test_or_FluentBitSetArray",
      "smells": {
        "Magic Number Test": 1,
        "Lazy Test": 3,
        "Eager Test": 1,
        "Conditional Test Logic": 2
      }
    },
    "test_previousClearBit": {
      "name": "test_previousClearBit",
      "mvn_run": "org.apache.commons.lang3.util.FluentBitSetTest#test_previousClearBit",
      "smells": {
        "Magic Number Test": 1,
        "Assertion Roulette": 1
      }
    },
    "test_previousSetBit": {
      "name": "test_previousSetBit",
      "mvn_run": "org.apache.commons.lang3.util.FluentBitSetTest#test_previousSetBit",
      "smells": {
        "Magic Number Test": 1,
        "Assertion Roulette": 1
      }
    },
    "test_setII": {
      "name": "test_setII",
      "mvn_run": "org.apache.commons.lang3.util.FluentBitSetTest#test_setII",
      "smells": {
        "Magic Number Test": 6,
        "Verbose Test": 1,
        "Lazy Test": 3,
        "Duplicate Assert": 4,
        "Eager Test": 1,
        "Assertion Roulette": 1,
        "Conditional Test Logic": 18,
        "Exception Catching Throwing": 3
      }
    },
    "test_setIIZ": {
      "name": "test_setIIZ",
      "mvn_run": "org.apache.commons.lang3.util.FluentBitSetTest#test_setIIZ",
      "smells": {
        "Magic Number Test": 1,
        "Lazy Test": 2,
        "Eager Test": 1
      }
    },
    "test_setInclusive": {
      "name": "test_setInclusive",
      "mvn_run": "org.apache.commons.lang3.util.FluentBitSetTest#test_setInclusive",
      "smells": {
        "Magic Number Test": 6,
        "Verbose Test": 1,
        "Lazy Test": 3,
        "Duplicate Assert": 4,
        "Eager Test": 1,
        "Assertion Roulette": 1,
        "Conditional Test Logic": 18,
        "Exception Catching Throwing": 3
      }
    },
    "test_setInt": {
      "name": "test_setInt",
      "mvn_run": "org.apache.commons.lang3.util.FluentBitSetTest#test_setInt",
      "smells": {
        "Magic Number Test": 6,
        "Verbose Test": 1,
        "Lazy Test": 5,
        "Duplicate Assert": 1,
        "Eager Test": 1,
        "Assertion Roulette": 4,
        "Conditional Test Logic": 3,
        "Exception Catching Throwing": 1
      }
    },
    "test_setIntArray": {
      "name": "test_setIntArray",
      "mvn_run": "org.apache.commons.lang3.util.FluentBitSetTest#test_setIntArray",
      "smells": {
        "Magic Number Test": 6,
        "Verbose Test": 1,
        "Lazy Test": 5,
        "Duplicate Assert": 1,
        "Eager Test": 1,
        "Assertion Roulette": 4,
        "Conditional Test Logic": 3,
        "Exception Catching Throwing": 1
      }
    },
    "test_setIZ": {
      "name": "test_setIZ",
      "mvn_run": "org.apache.commons.lang3.util.FluentBitSetTest#test_setIZ",
      "smells": {
        "Magic Number Test": 2,
        "Lazy Test": 2,
        "Eager Test": 1
      }
    },
    "test_setRangeInclusive": {
      "name": "test_setRangeInclusive",
      "mvn_run": "org.apache.commons.lang3.util.FluentBitSetTest#test_setRangeInclusive",
      "smells": {
        "Magic Number Test": 2,
        "Lazy Test": 2,
        "Eager Test": 1,
        "Assertion Roulette": 1
      }
    },
    "test_size": {
      "name": "test_size",
      "mvn_run": "org.apache.commons.lang3.util.FluentBitSetTest#test_size",
      "smells": {
        "Magic Number Test": 2,
        "Lazy Test": 2,
        "Eager Test": 1,
        "Assertion Roulette": 1
      }
    },
    "test_stream": {
      "name": "test_stream",
      "mvn_run": "org.apache.commons.lang3.util.FluentBitSetTest#test_stream",
      "smells": {
        "Magic Number Test": 1,
        "Eager Test": 1,
        "Assertion Roulette": 1
      }
    },
    "test_toString": {
      "name": "test_toString",
      "mvn_run": "org.apache.commons.lang3.util.FluentBitSetTest#test_toString",
      "smells": {
        "Sensitive Equality": 2,
        "Lazy Test": 2,
        "Eager Test": 1
      }
    },
    "test_xor": {
      "name": "test_xor",
      "mvn_run": "org.apache.commons.lang3.util.FluentBitSetTest#test_xor",
      "smells": {
        "Sensitive Equality": 1,
        "Lazy Test": 5,
        "Eager Test": 1,
        "Conditional Test Logic": 3
      }
    },
    "test_xor_BitSet": {
      "name": "test_xor_BitSet",
      "mvn_run": "org.apache.commons.lang3.util.FluentBitSetTest#test_xor_BitSet",
      "smells": {
        "Sensitive Equality": 1,
        "Lazy Test": 6,
        "Eager Test": 1,
        "Conditional Test Logic": 3
      }
    },
    "test_intersects": {
      "name": "test_intersects",
      "mvn_run": "org.apache.commons.lang3.util.FluentBitSetTest#test_intersects",
      "smells": {
        "Verbose Test": 1,
        "Lazy Test": 3,
        "Eager Test": 1
      }
    },
    "test_intersects_BitSet": {
      "name": "test_intersects_BitSet",
      "mvn_run": "org.apache.commons.lang3.util.FluentBitSetTest#test_intersects_BitSet",
      "smells": {
        "Verbose Test": 1,
        "Lazy Test": 4,
        "Eager Test": 1
      }
    },
    "test_isEmpty": {
      "name": "test_isEmpty",
      "mvn_run": "org.apache.commons.lang3.util.FluentBitSetTest#test_isEmpty",
      "smells": {
        "Lazy Test": 3,
        "Eager Test": 1
      }
    },
    "test_equals": {
      "name": "test_equals",
      "mvn_run": "org.apache.commons.lang3.util.FluentBitSetTest#test_equals",
      "smells": {
        "Lazy Test": 4,
        "Eager Test": 1,
        "Assertion Roulette": 2
      }
    },
    "test_clone": {
      "name": "test_clone",
      "mvn_run": "org.apache.commons.lang3.util.FluentBitSetTest#test_clone",
      "smells": {
        "Lazy Test": 1,
        "Assertion Roulette": 1
      }
    },
    "test_toByteArray": {
      "name": "test_toByteArray",
      "mvn_run": "org.apache.commons.lang3.util.FluentBitSetTest#test_toByteArray",
      "smells": {
        "Assertion Roulette": 1
      }
    },
    "test_toLongArray": {
      "name": "test_toLongArray",
      "mvn_run": "org.apache.commons.lang3.util.FluentBitSetTest#test_toLongArray",
      "smells": {
        "Assertion Roulette": 1
      }
    }
  },
  "org.apache.commons.lang3.tuple.TripleTest": {
    "testComparable1": {
      "name": "testComparable1",
      "mvn_run": "org.apache.commons.lang3.tuple.TripleTest#testComparable1",
      "smells": {
        "Magic Number Test": 4,
        "Lazy Test": 2,
        "Eager Test": 1,
        "Assertion Roulette": 4
      }
    },
    "testComparable2": {
      "name": "testComparable2",
      "mvn_run": "org.apache.commons.lang3.tuple.TripleTest#testComparable2",
      "smells": {
        "Magic Number Test": 4,
        "Lazy Test": 2,
        "Eager Test": 1,
        "Assertion Roulette": 4
      }
    },
    "testComparable3": {
      "name": "testComparable3",
      "mvn_run": "org.apache.commons.lang3.tuple.TripleTest#testComparable3",
      "smells": {
        "Magic Number Test": 4,
        "Lazy Test": 2,
        "Eager Test": 1,
        "Assertion Roulette": 4
      }
    },
    "testComparable4": {
      "name": "testComparable4",
      "mvn_run": "org.apache.commons.lang3.tuple.TripleTest#testComparable4",
      "smells": {
        "Magic Number Test": 4,
        "Lazy Test": 2,
        "Eager Test": 1,
        "Assertion Roulette": 4
      }
    },
    "testEmptyArrayGenerics": {
      "name": "testEmptyArrayGenerics",
      "mvn_run": "org.apache.commons.lang3.tuple.TripleTest#testEmptyArrayGenerics",
      "smells": {
        "Magic Number Test": 1,
        "Assertion Roulette": 1
      }
    },
    "testEmptyArrayLength": {
      "name": "testEmptyArrayLength",
      "mvn_run": "org.apache.commons.lang3.tuple.TripleTest#testEmptyArrayLength",
      "smells": {
        "Magic Number Test": 1,
        "Assertion Roulette": 1
      }
    },
    "testTripleOf": {
      "name": "testTripleOf",
      "mvn_run": "org.apache.commons.lang3.tuple.TripleTest#testTripleOf",
      "smells": {
        "Magic Number Test": 1,
        "Lazy Test": 1,
        "Assertion Roulette": 8
      }
    },
    "testToString": {
      "name": "testToString",
      "mvn_run": "org.apache.commons.lang3.tuple.TripleTest#testToString",
      "smells": {
        "Sensitive Equality": 1,
        "Lazy Test": 2,
        "Eager Test": 1,
        "Assertion Roulette": 1
      }
    },
    "testToStringCustom": {
      "name": "testToStringCustom",
      "mvn_run": "org.apache.commons.lang3.tuple.TripleTest#testToStringCustom",
      "smells": {
        "Sensitive Equality": 1,
        "Lazy Test": 2,
        "Eager Test": 1,
        "Assertion Roulette": 1
      }
    },
    "testFormattable_simple": {
      "name": "testFormattable_simple",
      "mvn_run": "org.apache.commons.lang3.tuple.TripleTest#testFormattable_simple",
      "smells": {
        "Lazy Test": 1,
        "Assertion Roulette": 1
      }
    },
    "testFormattable_padded": {
      "name": "testFormattable_padded",
      "mvn_run": "org.apache.commons.lang3.tuple.TripleTest#testFormattable_padded",
      "smells": {
        "Lazy Test": 1,
        "Assertion Roulette": 1
      }
    },
    "testCompatibilityBetweenTriples": {
      "name": "testCompatibilityBetweenTriples",
      "mvn_run": "org.apache.commons.lang3.tuple.TripleTest#testCompatibilityBetweenTriples",
      "smells": {
        "Lazy Test": 1,
        "Eager Test": 1,
        "Assertion Roulette": 3
      }
    },
    "testOfNonNull": {
      "name": "testOfNonNull",
      "mvn_run": "org.apache.commons.lang3.tuple.TripleTest#testOfNonNull",
      "smells": {
        "Eager Test": 1,
        "Assertion Roulette": 3
      }
    }
  },
  "org.apache.commons.lang3.tuple.PairTest": {
    "testComparable1": {
      "name": "testComparable1",
      "mvn_run": "org.apache.commons.lang3.tuple.PairTest#testComparable1",
      "smells": {
        "Magic Number Test": 4,
        "Lazy Test": 2,
        "Eager Test": 1,
        "Assertion Roulette": 4
      }
    },
    "testComparable2": {
      "name": "testComparable2",
      "mvn_run": "org.apache.commons.lang3.tuple.PairTest#testComparable2",
      "smells": {
        "Magic Number Test": 4,
        "Lazy Test": 2,
        "Eager Test": 1,
        "Assertion Roulette": 4
      }
    },
    "testEmptyArrayGenerics": {
      "name": "testEmptyArrayGenerics",
      "mvn_run": "org.apache.commons.lang3.tuple.PairTest#testEmptyArrayGenerics",
      "smells": {
        "Magic Number Test": 1,
        "Assertion Roulette": 1
      }
    },
    "testEmptyArrayLength": {
      "name": "testEmptyArrayLength",
      "mvn_run": "org.apache.commons.lang3.tuple.PairTest#testEmptyArrayLength",
      "smells": {
        "Magic Number Test": 1,
        "Assertion Roulette": 1
      }
    },
    "testPairOfObjects": {
      "name": "testPairOfObjects",
      "mvn_run": "org.apache.commons.lang3.tuple.PairTest#testPairOfObjects",
      "smells": {
        "Magic Number Test": 1,
        "Lazy Test": 3,
        "Eager Test": 1,
        "Assertion Roulette": 8
      }
    },
    "testToString": {
      "name": "testToString",
      "mvn_run": "org.apache.commons.lang3.tuple.PairTest#testToString",
      "smells": {
        "Sensitive Equality": 1,
        "Lazy Test": 2,
        "Eager Test": 1,
        "Assertion Roulette": 1
      }
    },
    "testToStringCustom": {
      "name": "testToStringCustom",
      "mvn_run": "org.apache.commons.lang3.tuple.PairTest#testToStringCustom",
      "smells": {
        "Sensitive Equality": 1,
        "Lazy Test": 2,
        "Eager Test": 1,
        "Assertion Roulette": 1
      }
    },
    "testPairOfMapEntry": {
      "name": "testPairOfMapEntry",
      "mvn_run": "org.apache.commons.lang3.tuple.PairTest#testPairOfMapEntry",
      "smells": {
        "Lazy Test": 3,
        "Eager Test": 1,
        "Assertion Roulette": 2
      }
    },
    "testOfNonNull": {
      "name": "testOfNonNull",
      "mvn_run": "org.apache.commons.lang3.tuple.PairTest#testOfNonNull",
      "smells": {
        "Lazy Test": 2,
        "Eager Test": 1,
        "Assertion Roulette": 2
      }
    },
    "testMapEntry": {
      "name": "testMapEntry",
      "mvn_run": "org.apache.commons.lang3.tuple.PairTest#testMapEntry",
      "smells": {
        "Lazy Test": 2,
        "Eager Test": 1,
        "Assertion Roulette": 2
      }
    },
    "testCompatibilityBetweenPairs": {
      "name": "testCompatibilityBetweenPairs",
      "mvn_run": "org.apache.commons.lang3.tuple.PairTest#testCompatibilityBetweenPairs",
      "smells": {
        "Lazy Test": 2,
        "Eager Test": 1,
        "Assertion Roulette": 5
      }
    },
    "testFormattable_simple": {
      "name": "testFormattable_simple",
      "mvn_run": "org.apache.commons.lang3.tuple.PairTest#testFormattable_simple",
      "smells": {
        "Lazy Test": 1,
        "Assertion Roulette": 1
      }
    },
    "testFormattable_padded": {
      "name": "testFormattable_padded",
      "mvn_run": "org.apache.commons.lang3.tuple.PairTest#testFormattable_padded",
      "smells": {
        "Lazy Test": 1,
        "Assertion Roulette": 1
      }
    }
  },
  "org.apache.commons.lang3.tuple.ImmutablePairTest": {
    "testBasic": {
      "name": "testBasic",
      "mvn_run": "org.apache.commons.lang3.tuple.ImmutablePairTest#testBasic",
      "smells": {
        "Magic Number Test": 2,
        "Lazy Test": 3,
        "Eager Test": 1,
        "Assertion Roulette": 9,
        "Conditional Test Logic": 2
      }
    },
    "testComparableLeftOnly": {
      "name": "testComparableLeftOnly",
      "mvn_run": "org.apache.commons.lang3.tuple.ImmutablePairTest#testComparableLeftOnly",
      "smells": {
        "Magic Number Test": 4,
        "Lazy Test": 2,
        "Eager Test": 1,
        "Assertion Roulette": 6
      }
    },
    "testComparableRightOnly": {
      "name": "testComparableRightOnly",
      "mvn_run": "org.apache.commons.lang3.tuple.ImmutablePairTest#testComparableRightOnly",
      "smells": {
        "Magic Number Test": 4,
        "Lazy Test": 2,
        "Eager Test": 1,
        "Assertion Roulette": 6
      }
    },
    "testEmptyArrayGenerics": {
      "name": "testEmptyArrayGenerics",
      "mvn_run": "org.apache.commons.lang3.tuple.ImmutablePairTest#testEmptyArrayGenerics",
      "smells": {
        "Magic Number Test": 1,
        "Assertion Roulette": 1
      }
    },
    "testEmptyArrayLength": {
      "name": "testEmptyArrayLength",
      "mvn_run": "org.apache.commons.lang3.tuple.ImmutablePairTest#testEmptyArrayLength",
      "smells": {
        "Magic Number Test": 1,
        "Assertion Roulette": 1
      }
    },
    "testEquals": {
      "name": "testEquals",
      "mvn_run": "org.apache.commons.lang3.tuple.ImmutablePairTest#testEquals",
      "smells": {
        "Magic Number Test": 1,
        "Redundant Assertion": 2,
        "Lazy Test": 1,
        "Assertion Roulette": 5
      }
    },
    "testPairOfObjects": {
      "name": "testPairOfObjects",
      "mvn_run": "org.apache.commons.lang3.tuple.ImmutablePairTest#testPairOfObjects",
      "smells": {
        "Magic Number Test": 2,
        "Lazy Test": 3,
        "Eager Test": 1,
        "Assertion Roulette": 10
      }
    },
    "testHashCode": {
      "name": "testHashCode",
      "mvn_run": "org.apache.commons.lang3.tuple.ImmutablePairTest#testHashCode",
      "smells": {
        "Redundant Assertion": 1,
        "Lazy Test": 1,
        "Eager Test": 1,
        "Assertion Roulette": 1
      }
    },
    "testNullPairEquals": {
      "name": "testNullPairEquals",
      "mvn_run": "org.apache.commons.lang3.tuple.ImmutablePairTest#testNullPairEquals",
      "smells": {
        "Redundant Assertion": 1,
        "Lazy Test": 1,
        "Assertion Roulette": 1
      }
    },
    "testNullPairSame": {
      "name": "testNullPairSame",
      "mvn_run": "org.apache.commons.lang3.tuple.ImmutablePairTest#testNullPairSame",
      "smells": {
        "Redundant Assertion": 1,
        "Lazy Test": 1,
        "Assertion Roulette": 1
      }
    },
    "testToString": {
      "name": "testToString",
      "mvn_run": "org.apache.commons.lang3.tuple.ImmutablePairTest#testToString",
      "smells": {
        "Sensitive Equality": 4,
        "Lazy Test": 1,
        "Eager Test": 1,
        "Assertion Roulette": 4
      }
    },
    "testToStringLeft": {
      "name": "testToStringLeft",
      "mvn_run": "org.apache.commons.lang3.tuple.ImmutablePairTest#testToStringLeft",
      "smells": {
        "Sensitive Equality": 1,
        "Lazy Test": 1,
        "Assertion Roulette": 1
      }
    },
    "testToStringRight": {
      "name": "testToStringRight",
      "mvn_run": "org.apache.commons.lang3.tuple.ImmutablePairTest#testToStringRight",
      "smells": {
        "Sensitive Equality": 1,
        "Lazy Test": 1,
        "Assertion Roulette": 1
      }
    },
    "testUseAsKeyOfTreeMap": {
      "name": "testUseAsKeyOfTreeMap",
      "mvn_run": "org.apache.commons.lang3.tuple.ImmutablePairTest#testUseAsKeyOfTreeMap",
      "smells": {
        "Lazy Test": 3,
        "Eager Test": 1,
        "Assertion Roulette": 2,
        "Conditional Test Logic": 1
      }
    },
    "testPairOfMapEntry": {
      "name": "testPairOfMapEntry",
      "mvn_run": "org.apache.commons.lang3.tuple.ImmutablePairTest#testPairOfMapEntry",
      "smells": {
        "Lazy Test": 3,
        "Eager Test": 1,
        "Assertion Roulette": 2
      }
    },
    "testNullPairRight": {
      "name": "testNullPairRight",
      "mvn_run": "org.apache.commons.lang3.tuple.ImmutablePairTest#testNullPairRight",
      "smells": {
        "Lazy Test": 2,
        "Eager Test": 1,
        "Assertion Roulette": 1
      }
    },
    "testUseAsKeyOfHashMap": {
      "name": "testUseAsKeyOfHashMap",
      "mvn_run": "org.apache.commons.lang3.tuple.ImmutablePairTest#testUseAsKeyOfHashMap",
      "smells": {
        "Lazy Test": 1,
        "Assertion Roulette": 2
      }
    },
    "testSerialization": {
      "name": "testSerialization",
      "mvn_run": "org.apache.commons.lang3.tuple.ImmutablePairTest#testSerialization",
      "smells": {
        "Lazy Test": 1,
        "Assertion Roulette": 2
      }
    },
    "testNullPairValue": {
      "name": "testNullPairValue",
      "mvn_run": "org.apache.commons.lang3.tuple.ImmutablePairTest#testNullPairValue",
      "smells": {
        "Lazy Test": 1,
        "Eager Test": 1,
        "Assertion Roulette": 1
      }
    },
    "testNullPairTyped": {
      "name": "testNullPairTyped",
      "mvn_run": "org.apache.commons.lang3.tuple.ImmutablePairTest#testNullPairTyped",
      "smells": {
        "Lazy Test": 1,
        "Assertion Roulette": 1
      }
    },
    "testNullPairLeft": {
      "name": "testNullPairLeft",
      "mvn_run": "org.apache.commons.lang3.tuple.ImmutablePairTest#testNullPairLeft",
      "smells": {
        "Lazy Test": 2,
        "Eager Test": 1,
        "Assertion Roulette": 1
      }
    },
    "testNullPairKey": {
      "name": "testNullPairKey",
      "mvn_run": "org.apache.commons.lang3.tuple.ImmutablePairTest#testNullPairKey",
      "smells": {
        "Lazy Test": 1,
        "Eager Test": 1,
        "Assertion Roulette": 1
      }
    },
    "testOfNonNull": {
      "name": "testOfNonNull",
      "mvn_run": "org.apache.commons.lang3.tuple.ImmutablePairTest#testOfNonNull",
      "smells": {
        "Assertion Roulette": 2
      }
    }
  },
  "org.apache.commons.lang3.tuple.MutablePairTest": {
    "testBasic": {
      "name": "testBasic",
      "mvn_run": "org.apache.commons.lang3.tuple.MutablePairTest#testBasic",
      "smells": {
        "Magic Number Test": 2,
        "Lazy Test": 3,
        "Eager Test": 1,
        "Assertion Roulette": 9,
        "Conditional Test Logic": 2
      }
    },
    "testEmptyArrayGenerics": {
      "name": "testEmptyArrayGenerics",
      "mvn_run": "org.apache.commons.lang3.tuple.MutablePairTest#testEmptyArrayGenerics",
      "smells": {
        "Magic Number Test": 1,
        "Assertion Roulette": 1
      }
    },
    "testEmptyArrayLength": {
      "name": "testEmptyArrayLength",
      "mvn_run": "org.apache.commons.lang3.tuple.MutablePairTest#testEmptyArrayLength",
      "smells": {
        "Magic Number Test": 1,
        "Assertion Roulette": 1
      }
    },
    "testEquals": {
      "name": "testEquals",
      "mvn_run": "org.apache.commons.lang3.tuple.MutablePairTest#testEquals",
      "smells": {
        "Magic Number Test": 1,
        "Redundant Assertion": 2,
        "Lazy Test": 1,
        "Assertion Roulette": 5
      }
    },
    "testMutate": {
      "name": "testMutate",
      "mvn_run": "org.apache.commons.lang3.tuple.MutablePairTest#testMutate",
      "smells": {
        "Magic Number Test": 1,
        "Lazy Test": 2,
        "Eager Test": 1,
        "Assertion Roulette": 2
      }
    },
    "testPairOfObjects": {
      "name": "testPairOfObjects",
      "mvn_run": "org.apache.commons.lang3.tuple.MutablePairTest#testPairOfObjects",
      "smells": {
        "Magic Number Test": 1,
        "Lazy Test": 3,
        "Eager Test": 1,
        "Assertion Roulette": 6
      }
    },
    "testHashCode": {
      "name": "testHashCode",
      "mvn_run": "org.apache.commons.lang3.tuple.MutablePairTest#testHashCode",
      "smells": {
        "Redundant Assertion": 1,
        "Lazy Test": 1,
        "Eager Test": 1,
        "Assertion Roulette": 1
      }
    },
    "testToString": {
      "name": "testToString",
      "mvn_run": "org.apache.commons.lang3.tuple.MutablePairTest#testToString",
      "smells": {
        "Sensitive Equality": 4,
        "Lazy Test": 1,
        "Eager Test": 1,
        "Assertion Roulette": 4
      }
    },
    "testPairOfMapEntry": {
      "name": "testPairOfMapEntry",
      "mvn_run": "org.apache.commons.lang3.tuple.MutablePairTest#testPairOfMapEntry",
      "smells": {
        "Lazy Test": 3,
        "Eager Test": 1,
        "Assertion Roulette": 2
      }
    },
    "testDefault": {
      "name": "testDefault",
      "mvn_run": "org.apache.commons.lang3.tuple.MutablePairTest#testDefault",
      "smells": {
        "Lazy Test": 2,
        "Eager Test": 1,
        "Assertion Roulette": 2
      }
    },
    "testSerialization": {
      "name": "testSerialization",
      "mvn_run": "org.apache.commons.lang3.tuple.MutablePairTest#testSerialization",
      "smells": {
        "Lazy Test": 1,
        "Assertion Roulette": 2
      }
    },
    "testOfNonNull": {
      "name": "testOfNonNull",
      "mvn_run": "org.apache.commons.lang3.tuple.MutablePairTest#testOfNonNull",
      "smells": {
        "Assertion Roulette": 2
      }
    }
  },
  "org.apache.commons.lang3.tuple.ImmutableTripleTest": {
    "testBasic": {
      "name": "testBasic",
      "mvn_run": "org.apache.commons.lang3.tuple.ImmutableTripleTest#testBasic",
      "smells": {
        "Magic Number Test": 4,
        "Lazy Test": 3,
        "Eager Test": 1,
        "Assertion Roulette": 12
      }
    },
    "testEmptyArrayGenerics": {
      "name": "testEmptyArrayGenerics",
      "mvn_run": "org.apache.commons.lang3.tuple.ImmutableTripleTest#testEmptyArrayGenerics",
      "smells": {
        "Magic Number Test": 1,
        "Assertion Roulette": 1
      }
    },
    "testEmptyArrayLength": {
      "name": "testEmptyArrayLength",
      "mvn_run": "org.apache.commons.lang3.tuple.ImmutableTripleTest#testEmptyArrayLength",
      "smells": {
        "Magic Number Test": 1,
        "Assertion Roulette": 1
      }
    },
    "testEquals": {
      "name": "testEquals",
      "mvn_run": "org.apache.commons.lang3.tuple.ImmutableTripleTest#testEquals",
      "smells": {
        "Magic Number Test": 2,
        "Redundant Assertion": 2,
        "Lazy Test": 1,
        "Assertion Roulette": 5
      }
    },
    "testTripleOf": {
      "name": "testTripleOf",
      "mvn_run": "org.apache.commons.lang3.tuple.ImmutableTripleTest#testTripleOf",
      "smells": {
        "Magic Number Test": 2,
        "Lazy Test": 4,
        "Eager Test": 1,
        "Assertion Roulette": 12
      }
    },
    "testHashCode": {
      "name": "testHashCode",
      "mvn_run": "org.apache.commons.lang3.tuple.ImmutableTripleTest#testHashCode",
      "smells": {
        "Redundant Assertion": 1,
        "Lazy Test": 1,
        "Eager Test": 1,
        "Assertion Roulette": 1
      }
    },
    "testNullTripleEquals": {
      "name": "testNullTripleEquals",
      "mvn_run": "org.apache.commons.lang3.tuple.ImmutableTripleTest#testNullTripleEquals",
      "smells": {
        "Redundant Assertion": 1,
        "Lazy Test": 1,
        "Assertion Roulette": 1
      }
    },
    "testNullTripleSame": {
      "name": "testNullTripleSame",
      "mvn_run": "org.apache.commons.lang3.tuple.ImmutableTripleTest#testNullTripleSame",
      "smells": {
        "Redundant Assertion": 1,
        "Lazy Test": 1,
        "Assertion Roulette": 1
      }
    },
    "testToString": {
      "name": "testToString",
      "mvn_run": "org.apache.commons.lang3.tuple.ImmutableTripleTest#testToString",
      "smells": {
        "Sensitive Equality": 7,
        "Lazy Test": 1,
        "Eager Test": 1,
        "Assertion Roulette": 7
      }
    },
    "testNullTripleTyped": {
      "name": "testNullTripleTyped",
      "mvn_run": "org.apache.commons.lang3.tuple.ImmutableTripleTest#testNullTripleTyped",
      "smells": {
        "Lazy Test": 1,
        "Assertion Roulette": 1
      }
    },
    "testNullTripleRight": {
      "name": "testNullTripleRight",
      "mvn_run": "org.apache.commons.lang3.tuple.ImmutableTripleTest#testNullTripleRight",
      "smells": {
        "Lazy Test": 2,
        "Eager Test": 1,
        "Assertion Roulette": 1
      }
    },
    "testNullTripleMiddle": {
      "name": "testNullTripleMiddle",
      "mvn_run": "org.apache.commons.lang3.tuple.ImmutableTripleTest#testNullTripleMiddle",
      "smells": {
        "Lazy Test": 2,
        "Eager Test": 1,
        "Assertion Roulette": 1
      }
    },
    "testNullTripleLeft": {
      "name": "testNullTripleLeft",
      "mvn_run": "org.apache.commons.lang3.tuple.ImmutableTripleTest#testNullTripleLeft",
      "smells": {
        "Lazy Test": 2,
        "Eager Test": 1,
        "Assertion Roulette": 1
      }
    },
    "testUseAsKeyOfTreeMap": {
      "name": "testUseAsKeyOfTreeMap",
      "mvn_run": "org.apache.commons.lang3.tuple.ImmutableTripleTest#testUseAsKeyOfTreeMap",
      "smells": {
        "Lazy Test": 4,
        "Eager Test": 1,
        "Assertion Roulette": 2,
        "Conditional Test Logic": 1
      }
    },
    "testUseAsKeyOfHashMap": {
      "name": "testUseAsKeyOfHashMap",
      "mvn_run": "org.apache.commons.lang3.tuple.ImmutableTripleTest#testUseAsKeyOfHashMap",
      "smells": {
        "Lazy Test": 1,
        "Assertion Roulette": 2
      }
    },
    "testSerialization": {
      "name": "testSerialization",
      "mvn_run": "org.apache.commons.lang3.tuple.ImmutableTripleTest#testSerialization",
      "smells": {
        "Lazy Test": 1,
        "Assertion Roulette": 2
      }
    },
    "testOfNonNull": {
      "name": "testOfNonNull",
      "mvn_run": "org.apache.commons.lang3.tuple.ImmutableTripleTest#testOfNonNull",
      "smells": {
        "Assertion Roulette": 3
      }
    }
  },
  "org.apache.commons.lang3.tuple.MutableTripleTest": {
    "testBasic": {
      "name": "testBasic",
      "mvn_run": "org.apache.commons.lang3.tuple.MutableTripleTest#testBasic",
      "smells": {
        "Magic Number Test": 1,
        "Lazy Test": 3,
        "Eager Test": 1,
        "Assertion Roulette": 6
      }
    },
    "testEmptyArrayGenerics": {
      "name": "testEmptyArrayGenerics",
      "mvn_run": "org.apache.commons.lang3.tuple.MutableTripleTest#testEmptyArrayGenerics",
      "smells": {
        "Magic Number Test": 1,
        "Assertion Roulette": 1
      }
    },
    "testEmptyArrayLength": {
      "name": "testEmptyArrayLength",
      "mvn_run": "org.apache.commons.lang3.tuple.MutableTripleTest#testEmptyArrayLength",
      "smells": {
        "Magic Number Test": 1,
        "Assertion Roulette": 1
      }
    },
    "testEquals": {
      "name": "testEquals",
      "mvn_run": "org.apache.commons.lang3.tuple.MutableTripleTest#testEquals",
      "smells": {
        "Magic Number Test": 1,
        "Redundant Assertion": 2,
        "Lazy Test": 1,
        "Assertion Roulette": 6
      }
    },
    "testMutate": {
      "name": "testMutate",
      "mvn_run": "org.apache.commons.lang3.tuple.MutableTripleTest#testMutate",
      "smells": {
        "Magic Number Test": 1,
        "Lazy Test": 3,
        "Eager Test": 1,
        "Assertion Roulette": 3
      }
    },
    "testTripleOf": {
      "name": "testTripleOf",
      "mvn_run": "org.apache.commons.lang3.tuple.MutableTripleTest#testTripleOf",
      "smells": {
        "Magic Number Test": 1,
        "Lazy Test": 4,
        "Eager Test": 1,
        "Assertion Roulette": 6
      }
    },
    "testHashCode": {
      "name": "testHashCode",
      "mvn_run": "org.apache.commons.lang3.tuple.MutableTripleTest#testHashCode",
      "smells": {
        "Redundant Assertion": 1,
        "Lazy Test": 1,
        "Eager Test": 1,
        "Assertion Roulette": 1
      }
    },
    "testToString": {
      "name": "testToString",
      "mvn_run": "org.apache.commons.lang3.tuple.MutableTripleTest#testToString",
      "smells": {
        "Sensitive Equality": 7,
        "Lazy Test": 1,
        "Eager Test": 1,
        "Assertion Roulette": 7
      }
    },
    "testDefault": {
      "name": "testDefault",
      "mvn_run": "org.apache.commons.lang3.tuple.MutableTripleTest#testDefault",
      "smells": {
        "Lazy Test": 3,
        "Eager Test": 1,
        "Assertion Roulette": 3
      }
    },
    "testSerialization": {
      "name": "testSerialization",
      "mvn_run": "org.apache.commons.lang3.tuple.MutableTripleTest#testSerialization",
      "smells": {
        "Lazy Test": 1,
        "Assertion Roulette": 2
      }
    },
    "testOfNonNull": {
      "name": "testOfNonNull",
      "mvn_run": "org.apache.commons.lang3.tuple.MutableTripleTest#testOfNonNull",
      "smells": {
        "Assertion Roulette": 3
      }
    }
  },
  "org.apache.commons.lang3.StringEscapeUtilsTest": {
    "testEscapeCsvWriter": {
      "name": "testEscapeCsvWriter",
      "mvn_run": "org.apache.commons.lang3.StringEscapeUtilsTest#testEscapeCsvWriter",
      "smells": {
        "Unknown Test": 1
      }
    },
    "testUnescapeCsvWriter": {
      "name": "testUnescapeCsvWriter",
      "mvn_run": "org.apache.commons.lang3.StringEscapeUtilsTest#testUnescapeCsvWriter",
      "smells": {
        "Unknown Test": 1
      }
    },
    "testConstructor": {
      "name": "testConstructor",
      "mvn_run": "org.apache.commons.lang3.StringEscapeUtilsTest#testConstructor",
      "smells": {
        "Magic Number Test": 1,
        "Assertion Roulette": 5
      }
    },
    "testEscapeJava": {
      "name": "testEscapeJava",
      "mvn_run": "org.apache.commons.lang3.StringEscapeUtilsTest#testEscapeJava",
      "smells": {
        "Redundant Assertion": 3,
        "Lazy Test": 1,
        "Assertion Roulette": 1
      }
    },
    "testUnescapeJava": {
      "name": "testUnescapeJava",
      "mvn_run": "org.apache.commons.lang3.StringEscapeUtilsTest#testUnescapeJava",
      "smells": {
        "Redundant Assertion": 2,
        "Lazy Test": 1,
        "Assertion Roulette": 1
      }
    },
    "testEscapeXml": {
      "name": "testEscapeXml",
      "mvn_run": "org.apache.commons.lang3.StringEscapeUtilsTest#testEscapeXml",
      "smells": {
        "Sensitive Equality": 2,
        "Lazy Test": 2,
        "Eager Test": 1,
        "Assertion Roulette": 7
      }
    },
    "testEscapeHiragana": {
      "name": "testEscapeHiragana",
      "mvn_run": "org.apache.commons.lang3.StringEscapeUtilsTest#testEscapeHiragana",
      "smells": {
        "Lazy Test": 2,
        "Eager Test": 1,
        "Assertion Roulette": 2
      }
    },
    "testEscapeHtmlHighUnicode": {
      "name": "testEscapeHtmlHighUnicode",
      "mvn_run": "org.apache.commons.lang3.StringEscapeUtilsTest#testEscapeHtmlHighUnicode",
      "smells": {
        "Lazy Test": 2,
        "Eager Test": 1,
        "Assertion Roulette": 2
      }
    },
    "testEscapeHtmlVersions": {
      "name": "testEscapeHtmlVersions",
      "mvn_run": "org.apache.commons.lang3.StringEscapeUtilsTest#testEscapeHtmlVersions",
      "smells": {
        "Lazy Test": 2,
        "Eager Test": 1,
        "Assertion Roulette": 2
      }
    },
    "testEscapeHtml": {
      "name": "testEscapeHtml",
      "mvn_run": "org.apache.commons.lang3.StringEscapeUtilsTest#testEscapeHtml",
      "smells": {
        "Lazy Test": 1,
        "Assertion Roulette": 2,
        "Conditional Test Logic": 2
      }
    },
    "testUnescapeCsvIllegalStateException": {
      "name": "testUnescapeCsvIllegalStateException",
      "mvn_run": "org.apache.commons.lang3.StringEscapeUtilsTest#testUnescapeCsvIllegalStateException",
      "smells": {
        "Lazy Test": 1
      }
    },
    "testEscapeCsvIllegalStateException": {
      "name": "testEscapeCsvIllegalStateException",
      "mvn_run": "org.apache.commons.lang3.StringEscapeUtilsTest#testEscapeCsvIllegalStateException",
      "smells": {
        "Lazy Test": 1
      }
    },
    "testLang911": {
      "name": "testLang911",
      "mvn_run": "org.apache.commons.lang3.StringEscapeUtilsTest#testLang911",
      "smells": {
        "Lazy Test": 2,
        "Eager Test": 1,
        "Assertion Roulette": 1
      }
    },
    "testLang313": {
      "name": "testLang313",
      "mvn_run": "org.apache.commons.lang3.StringEscapeUtilsTest#testLang313",
      "smells": {
        "Lazy Test": 1,
        "Assertion Roulette": 1
      }
    },
    "testStandaloneAmphersand": {
      "name": "testStandaloneAmphersand",
      "mvn_run": "org.apache.commons.lang3.StringEscapeUtilsTest#testStandaloneAmphersand",
      "smells": {
        "Lazy Test": 2,
        "Eager Test": 1,
        "Assertion Roulette": 4
      }
    },
    "testUnescapeUnknownEntity": {
      "name": "testUnescapeUnknownEntity",
      "mvn_run": "org.apache.commons.lang3.StringEscapeUtilsTest#testUnescapeUnknownEntity",
      "smells": {
        "Lazy Test": 1,
        "Assertion Roulette": 1
      }
    },
    "testUnescapeHexCharsHtml": {
      "name": "testUnescapeHexCharsHtml",
      "mvn_run": "org.apache.commons.lang3.StringEscapeUtilsTest#testUnescapeHexCharsHtml",
      "smells": {
        "Lazy Test": 1,
        "Assertion Roulette": 1,
        "Conditional Test Logic": 1
      }
    },
    "testUnescapeHtml4": {
      "name": "testUnescapeHtml4",
      "mvn_run": "org.apache.commons.lang3.StringEscapeUtilsTest#testUnescapeHtml4",
      "smells": {
        "Lazy Test": 1,
        "Assertion Roulette": 6,
        "Conditional Test Logic": 2
      }
    },
    "testLang720": {
      "name": "testLang720",
      "mvn_run": "org.apache.commons.lang3.StringEscapeUtilsTest#testLang720",
      "smells": {
        "Lazy Test": 1,
        "Assertion Roulette": 1
      }
    },
    "testEscapeJavaWithSlash": {
      "name": "testEscapeJavaWithSlash",
      "mvn_run": "org.apache.commons.lang3.StringEscapeUtilsTest#testEscapeJavaWithSlash",
      "smells": {
        "Lazy Test": 1,
        "Assertion Roulette": 1
      }
    },
    "testLang708": {
      "name": "testLang708",
      "mvn_run": "org.apache.commons.lang3.StringEscapeUtilsTest#testLang708",
      "smells": {
        "Lazy Test": 1
      }
    },
    "testUnescapeEcmaScript": {
      "name": "testUnescapeEcmaScript",
      "mvn_run": "org.apache.commons.lang3.StringEscapeUtilsTest#testUnescapeEcmaScript",
      "smells": {
        "Lazy Test": 1,
        "Eager Test": 1,
        "Assertion Roulette": 3
      }
    },
    "testEscapeEcmaScript": {
      "name": "testEscapeEcmaScript",
      "mvn_run": "org.apache.commons.lang3.StringEscapeUtilsTest#testEscapeEcmaScript",
      "smells": {
        "Lazy Test": 1,
        "Assertion Roulette": 3
      }
    },
    "testUnescapeXmlSupplementaryCharacters": {
      "name": "testUnescapeXmlSupplementaryCharacters",
      "mvn_run": "org.apache.commons.lang3.StringEscapeUtilsTest#testUnescapeXmlSupplementaryCharacters",
      "smells": {
        "Lazy Test": 1
      }
    },
    "testEscapeXml10": {
      "name": "testEscapeXml10",
      "mvn_run": "org.apache.commons.lang3.StringEscapeUtilsTest#testEscapeXml10",
      "smells": {
        "Assertion Roulette": 1
      }
    },
    "testEscapeXml11": {
      "name": "testEscapeXml11",
      "mvn_run": "org.apache.commons.lang3.StringEscapeUtilsTest#testEscapeXml11",
      "smells": {
        "Assertion Roulette": 1
      }
    },
    "testEscapeXmlAllCharacters": {
      "name": "testEscapeXmlAllCharacters",
      "mvn_run": "org.apache.commons.lang3.StringEscapeUtilsTest#testEscapeXmlAllCharacters",
      "smells": {
        "Assertion Roulette": 7
      }
    },
    "testEscapeCsvString": {
      "name": "testEscapeCsvString",
      "mvn_run": "org.apache.commons.lang3.StringEscapeUtilsTest#testEscapeCsvString",
      "smells": {
        "Assertion Roulette": 8
      }
    },
    "testUnescapeCsvString": {
      "name": "testUnescapeCsvString",
      "mvn_run": "org.apache.commons.lang3.StringEscapeUtilsTest#testUnescapeCsvString",
      "smells": {
        "Assertion Roulette": 9
      }
    },
    "testEscapeJson": {
      "name": "testEscapeJson",
      "mvn_run": "org.apache.commons.lang3.StringEscapeUtilsTest#testEscapeJson",
      "smells": {
        "Assertion Roulette": 3
      }
    },
    "testUnescapeJson": {
      "name": "testUnescapeJson",
      "mvn_run": "org.apache.commons.lang3.StringEscapeUtilsTest#testUnescapeJson",
      "smells": {
        "Assertion Roulette": 3
      }
    }
  },
  "org.apache.commons.lang3.NotImplementedExceptionTest": {
    "testConstructors": {
      "name": "testConstructors",
      "mvn_run": "org.apache.commons.lang3.NotImplementedExceptionTest#testConstructors",
      "smells": {
        "Sensitive Equality": 2,
        "Eager Test": 1,
        "Assertion Roulette": 1
      }
    }
  },
  "org.apache.commons.lang3.stream.IntStreamsTest": {
    "testRange": {
      "name": "testRange",
      "mvn_run": "org.apache.commons.lang3.stream.IntStreamsTest#testRange",
      "smells": {
        "Eager Test": 1,
        "Assertion Roulette": 1
      }
    },
    "testRangeClosed": {
      "name": "testRangeClosed",
      "mvn_run": "org.apache.commons.lang3.stream.IntStreamsTest#testRangeClosed",
      "smells": {
        "Eager Test": 1,
        "Assertion Roulette": 1
      }
    }
  },
  "org.apache.commons.lang3.reflect.TypeLiteralTest": {
    "testEquals": {
      "name": "testEquals",
      "mvn_run": "org.apache.commons.lang3.reflect.TypeLiteralTest#testEquals",
      "smells": {
        "Redundant Assertion": 2,
        "Assertion Roulette": 3
      }
    },
    "testBasic": {
      "name": "testBasic",
      "mvn_run": "org.apache.commons.lang3.reflect.TypeLiteralTest#testBasic",
      "smells": {
        "Assertion Roulette": 2
      }
    },
    "testTyped": {
      "name": "testTyped",
      "mvn_run": "org.apache.commons.lang3.reflect.TypeLiteralTest#testTyped",
      "smells": {
        "Assertion Roulette": 2
      }
    }
  },
  "org.apache.commons.lang3.reflect.InheritanceUtilsTest": {
    "testDistanceGreaterThanZero": {
      "name": "testDistanceGreaterThanZero",
      "mvn_run": "org.apache.commons.lang3.reflect.InheritanceUtilsTest#testDistanceGreaterThanZero",
      "smells": {
        "Magic Number Test": 4,
        "Lazy Test": 1,
        "Assertion Roulette": 4
      }
    },
    "testDistanceEqual": {
      "name": "testDistanceEqual",
      "mvn_run": "org.apache.commons.lang3.reflect.InheritanceUtilsTest#testDistanceEqual",
      "smells": {
        "Magic Number Test": 1,
        "Lazy Test": 1,
        "Assertion Roulette": 1
      }
    },
    "testDistanceEqualObject": {
      "name": "testDistanceEqualObject",
      "mvn_run": "org.apache.commons.lang3.reflect.InheritanceUtilsTest#testDistanceEqualObject",
      "smells": {
        "Magic Number Test": 1,
        "Lazy Test": 1,
        "Assertion Roulette": 1
      }
    },
    "testDistanceNullChild": {
      "name": "testDistanceNullChild",
      "mvn_run": "org.apache.commons.lang3.reflect.InheritanceUtilsTest#testDistanceNullChild",
      "smells": {
        "Magic Number Test": 1,
        "Lazy Test": 1,
        "Assertion Roulette": 1
      }
    },
    "testDistanceNullParent": {
      "name": "testDistanceNullParent",
      "mvn_run": "org.apache.commons.lang3.reflect.InheritanceUtilsTest#testDistanceNullParent",
      "smells": {
        "Magic Number Test": 1,
        "Lazy Test": 1,
        "Assertion Roulette": 1
      }
    },
    "testDistanceNullParentNullChild": {
      "name": "testDistanceNullParentNullChild",
      "mvn_run": "org.apache.commons.lang3.reflect.InheritanceUtilsTest#testDistanceNullParentNullChild",
      "smells": {
        "Magic Number Test": 1,
        "Lazy Test": 1,
        "Assertion Roulette": 1
      }
    },
    "testDistanceDisjoint": {
      "name": "testDistanceDisjoint",
      "mvn_run": "org.apache.commons.lang3.reflect.InheritanceUtilsTest#testDistanceDisjoint",
      "smells": {
        "Magic Number Test": 1,
        "Lazy Test": 1,
        "Assertion Roulette": 1
      }
    },
    "testDistanceReverseParentChild": {
      "name": "testDistanceReverseParentChild",
      "mvn_run": "org.apache.commons.lang3.reflect.InheritanceUtilsTest#testDistanceReverseParentChild",
      "smells": {
        "Magic Number Test": 1,
        "Lazy Test": 1,
        "Assertion Roulette": 1
      }
    },
    "testConstructor": {
      "name": "testConstructor",
      "mvn_run": "org.apache.commons.lang3.reflect.InheritanceUtilsTest#testConstructor",
      "smells": {
        "Assertion Roulette": 1
      }
    }
  },
  "org.apache.commons.lang3.reflect.FieldUtilsTest": {
    "testConstructor": {
      "name": "testConstructor",
      "mvn_run": "org.apache.commons.lang3.reflect.FieldUtilsTest#testConstructor",
      "smells": {
        "Magic Number Test": 1,
        "Assertion Roulette": 5
      }
    },
    "testGetAllFieldsList": {
      "name": "testGetAllFieldsList",
      "mvn_run": "org.apache.commons.lang3.reflect.FieldUtilsTest#testGetAllFieldsList",
      "smells": {
        "Magic Number Test": 1,
        "Sensitive Equality": 1,
        "Eager Test": 1,
        "Assertion Roulette": 4,
        "Conditional Test Logic": 2
      }
    },
    "testGetFieldsListWithAnnotation": {
      "name": "testGetFieldsListWithAnnotation",
      "mvn_run": "org.apache.commons.lang3.reflect.FieldUtilsTest#testGetFieldsListWithAnnotation",
      "smells": {
        "Magic Number Test": 1,
        "Lazy Test": 1,
        "Eager Test": 1,
        "Assertion Roulette": 4
      }
    },
    "testWriteNamedField": {
      "name": "testWriteNamedField",
      "mvn_run": "org.apache.commons.lang3.reflect.FieldUtilsTest#testWriteNamedField",
      "smells": {
        "Magic Number Test": 2,
        "Lazy Test": 2,
        "Eager Test": 1,
        "Assertion Roulette": 6
      }
    },
    "testWriteNamedFieldForceAccess": {
      "name": "testWriteNamedFieldForceAccess",
      "mvn_run": "org.apache.commons.lang3.reflect.FieldUtilsTest#testWriteNamedFieldForceAccess",
      "smells": {
        "Magic Number Test": 6,
        "Lazy Test": 2,
        "Eager Test": 1,
        "Assertion Roulette": 12
      }
    },
    "testWriteDeclaredNamedField": {
      "name": "testWriteDeclaredNamedField",
      "mvn_run": "org.apache.commons.lang3.reflect.FieldUtilsTest#testWriteDeclaredNamedField",
      "smells": {
        "Magic Number Test": 2,
        "Verbose Test": 1,
        "Lazy Test": 2,
        "Eager Test": 1,
        "Assertion Roulette": 4
      }
    },
    "testWriteDeclaredNamedFieldForceAccess": {
      "name": "testWriteDeclaredNamedFieldForceAccess",
      "mvn_run": "org.apache.commons.lang3.reflect.FieldUtilsTest#testWriteDeclaredNamedFieldForceAccess",
      "smells": {
        "Magic Number Test": 4,
        "Lazy Test": 2,
        "Eager Test": 1,
        "Assertion Roulette": 8
      }
    },
    "testGetAllFields": {
      "name": "testGetAllFields",
      "mvn_run": "org.apache.commons.lang3.reflect.FieldUtilsTest#testGetAllFields",
      "smells": {
        "Sensitive Equality": 1,
        "Assertion Roulette": 4,
        "Conditional Test Logic": 2
      }
    },
    "testReadNamedStaticField": {
      "name": "testReadNamedStaticField",
      "mvn_run": "org.apache.commons.lang3.reflect.FieldUtilsTest#testReadNamedStaticField",
      "smells": {
        "Verbose Test": 1,
        "Lazy Test": 1,
        "Assertion Roulette": 4
      }
    },
    "testReadNamedStaticFieldForceAccess": {
      "name": "testReadNamedStaticFieldForceAccess",
      "mvn_run": "org.apache.commons.lang3.reflect.FieldUtilsTest#testReadNamedStaticFieldForceAccess",
      "smells": {
        "Verbose Test": 1,
        "Lazy Test": 1,
        "Assertion Roulette": 4
      }
    },
    "testReadNamedField": {
      "name": "testReadNamedField",
      "mvn_run": "org.apache.commons.lang3.reflect.FieldUtilsTest#testReadNamedField",
      "smells": {
        "Verbose Test": 1,
        "Lazy Test": 1,
        "Assertion Roulette": 6
      }
    },
    "testReadNamedFieldForceAccess": {
      "name": "testReadNamedFieldForceAccess",
      "mvn_run": "org.apache.commons.lang3.reflect.FieldUtilsTest#testReadNamedFieldForceAccess",
      "smells": {
        "Verbose Test": 1,
        "Lazy Test": 1,
        "Assertion Roulette": 12
      }
    },
    "testReadDeclaredNamedField": {
      "name": "testReadDeclaredNamedField",
      "mvn_run": "org.apache.commons.lang3.reflect.FieldUtilsTest#testReadDeclaredNamedField",
      "smells": {
        "Verbose Test": 1,
        "Lazy Test": 1,
        "Assertion Roulette": 4
      }
    },
    "testReadDeclaredNamedFieldForceAccess": {
      "name": "testReadDeclaredNamedFieldForceAccess",
      "mvn_run": "org.apache.commons.lang3.reflect.FieldUtilsTest#testReadDeclaredNamedFieldForceAccess",
      "smells": {
        "Verbose Test": 1,
        "Lazy Test": 1,
        "Assertion Roulette": 8
      }
    },
    "testGetFieldsListWithAnnotationIllegalArgumentException3": {
      "name": "testGetFieldsListWithAnnotationIllegalArgumentException3",
      "mvn_run": "org.apache.commons.lang3.reflect.FieldUtilsTest#testGetFieldsListWithAnnotationIllegalArgumentException3",
      "smells": {
        "Lazy Test": 1
      }
    },
    "testGetFieldsListWithAnnotationIllegalArgumentException2": {
      "name": "testGetFieldsListWithAnnotationIllegalArgumentException2",
      "mvn_run": "org.apache.commons.lang3.reflect.FieldUtilsTest#testGetFieldsListWithAnnotationIllegalArgumentException2",
      "smells": {
        "Lazy Test": 1
      }
    },
    "testGetFieldsListWithAnnotationIllegalArgumentException1": {
      "name": "testGetFieldsListWithAnnotationIllegalArgumentException1",
      "mvn_run": "org.apache.commons.lang3.reflect.FieldUtilsTest#testGetFieldsListWithAnnotationIllegalArgumentException1",
      "smells": {
        "Lazy Test": 1
      }
    },
    "testReadFieldForceAccess": {
      "name": "testReadFieldForceAccess",
      "mvn_run": "org.apache.commons.lang3.reflect.FieldUtilsTest#testReadFieldForceAccess",
      "smells": {
        "Lazy Test": 2,
        "Eager Test": 1,
        "Assertion Roulette": 12
      }
    },
    "testReadField": {
      "name": "testReadField",
      "mvn_run": "org.apache.commons.lang3.reflect.FieldUtilsTest#testReadField",
      "smells": {
        "Lazy Test": 2,
        "Eager Test": 1,
        "Assertion Roulette": 12
      }
    },
    "testGetDeclaredFieldForceAccessIllegalArgumentException4": {
      "name": "testGetDeclaredFieldForceAccessIllegalArgumentException4",
      "mvn_run": "org.apache.commons.lang3.reflect.FieldUtilsTest#testGetDeclaredFieldForceAccessIllegalArgumentException4",
      "smells": {
        "Lazy Test": 1
      }
    },
    "testGetDeclaredFieldForceAccessIllegalArgumentException3": {
      "name": "testGetDeclaredFieldForceAccessIllegalArgumentException3",
      "mvn_run": "org.apache.commons.lang3.reflect.FieldUtilsTest#testGetDeclaredFieldForceAccessIllegalArgumentException3",
      "smells": {
        "Lazy Test": 1
      }
    },
    "testGetDeclaredFieldForceAccessIllegalArgumentException2": {
      "name": "testGetDeclaredFieldForceAccessIllegalArgumentException2",
      "mvn_run": "org.apache.commons.lang3.reflect.FieldUtilsTest#testGetDeclaredFieldForceAccessIllegalArgumentException2",
      "smells": {
        "Lazy Test": 1
      }
    },
    "testGetDeclaredFieldForceAccessIllegalArgumentException1": {
      "name": "testGetDeclaredFieldForceAccessIllegalArgumentException1",
      "mvn_run": "org.apache.commons.lang3.reflect.FieldUtilsTest#testGetDeclaredFieldForceAccessIllegalArgumentException1",
      "smells": {
        "Lazy Test": 1
      }
    },
    "testGetDeclaredFieldForceAccess": {
      "name": "testGetDeclaredFieldForceAccess",
      "mvn_run": "org.apache.commons.lang3.reflect.FieldUtilsTest#testGetDeclaredFieldForceAccess",
      "smells": {
        "Lazy Test": 1,
        "Eager Test": 1,
        "Assertion Roulette": 15
      }
    },
    "testGetDeclaredFieldAccessIllegalArgumentException4": {
      "name": "testGetDeclaredFieldAccessIllegalArgumentException4",
      "mvn_run": "org.apache.commons.lang3.reflect.FieldUtilsTest#testGetDeclaredFieldAccessIllegalArgumentException4",
      "smells": {
        "Lazy Test": 1
      }
    },
    "testGetDeclaredFieldAccessIllegalArgumentException3": {
      "name": "testGetDeclaredFieldAccessIllegalArgumentException3",
      "mvn_run": "org.apache.commons.lang3.reflect.FieldUtilsTest#testGetDeclaredFieldAccessIllegalArgumentException3",
      "smells": {
        "Lazy Test": 1
      }
    },
    "testGetDeclaredFieldAccessIllegalArgumentException2": {
      "name": "testGetDeclaredFieldAccessIllegalArgumentException2",
      "mvn_run": "org.apache.commons.lang3.reflect.FieldUtilsTest#testGetDeclaredFieldAccessIllegalArgumentException2",
      "smells": {
        "Lazy Test": 1
      }
    },
    "testGetDeclaredFieldAccessIllegalArgumentException1": {
      "name": "testGetDeclaredFieldAccessIllegalArgumentException1",
      "mvn_run": "org.apache.commons.lang3.reflect.FieldUtilsTest#testGetDeclaredFieldAccessIllegalArgumentException1",
      "smells": {
        "Lazy Test": 1
      }
    },
    "testGetDeclaredField": {
      "name": "testGetDeclaredField",
      "mvn_run": "org.apache.commons.lang3.reflect.FieldUtilsTest#testGetDeclaredField",
      "smells": {
        "Lazy Test": 1,
        "Eager Test": 1,
        "Assertion Roulette": 15
      }
    },
    "testReadDeclaredNamedStaticFieldForceAccess": {
      "name": "testReadDeclaredNamedStaticFieldForceAccess",
      "mvn_run": "org.apache.commons.lang3.reflect.FieldUtilsTest#testReadDeclaredNamedStaticFieldForceAccess",
      "smells": {
        "Lazy Test": 1,
        "Assertion Roulette": 2
      }
    },
    "testReadDeclaredNamedStaticField": {
      "name": "testReadDeclaredNamedStaticField",
      "mvn_run": "org.apache.commons.lang3.reflect.FieldUtilsTest#testReadDeclaredNamedStaticField",
      "smells": {
        "Lazy Test": 1,
        "Assertion Roulette": 1
      }
    },
    "testAmbig": {
      "name": "testAmbig",
      "mvn_run": "org.apache.commons.lang3.reflect.FieldUtilsTest#testAmbig",
      "smells": {
        "Lazy Test": 1
      }
    },
    "testReadStaticFieldForceAccessIllegalArgumentException2": {
      "name": "testReadStaticFieldForceAccessIllegalArgumentException2",
      "mvn_run": "org.apache.commons.lang3.reflect.FieldUtilsTest#testReadStaticFieldForceAccessIllegalArgumentException2",
      "smells": {
        "Lazy Test": 2,
        "Eager Test": 1
      }
    },
    "testReadStaticFieldForceAccess": {
      "name": "testReadStaticFieldForceAccess",
      "mvn_run": "org.apache.commons.lang3.reflect.FieldUtilsTest#testReadStaticFieldForceAccess",
      "smells": {
        "Lazy Test": 2,
        "Eager Test": 1,
        "Assertion Roulette": 2
      }
    },
    "testReadStaticFieldIllegalArgumentException2": {
      "name": "testReadStaticFieldIllegalArgumentException2",
      "mvn_run": "org.apache.commons.lang3.reflect.FieldUtilsTest#testReadStaticFieldIllegalArgumentException2",
      "smells": {
        "Lazy Test": 2,
        "Eager Test": 1,
        "Assertion Roulette": 1
      }
    },
    "testReadStaticField": {
      "name": "testReadStaticField",
      "mvn_run": "org.apache.commons.lang3.reflect.FieldUtilsTest#testReadStaticField",
      "smells": {
        "Lazy Test": 2,
        "Eager Test": 1,
        "Assertion Roulette": 1
      }
    },
    "testGetFieldForceAccessIllegalArgumentException4": {
      "name": "testGetFieldForceAccessIllegalArgumentException4",
      "mvn_run": "org.apache.commons.lang3.reflect.FieldUtilsTest#testGetFieldForceAccessIllegalArgumentException4",
      "smells": {
        "Lazy Test": 1
      }
    },
    "testGetFieldForceAccessIllegalArgumentException3": {
      "name": "testGetFieldForceAccessIllegalArgumentException3",
      "mvn_run": "org.apache.commons.lang3.reflect.FieldUtilsTest#testGetFieldForceAccessIllegalArgumentException3",
      "smells": {
        "Lazy Test": 1
      }
    },
    "testGetFieldForceAccessIllegalArgumentException2": {
      "name": "testGetFieldForceAccessIllegalArgumentException2",
      "mvn_run": "org.apache.commons.lang3.reflect.FieldUtilsTest#testGetFieldForceAccessIllegalArgumentException2",
      "smells": {
        "Lazy Test": 1
      }
    },
    "testGetFieldForceAccessIllegalArgumentException1": {
      "name": "testGetFieldForceAccessIllegalArgumentException1",
      "mvn_run": "org.apache.commons.lang3.reflect.FieldUtilsTest#testGetFieldForceAccessIllegalArgumentException1",
      "smells": {
        "Lazy Test": 1
      }
    },
    "testGetFieldForceAccess": {
      "name": "testGetFieldForceAccess",
      "mvn_run": "org.apache.commons.lang3.reflect.FieldUtilsTest#testGetFieldForceAccess",
      "smells": {
        "Lazy Test": 1,
        "Eager Test": 1,
        "Assertion Roulette": 15
      }
    },
    "testGetFieldIllegalArgumentException4": {
      "name": "testGetFieldIllegalArgumentException4",
      "mvn_run": "org.apache.commons.lang3.reflect.FieldUtilsTest#testGetFieldIllegalArgumentException4",
      "smells": {
        "Lazy Test": 1
      }
    },
    "testGetFieldIllegalArgumentException3": {
      "name": "testGetFieldIllegalArgumentException3",
      "mvn_run": "org.apache.commons.lang3.reflect.FieldUtilsTest#testGetFieldIllegalArgumentException3",
      "smells": {
        "Lazy Test": 1
      }
    },
    "testGetFieldIllegalArgumentException2": {
      "name": "testGetFieldIllegalArgumentException2",
      "mvn_run": "org.apache.commons.lang3.reflect.FieldUtilsTest#testGetFieldIllegalArgumentException2",
      "smells": {
        "Lazy Test": 1
      }
    },
    "testGetFieldIllegalArgumentException1": {
      "name": "testGetFieldIllegalArgumentException1",
      "mvn_run": "org.apache.commons.lang3.reflect.FieldUtilsTest#testGetFieldIllegalArgumentException1",
      "smells": {
        "Lazy Test": 1
      }
    },
    "testGetField": {
      "name": "testGetField",
      "mvn_run": "org.apache.commons.lang3.reflect.FieldUtilsTest#testGetField",
      "smells": {
        "Lazy Test": 1,
        "Eager Test": 1,
        "Assertion Roulette": 15
      }
    },
    "testWriteFieldForceAccess": {
      "name": "testWriteFieldForceAccess",
      "mvn_run": "org.apache.commons.lang3.reflect.FieldUtilsTest#testWriteFieldForceAccess",
      "smells": {
        "Lazy Test": 1,
        "Assertion Roulette": 4
      }
    },
    "testWriteField": {
      "name": "testWriteField",
      "mvn_run": "org.apache.commons.lang3.reflect.FieldUtilsTest#testWriteField",
      "smells": {
        "Lazy Test": 1,
        "Assertion Roulette": 1
      }
    },
    "testWriteDeclaredNamedStaticField": {
      "name": "testWriteDeclaredNamedStaticField",
      "mvn_run": "org.apache.commons.lang3.reflect.FieldUtilsTest#testWriteDeclaredNamedStaticField",
      "smells": {
        "Lazy Test": 2,
        "Eager Test": 1,
        "Assertion Roulette": 1
      }
    },
    "testWriteNamedStaticFieldForceAccess": {
      "name": "testWriteNamedStaticFieldForceAccess",
      "mvn_run": "org.apache.commons.lang3.reflect.FieldUtilsTest#testWriteNamedStaticFieldForceAccess",
      "smells": {
        "Lazy Test": 1,
        "Assertion Roulette": 4
      }
    },
    "testWriteNamedStaticField": {
      "name": "testWriteNamedStaticField",
      "mvn_run": "org.apache.commons.lang3.reflect.FieldUtilsTest#testWriteNamedStaticField",
      "smells": {
        "Lazy Test": 1,
        "Assertion Roulette": 1
      }
    },
    "testWriteStaticFieldForceAccess": {
      "name": "testWriteStaticFieldForceAccess",
      "mvn_run": "org.apache.commons.lang3.reflect.FieldUtilsTest#testWriteStaticFieldForceAccess",
      "smells": {
        "Lazy Test": 1,
        "Assertion Roulette": 4
      }
    },
    "testWriteStaticField": {
      "name": "testWriteStaticField",
      "mvn_run": "org.apache.commons.lang3.reflect.FieldUtilsTest#testWriteStaticField",
      "smells": {
        "Lazy Test": 1,
        "Assertion Roulette": 1
      }
    },
    "testWriteDeclaredNamedStaticFieldForceAccess": {
      "name": "testWriteDeclaredNamedStaticFieldForceAccess",
      "mvn_run": "org.apache.commons.lang3.reflect.FieldUtilsTest#testWriteDeclaredNamedStaticFieldForceAccess",
      "smells": {
        "Lazy Test": 1,
        "Assertion Roulette": 4
      }
    },
    "testGetFieldsWithAnnotationIllegalArgumentException3": {
      "name": "testGetFieldsWithAnnotationIllegalArgumentException3",
      "mvn_run": "org.apache.commons.lang3.reflect.FieldUtilsTest#testGetFieldsWithAnnotationIllegalArgumentException3",
      "smells": {
        "Lazy Test": 1
      }
    },
    "testGetFieldsWithAnnotationIllegalArgumentException2": {
      "name": "testGetFieldsWithAnnotationIllegalArgumentException2",
      "mvn_run": "org.apache.commons.lang3.reflect.FieldUtilsTest#testGetFieldsWithAnnotationIllegalArgumentException2",
      "smells": {
        "Lazy Test": 1
      }
    },
    "testGetFieldsWithAnnotationIllegalArgumentException1": {
      "name": "testGetFieldsWithAnnotationIllegalArgumentException1",
      "mvn_run": "org.apache.commons.lang3.reflect.FieldUtilsTest#testGetFieldsWithAnnotationIllegalArgumentException1",
      "smells": {
        "Lazy Test": 1
      }
    },
    "testGetFieldsWithAnnotation": {
      "name": "testGetFieldsWithAnnotation",
      "mvn_run": "org.apache.commons.lang3.reflect.FieldUtilsTest#testGetFieldsWithAnnotation",
      "smells": {
        "Lazy Test": 1,
        "Assertion Roulette": 2
      }
    },
    "testReadStaticFieldForceAccessIllegalArgumentException1": {
      "name": "testReadStaticFieldForceAccessIllegalArgumentException1",
      "mvn_run": "org.apache.commons.lang3.reflect.FieldUtilsTest#testReadStaticFieldForceAccessIllegalArgumentException1",
      "smells": {
        "Lazy Test": 1
      }
    },
    "testReadStaticFieldIllegalArgumentException1": {
      "name": "testReadStaticFieldIllegalArgumentException1",
      "mvn_run": "org.apache.commons.lang3.reflect.FieldUtilsTest#testReadStaticFieldIllegalArgumentException1",
      "smells": {
        "Lazy Test": 1
      }
    },
    "testRemoveFinalModifier": {
      "name": "testRemoveFinalModifier",
      "mvn_run": "org.apache.commons.lang3.reflect.FieldUtilsTest#testRemoveFinalModifier",
      "smells": {
        "Duplicate Assert": 1,
        "Assertion Roulette": 4,
        "Conditional Test Logic": 1
      }
    },
    "testRemoveFinalModifierWithAccess": {
      "name": "testRemoveFinalModifierWithAccess",
      "mvn_run": "org.apache.commons.lang3.reflect.FieldUtilsTest#testRemoveFinalModifierWithAccess",
      "smells": {
        "Duplicate Assert": 1,
        "Assertion Roulette": 4,
        "Conditional Test Logic": 1
      }
    },
    "testRemoveFinalModifierWithoutAccess": {
      "name": "testRemoveFinalModifierWithoutAccess",
      "mvn_run": "org.apache.commons.lang3.reflect.FieldUtilsTest#testRemoveFinalModifierWithoutAccess",
      "smells": {
        "Duplicate Assert": 2,
        "Assertion Roulette": 4,
        "Conditional Test Logic": 1
      }
    },
    "testRemoveFinalModifierAccessNotNeeded": {
      "name": "testRemoveFinalModifierAccessNotNeeded",
      "mvn_run": "org.apache.commons.lang3.reflect.FieldUtilsTest#testRemoveFinalModifierAccessNotNeeded",
      "smells": {
        "Duplicate Assert": 2,
        "Assertion Roulette": 4,
        "Conditional Test Logic": 1
      }
    },
    "setUp": {
      "name": "setUp",
      "mvn_run": "org.apache.commons.lang3.reflect.FieldUtilsTest#setUp",
      "smells": {
        "General Fixture": 3
      }
    }
  },
  "org.apache.commons.lang3.CharRangeTest": {
    "testEquals_Object": {
      "name": "testEquals_Object",
      "mvn_run": "org.apache.commons.lang3.CharRangeTest#testEquals_Object",
      "smells": {
        "Redundant Assertion": 3,
        "Lazy Test": 2,
        "Eager Test": 1,
        "Assertion Roulette": 13
      }
    },
    "testHashCode": {
      "name": "testHashCode",
      "mvn_run": "org.apache.commons.lang3.CharRangeTest#testHashCode",
      "smells": {
        "Redundant Assertion": 3,
        "Lazy Test": 2,
        "Eager Test": 1,
        "Assertion Roulette": 12
      }
    },
    "testConstructorAccessors_is": {
      "name": "testConstructorAccessors_is",
      "mvn_run": "org.apache.commons.lang3.CharRangeTest#testConstructorAccessors_is",
      "smells": {
        "Sensitive Equality": 1,
        "Lazy Test": 5,
        "Eager Test": 1,
        "Assertion Roulette": 4
      }
    },
    "testConstructorAccessors_isNot": {
      "name": "testConstructorAccessors_isNot",
      "mvn_run": "org.apache.commons.lang3.CharRangeTest#testConstructorAccessors_isNot",
      "smells": {
        "Sensitive Equality": 1,
        "Lazy Test": 5,
        "Eager Test": 1,
        "Assertion Roulette": 4
      }
    },
    "testConstructorAccessors_isIn_Same": {
      "name": "testConstructorAccessors_isIn_Same",
      "mvn_run": "org.apache.commons.lang3.CharRangeTest#testConstructorAccessors_isIn_Same",
      "smells": {
        "Sensitive Equality": 1,
        "Lazy Test": 5,
        "Eager Test": 1,
        "Assertion Roulette": 4
      }
    },
    "testConstructorAccessors_isIn_Normal": {
      "name": "testConstructorAccessors_isIn_Normal",
      "mvn_run": "org.apache.commons.lang3.CharRangeTest#testConstructorAccessors_isIn_Normal",
      "smells": {
        "Sensitive Equality": 1,
        "Lazy Test": 5,
        "Eager Test": 1,
        "Assertion Roulette": 4
      }
    },
    "testConstructorAccessors_isIn_Reversed": {
      "name": "testConstructorAccessors_isIn_Reversed",
      "mvn_run": "org.apache.commons.lang3.CharRangeTest#testConstructorAccessors_isIn_Reversed",
      "smells": {
        "Sensitive Equality": 1,
        "Lazy Test": 5,
        "Eager Test": 1,
        "Assertion Roulette": 4
      }
    },
    "testConstructorAccessors_isNotIn_Same": {
      "name": "testConstructorAccessors_isNotIn_Same",
      "mvn_run": "org.apache.commons.lang3.CharRangeTest#testConstructorAccessors_isNotIn_Same",
      "smells": {
        "Sensitive Equality": 1,
        "Lazy Test": 5,
        "Eager Test": 1,
        "Assertion Roulette": 4
      }
    },
    "testConstructorAccessors_isNotIn_Normal": {
      "name": "testConstructorAccessors_isNotIn_Normal",
      "mvn_run": "org.apache.commons.lang3.CharRangeTest#testConstructorAccessors_isNotIn_Normal",
      "smells": {
        "Sensitive Equality": 1,
        "Lazy Test": 5,
        "Eager Test": 1,
        "Assertion Roulette": 4
      }
    },
    "testConstructorAccessors_isNotIn_Reversed": {
      "name": "testConstructorAccessors_isNotIn_Reversed",
      "mvn_run": "org.apache.commons.lang3.CharRangeTest#testConstructorAccessors_isNotIn_Reversed",
      "smells": {
        "Sensitive Equality": 1,
        "Lazy Test": 5,
        "Eager Test": 1,
        "Assertion Roulette": 4
      }
    },
    "testContains_Charrange": {
      "name": "testContains_Charrange",
      "mvn_run": "org.apache.commons.lang3.CharRangeTest#testContains_Charrange",
      "smells": {
        "Verbose Test": 1,
        "Lazy Test": 5,
        "Eager Test": 1,
        "Assertion Roulette": 69
      }
    },
    "testIterator": {
      "name": "testIterator",
      "mvn_run": "org.apache.commons.lang3.CharRangeTest#testIterator",
      "smells": {
        "Verbose Test": 1,
        "Lazy Test": 5,
        "Eager Test": 1,
        "Assertion Roulette": 24,
        "Conditional Test Logic": 1
      }
    },
    "testSerialization": {
      "name": "testSerialization",
      "mvn_run": "org.apache.commons.lang3.CharRangeTest#testSerialization",
      "smells": {
        "Lazy Test": 3,
        "Duplicate Assert": 1,
        "Eager Test": 1,
        "Assertion Roulette": 3
      }
    },
    "testContains_Char": {
      "name": "testContains_Char",
      "mvn_run": "org.apache.commons.lang3.CharRangeTest#testContains_Char",
      "smells": {
        "Lazy Test": 4,
        "Duplicate Assert": 5,
        "Eager Test": 1,
        "Assertion Roulette": 18
      }
    },
    "testIteratorRemove": {
      "name": "testIteratorRemove",
      "mvn_run": "org.apache.commons.lang3.CharRangeTest#testIteratorRemove",
      "smells": {
        "Lazy Test": 2,
        "Eager Test": 1
      }
    },
    "testContainsNullArg": {
      "name": "testContainsNullArg",
      "mvn_run": "org.apache.commons.lang3.CharRangeTest#testContainsNullArg",
      "smells": {
        "Lazy Test": 2,
        "Eager Test": 1,
        "Assertion Roulette": 1
      }
    },
    "testClass": {
      "name": "testClass",
      "mvn_run": "org.apache.commons.lang3.CharRangeTest#testClass",
      "smells": {
        "Assertion Roulette": 2
      }
    }
  },
  "org.apache.commons.lang3.RegExUtilsTest": {
    "testRemoveAll_StringString": {
      "name": "testRemoveAll_StringString",
      "mvn_run": "org.apache.commons.lang3.RegExUtilsTest#testRemoveAll_StringString",
      "smells": {
        "Lazy Test": 1,
        "Assertion Roulette": 9
      }
    },
    "testRemoveAll_StringPattern": {
      "name": "testRemoveAll_StringPattern",
      "mvn_run": "org.apache.commons.lang3.RegExUtilsTest#testRemoveAll_StringPattern",
      "smells": {
        "Lazy Test": 1,
        "Assertion Roulette": 13
      }
    },
    "testRemoveFirst_StringString": {
      "name": "testRemoveFirst_StringString",
      "mvn_run": "org.apache.commons.lang3.RegExUtilsTest#testRemoveFirst_StringString",
      "smells": {
        "Lazy Test": 1,
        "Assertion Roulette": 10
      }
    },
    "testRemoveFirst_StringPattern": {
      "name": "testRemoveFirst_StringPattern",
      "mvn_run": "org.apache.commons.lang3.RegExUtilsTest#testRemoveFirst_StringPattern",
      "smells": {
        "Lazy Test": 1,
        "Assertion Roulette": 10
      }
    },
    "testReplaceFirst_StringStringString": {
      "name": "testReplaceFirst_StringStringString",
      "mvn_run": "org.apache.commons.lang3.RegExUtilsTest#testReplaceFirst_StringStringString",
      "smells": {
        "Lazy Test": 1,
        "Assertion Roulette": 13
      }
    },
    "testReplaceFirst_StringPatternString": {
      "name": "testReplaceFirst_StringPatternString",
      "mvn_run": "org.apache.commons.lang3.RegExUtilsTest#testReplaceFirst_StringPatternString",
      "smells": {
        "Lazy Test": 1,
        "Assertion Roulette": 13
      }
    },
    "testReplaceAll_StringStringString": {
      "name": "testReplaceAll_StringStringString",
      "mvn_run": "org.apache.commons.lang3.RegExUtilsTest#testReplaceAll_StringStringString",
      "smells": {
        "Lazy Test": 1,
        "Assertion Roulette": 13
      }
    },
    "testReplaceAll_StringPatternString": {
      "name": "testReplaceAll_StringPatternString",
      "mvn_run": "org.apache.commons.lang3.RegExUtilsTest#testReplaceAll_StringPatternString",
      "smells": {
        "Lazy Test": 1,
        "Assertion Roulette": 16
      }
    },
    "testRemovePattern_StringString": {
      "name": "testRemovePattern_StringString",
      "mvn_run": "org.apache.commons.lang3.RegExUtilsTest#testRemovePattern_StringString",
      "smells": {
        "Assertion Roulette": 10
      }
    },
    "testReplacePattern_StringStringString": {
      "name": "testReplacePattern_StringStringString",
      "mvn_run": "org.apache.commons.lang3.RegExUtilsTest#testReplacePattern_StringStringString",
      "smells": {
        "Assertion Roulette": 13
      }
    }
  },
  "org.apache.commons.lang3.function.TriFunctionTest": {
    "testAccept": {
      "name": "testAccept",
      "mvn_run": "org.apache.commons.lang3.function.TriFunctionTest#testAccept",
      "smells": {
        "Assertion Roulette": 4
      }
    },
    "testAndThen": {
      "name": "testAndThen",
      "mvn_run": "org.apache.commons.lang3.function.TriFunctionTest#testAndThen",
      "smells": {
        "Assertion Roulette": 4
      }
    }
  },
  "org.apache.commons.lang3.function.TriConsumerTest": {
    "testAccept": {
      "name": "testAccept",
      "mvn_run": "org.apache.commons.lang3.function.TriConsumerTest#testAccept",
      "smells": {
        "Assertion Roulette": 3
      }
    },
    "testAndThen": {
      "name": "testAndThen",
      "mvn_run": "org.apache.commons.lang3.function.TriConsumerTest#testAndThen",
      "smells": {
        "Assertion Roulette": 3
      }
    }
  },
  "org.apache.commons.lang3.function.IntToCharFunctionTest": {
    "test": {
      "name": "test",
      "mvn_run": "org.apache.commons.lang3.function.IntToCharFunctionTest#test",
      "smells": {
        "Magic Number Test": 1,
        "Assertion Roulette": 1
      }
    }
  },
  "org.apache.commons.lang3.function.BooleanConsumerTest": {
    "testAndThen": {
      "name": "testAndThen",
      "mvn_run": "org.apache.commons.lang3.function.BooleanConsumerTest#testAndThen",
      "smells": {
        "Eager Test": 1,
        "Assertion Roulette": 4
      }
    },
    "testAccept": {
      "name": "testAccept",
      "mvn_run": "org.apache.commons.lang3.function.BooleanConsumerTest#testAccept",
      "smells": {
        "Assertion Roulette": 2
      }
    }
  },
  "org.apache.commons.lang3.function.ToBooleanBiFunctionTest": {
    "test": {
      "name": "test",
      "mvn_run": "org.apache.commons.lang3.function.ToBooleanBiFunctionTest#test",
      "smells": {
        "Magic Number Test": 1,
        "Assertion Roulette": 1
      }
    }
  },
  "org.apache.commons.lang3.function.ConsumersTest": {
    "testNop": {
      "name": "testNop",
      "mvn_run": "org.apache.commons.lang3.function.ConsumersTest#testNop",
      "smells": {
        "Unknown Test": 1,
        "Eager Test": 1
      }
    }
  },
  "org.apache.commons.lang3.function.SuppliersTest": {
    "testGet": {
      "name": "testGet",
      "mvn_run": "org.apache.commons.lang3.function.SuppliersTest#testGet",
      "smells": {
        "Assertion Roulette": 3
      }
    }
  },
  "org.apache.commons.lang3.BitFieldTest": {
    "testGetValue": {
      "name": "testGetValue",
      "mvn_run": "org.apache.commons.lang3.BitFieldTest#testGetValue",
      "smells": {
        "Magic Number Test": 6,
        "Lazy Test": 1,
        "Assertion Roulette": 6
      }
    },
    "testGetRawValue": {
      "name": "testGetRawValue",
      "mvn_run": "org.apache.commons.lang3.BitFieldTest#testGetRawValue",
      "smells": {
        "Magic Number Test": 6,
        "Assertion Roulette": 6
      }
    },
    "testIsSet": {
      "name": "testIsSet",
      "mvn_run": "org.apache.commons.lang3.BitFieldTest#testIsSet",
      "smells": {
        "Magic Number Test": 3,
        "Lazy Test": 1,
        "Assertion Roulette": 6,
        "Conditional Test Logic": 2
      }
    },
    "testIsAllSet": {
      "name": "testIsAllSet",
      "mvn_run": "org.apache.commons.lang3.BitFieldTest#testIsAllSet",
      "smells": {
        "Magic Number Test": 1,
        "Assertion Roulette": 5,
        "Conditional Test Logic": 1
      }
    },
    "testSetValue": {
      "name": "testSetValue",
      "mvn_run": "org.apache.commons.lang3.BitFieldTest#testSetValue",
      "smells": {
        "Magic Number Test": 6,
        "Lazy Test": 1,
        "Eager Test": 1,
        "Assertion Roulette": 8,
        "Conditional Test Logic": 3
      }
    },
    "testByte": {
      "name": "testByte",
      "mvn_run": "org.apache.commons.lang3.BitFieldTest#testByte",
      "smells": {
        "Magic Number Test": 19,
        "Lazy Test": 1,
        "Eager Test": 1,
        "Assertion Roulette": 20
      }
    },
    "testClear": {
      "name": "testClear",
      "mvn_run": "org.apache.commons.lang3.BitFieldTest#testClear",
      "smells": {
        "Magic Number Test": 3,
        "Lazy Test": 1,
        "Assertion Roulette": 3
      }
    },
    "testSet": {
      "name": "testSet",
      "mvn_run": "org.apache.commons.lang3.BitFieldTest#testSet",
      "smells": {
        "Magic Number Test": 3,
        "Lazy Test": 1,
        "Assertion Roulette": 3
      }
    },
    "testSetBoolean": {
      "name": "testSetBoolean",
      "mvn_run": "org.apache.commons.lang3.BitFieldTest#testSetBoolean",
      "smells": {
        "Magic Number Test": 6,
        "Lazy Test": 2,
        "Eager Test": 1,
        "Assertion Roulette": 6
      }
    },
    "testSetShortBoolean": {
      "name": "testSetShortBoolean",
      "mvn_run": "org.apache.commons.lang3.BitFieldTest#testSetShortBoolean",
      "smells": {
        "Lazy Test": 2,
        "Eager Test": 1,
        "Assertion Roulette": 6
      }
    },
    "testSetShort": {
      "name": "testSetShort",
      "mvn_run": "org.apache.commons.lang3.BitFieldTest#testSetShort",
      "smells": {
        "Lazy Test": 1,
        "Assertion Roulette": 3
      }
    },
    "testClearShort": {
      "name": "testClearShort",
      "mvn_run": "org.apache.commons.lang3.BitFieldTest#testClearShort",
      "smells": {
        "Lazy Test": 1,
        "Assertion Roulette": 3
      }
    },
    "testSetShortValue": {
      "name": "testSetShortValue",
      "mvn_run": "org.apache.commons.lang3.BitFieldTest#testSetShortValue",
      "smells": {
        "Lazy Test": 1,
        "Eager Test": 1,
        "Assertion Roulette": 8,
        "Conditional Test Logic": 3
      }
    },
    "testGetShortValue": {
      "name": "testGetShortValue",
      "mvn_run": "org.apache.commons.lang3.BitFieldTest#testGetShortValue",
      "smells": {
        "Lazy Test": 1,
        "Assertion Roulette": 6
      }
    },
    "testGetShortRawValue": {
      "name": "testGetShortRawValue",
      "mvn_run": "org.apache.commons.lang3.BitFieldTest#testGetShortRawValue",
      "smells": {
        "Assertion Roulette": 6
      }
    }
  },
  "org.apache.commons.lang3.math.FractionTest": {
    "testAbs": {
      "name": "testAbs",
      "mvn_run": "org.apache.commons.lang3.math.FractionTest#testAbs",
      "smells": {
        "Magic Number Test": 6,
        "Lazy Test": 3,
        "Duplicate Assert": 4,
        "Eager Test": 1,
        "Assertion Roulette": 8
      }
    },
    "testAdd": {
      "name": "testAdd",
      "mvn_run": "org.apache.commons.lang3.math.FractionTest#testAdd",
      "smells": {
        "Magic Number Test": 20,
        "Verbose Test": 1,
        "Lazy Test": 3,
        "Duplicate Assert": 4,
        "Eager Test": 1,
        "Assertion Roulette": 24
      }
    },
    "testCompareTo": {
      "name": "testCompareTo",
      "mvn_run": "org.apache.commons.lang3.math.FractionTest#testCompareTo",
      "smells": {
        "Magic Number Test": 11,
        "Verbose Test": 1,
        "Lazy Test": 2,
        "Duplicate Assert": 3,
        "Eager Test": 1,
        "Assertion Roulette": 11
      }
    },
    "testConstants": {
      "name": "testConstants",
      "mvn_run": "org.apache.commons.lang3.math.FractionTest#testConstants",
      "smells": {
        "Magic Number Test": 24,
        "Verbose Test": 1,
        "Lazy Test": 2,
        "Eager Test": 1,
        "Assertion Roulette": 24
      }
    },
    "testConversions": {
      "name": "testConversions",
      "mvn_run": "org.apache.commons.lang3.math.FractionTest#testConversions",
      "smells": {
        "Magic Number Test": 3,
        "Lazy Test": 1,
        "Eager Test": 1,
        "Assertion Roulette": 4
      }
    },
    "testDivide": {
      "name": "testDivide",
      "mvn_run": "org.apache.commons.lang3.math.FractionTest#testDivide",
      "smells": {
        "Magic Number Test": 7,
        "Verbose Test": 1,
        "Lazy Test": 4,
        "Eager Test": 1,
        "Assertion Roulette": 9
      }
    },
    "testEquals": {
      "name": "testEquals",
      "mvn_run": "org.apache.commons.lang3.math.FractionTest#testEquals",
      "smells": {
        "Magic Number Test": 1,
        "Redundant Assertion": 2,
        "Lazy Test": 1,
        "Duplicate Assert": 1,
        "Assertion Roulette": 8
      }
    },
    "testFactory_double": {
      "name": "testFactory_double",
      "mvn_run": "org.apache.commons.lang3.math.FractionTest#testFactory_double",
      "smells": {
        "Magic Number Test": 14,
        "Verbose Test": 1,
        "Lazy Test": 4,
        "Duplicate Assert": 5,
        "Eager Test": 1,
        "Assertion Roulette": 18,
        "Conditional Test Logic": 4
      }
    },
    "testFactory_int_int": {
      "name": "testFactory_int_int",
      "mvn_run": "org.apache.commons.lang3.math.FractionTest#testFactory_int_int",
      "smells": {
        "Magic Number Test": 18,
        "Verbose Test": 1,
        "Lazy Test": 3,
        "Duplicate Assert": 4,
        "Eager Test": 1,
        "Assertion Roulette": 18
      }
    },
    "testFactory_int_int_int": {
      "name": "testFactory_int_int_int",
      "mvn_run": "org.apache.commons.lang3.math.FractionTest#testFactory_int_int_int",
      "smells": {
        "Magic Number Test": 10,
        "Verbose Test": 1,
        "Lazy Test": 3,
        "Duplicate Assert": 2,
        "Eager Test": 1,
        "Assertion Roulette": 12
      }
    },
    "testFactory_String_double": {
      "name": "testFactory_String_double",
      "mvn_run": "org.apache.commons.lang3.math.FractionTest#testFactory_String_double",
      "smells": {
        "Magic Number Test": 8,
        "Lazy Test": 3,
        "Duplicate Assert": 1,
        "Eager Test": 1,
        "Assertion Roulette": 8
      }
    },
    "testFactory_String_improper": {
      "name": "testFactory_String_improper",
      "mvn_run": "org.apache.commons.lang3.math.FractionTest#testFactory_String_improper",
      "smells": {
        "Magic Number Test": 12,
        "Verbose Test": 1,
        "Lazy Test": 3,
        "Duplicate Assert": 3,
        "Eager Test": 1,
        "Assertion Roulette": 12
      }
    },
    "testFactory_String_proper": {
      "name": "testFactory_String_proper",
      "mvn_run": "org.apache.commons.lang3.math.FractionTest#testFactory_String_proper",
      "smells": {
        "Magic Number Test": 12,
        "Verbose Test": 1,
        "Lazy Test": 3,
        "Duplicate Assert": 3,
        "Eager Test": 1,
        "Assertion Roulette": 12
      }
    },
    "testGets": {
      "name": "testGets",
      "mvn_run": "org.apache.commons.lang3.math.FractionTest#testGets",
      "smells": {
        "Magic Number Test": 10,
        "Lazy Test": 3,
        "Duplicate Assert": 2,
        "Eager Test": 1,
        "Assertion Roulette": 12
      }
    },
    "testInvert": {
      "name": "testInvert",
      "mvn_run": "org.apache.commons.lang3.math.FractionTest#testInvert",
      "smells": {
        "Magic Number Test": 7,
        "Lazy Test": 4,
        "Eager Test": 1,
        "Assertion Roulette": 8
      }
    },
    "testMultiply": {
      "name": "testMultiply",
      "mvn_run": "org.apache.commons.lang3.math.FractionTest#testMultiply",
      "smells": {
        "Magic Number Test": 13,
        "Verbose Test": 1,
        "Lazy Test": 3,
        "Duplicate Assert": 2,
        "Eager Test": 1,
        "Assertion Roulette": 15
      }
    },
    "testNegate": {
      "name": "testNegate",
      "mvn_run": "org.apache.commons.lang3.math.FractionTest#testNegate",
      "smells": {
        "Magic Number Test": 5,
        "Lazy Test": 4,
        "Duplicate Assert": 1,
        "Eager Test": 1,
        "Assertion Roulette": 6
      }
    },
    "testPow": {
      "name": "testPow",
      "mvn_run": "org.apache.commons.lang3.math.FractionTest#testPow",
      "smells": {
        "Magic Number Test": 28,
        "Verbose Test": 1,
        "Lazy Test": 4,
        "Duplicate Assert": 11,
        "Eager Test": 1,
        "Assertion Roulette": 33
      }
    },
    "testReduce": {
      "name": "testReduce",
      "mvn_run": "org.apache.commons.lang3.math.FractionTest#testReduce",
      "smells": {
        "Magic Number Test": 16,
        "Verbose Test": 1,
        "Lazy Test": 3,
        "Duplicate Assert": 6,
        "Eager Test": 1,
        "Assertion Roulette": 20
      }
    },
    "testReducedFactory_int_int": {
      "name": "testReducedFactory_int_int",
      "mvn_run": "org.apache.commons.lang3.math.FractionTest#testReducedFactory_int_int",
      "smells": {
        "Magic Number Test": 27,
        "Verbose Test": 1,
        "Lazy Test": 3,
        "Duplicate Assert": 7,
        "Eager Test": 1,
        "Assertion Roulette": 28
      }
    },
    "testSubtract": {
      "name": "testSubtract",
      "mvn_run": "org.apache.commons.lang3.math.FractionTest#testSubtract",
      "smells": {
        "Magic Number Test": 20,
        "Verbose Test": 1,
        "Lazy Test": 4,
        "Duplicate Assert": 3,
        "Eager Test": 1,
        "Assertion Roulette": 21
      }
    },
    "testToString": {
      "name": "testToString",
      "mvn_run": "org.apache.commons.lang3.math.FractionTest#testToString",
      "smells": {
        "Sensitive Equality": 7,
        "Lazy Test": 1,
        "Eager Test": 1,
        "Assertion Roulette": 8
      }
    },
    "testToProperString": {
      "name": "testToProperString",
      "mvn_run": "org.apache.commons.lang3.math.FractionTest#testToProperString",
      "smells": {
        "Verbose Test": 1,
        "Lazy Test": 1,
        "Eager Test": 1,
        "Assertion Roulette": 11
      }
    },
    "testHashCode": {
      "name": "testHashCode",
      "mvn_run": "org.apache.commons.lang3.math.FractionTest#testHashCode",
      "smells": {
        "Lazy Test": 1,
        "Duplicate Assert": 1,
        "Eager Test": 1,
        "Assertion Roulette": 3
      }
    },
    "testFactory_String": {
      "name": "testFactory_String",
      "mvn_run": "org.apache.commons.lang3.math.FractionTest#testFactory_String",
      "smells": {
        "Lazy Test": 1
      }
    }
  },
  "org.apache.commons.lang3.math.NumberUtilsTest": {
    "testIsCreatable": {
      "name": "testIsCreatable",
      "mvn_run": "org.apache.commons.lang3.math.NumberUtilsTest#testIsCreatable",
      "smells": {
        "Unknown Test": 1,
        "Verbose Test": 1
      }
    },
    "testIsNumber": {
      "name": "testIsNumber",
      "mvn_run": "org.apache.commons.lang3.math.NumberUtilsTest#testIsNumber",
      "smells": {
        "Unknown Test": 1,
        "Verbose Test": 1
      }
    },
    "testIsNumberLANG1252": {
      "name": "testIsNumberLANG1252",
      "mvn_run": "org.apache.commons.lang3.math.NumberUtilsTest#testIsNumberLANG1252",
      "smells": {
        "Unknown Test": 1
      }
    },
    "testIsNumberLANG1385": {
      "name": "testIsNumberLANG1385",
      "mvn_run": "org.apache.commons.lang3.math.NumberUtilsTest#testIsNumberLANG1385",
      "smells": {
        "Unknown Test": 1
      }
    },
    "testIsNumberLANG971": {
      "name": "testIsNumberLANG971",
      "mvn_run": "org.apache.commons.lang3.math.NumberUtilsTest#testIsNumberLANG971",
      "smells": {
        "Unknown Test": 1
      }
    },
    "testIsNumberLANG972": {
      "name": "testIsNumberLANG972",
      "mvn_run": "org.apache.commons.lang3.math.NumberUtilsTest#testIsNumberLANG972",
      "smells": {
        "Unknown Test": 1
      }
    },
    "testIsNumberLANG992": {
      "name": "testIsNumberLANG992",
      "mvn_run": "org.apache.commons.lang3.math.NumberUtilsTest#testIsNumberLANG992",
      "smells": {
        "Unknown Test": 1
      }
    },
    "testLANG1252": {
      "name": "testLANG1252",
      "mvn_run": "org.apache.commons.lang3.math.NumberUtilsTest#testLANG1252",
      "smells": {
        "Unknown Test": 1
      }
    },
    "testLang300": {
      "name": "testLang300",
      "mvn_run": "org.apache.commons.lang3.math.NumberUtilsTest#testLang300",
      "smells": {
        "Unknown Test": 1,
        "Lazy Test": 1
      }
    },
    "testLANG971": {
      "name": "testLANG971",
      "mvn_run": "org.apache.commons.lang3.math.NumberUtilsTest#testLANG971",
      "smells": {
        "Unknown Test": 1
      }
    },
    "testLANG972": {
      "name": "testLANG972",
      "mvn_run": "org.apache.commons.lang3.math.NumberUtilsTest#testLANG972",
      "smells": {
        "Unknown Test": 1
      }
    },
    "testLANG992": {
      "name": "testLANG992",
      "mvn_run": "org.apache.commons.lang3.math.NumberUtilsTest#testLANG992",
      "smells": {
        "Unknown Test": 1
      }
    },
    "testCreateBigDecimalFailure": {
      "name": "testCreateBigDecimalFailure",
      "mvn_run": "org.apache.commons.lang3.math.NumberUtilsTest#testCreateBigDecimalFailure",
      "smells": {
        "IgnoredTest": 1,
        "Lazy Test": 1
      }
    },
    "testCreateBigIntegerFailure": {
      "name": "testCreateBigIntegerFailure",
      "mvn_run": "org.apache.commons.lang3.math.NumberUtilsTest#testCreateBigIntegerFailure",
      "smells": {
        "IgnoredTest": 1,
        "Lazy Test": 1
      }
    },
    "testCreateDoubleFailure": {
      "name": "testCreateDoubleFailure",
      "mvn_run": "org.apache.commons.lang3.math.NumberUtilsTest#testCreateDoubleFailure",
      "smells": {
        "IgnoredTest": 1,
        "Lazy Test": 1
      }
    },
    "testCreateFloatFailure": {
      "name": "testCreateFloatFailure",
      "mvn_run": "org.apache.commons.lang3.math.NumberUtilsTest#testCreateFloatFailure",
      "smells": {
        "IgnoredTest": 1,
        "Lazy Test": 1
      }
    },
    "testCreateIntegerFailure": {
      "name": "testCreateIntegerFailure",
      "mvn_run": "org.apache.commons.lang3.math.NumberUtilsTest#testCreateIntegerFailure",
      "smells": {
        "IgnoredTest": 1,
        "Lazy Test": 1
      }
    },
    "testCreateLongFailure": {
      "name": "testCreateLongFailure",
      "mvn_run": "org.apache.commons.lang3.math.NumberUtilsTest#testCreateLongFailure",
      "smells": {
        "IgnoredTest": 1,
        "Lazy Test": 1
      }
    },
    "compareByte": {
      "name": "compareByte",
      "mvn_run": "org.apache.commons.lang3.math.NumberUtilsTest#compareByte",
      "smells": {
        "Magic Number Test": 3,
        "Lazy Test": 1,
        "Assertion Roulette": 3
      }
    },
    "compareInt": {
      "name": "compareInt",
      "mvn_run": "org.apache.commons.lang3.math.NumberUtilsTest#compareInt",
      "smells": {
        "Magic Number Test": 3,
        "Lazy Test": 1,
        "Assertion Roulette": 3
      }
    },
    "compareLong": {
      "name": "compareLong",
      "mvn_run": "org.apache.commons.lang3.math.NumberUtilsTest#compareLong",
      "smells": {
        "Magic Number Test": 3,
        "Lazy Test": 1,
        "Assertion Roulette": 3
      }
    },
    "compareShort": {
      "name": "compareShort",
      "mvn_run": "org.apache.commons.lang3.math.NumberUtilsTest#compareShort",
      "smells": {
        "Magic Number Test": 3,
        "Lazy Test": 1,
        "Assertion Roulette": 3
      }
    },
    "testBigIntegerToDoubleBigInteger": {
      "name": "testBigIntegerToDoubleBigInteger",
      "mvn_run": "org.apache.commons.lang3.math.NumberUtilsTest#testBigIntegerToDoubleBigInteger",
      "smells": {
        "Magic Number Test": 2,
        "Lazy Test": 1,
        "Assertion Roulette": 2
      }
    },
    "testBigIntegerToDoubleBigIntegerD": {
      "name": "testBigIntegerToDoubleBigIntegerD",
      "mvn_run": "org.apache.commons.lang3.math.NumberUtilsTest#testBigIntegerToDoubleBigIntegerD",
      "smells": {
        "Magic Number Test": 2,
        "Lazy Test": 1,
        "Assertion Roulette": 2
      }
    },
    "testCompareDouble": {
      "name": "testCompareDouble",
      "mvn_run": "org.apache.commons.lang3.math.NumberUtilsTest#testCompareDouble",
      "smells": {
        "Magic Number Test": 81,
        "Verbose Test": 1,
        "Lazy Test": 1,
        "Assertion Roulette": 81
      }
    },
    "testCompareFloat": {
      "name": "testCompareFloat",
      "mvn_run": "org.apache.commons.lang3.math.NumberUtilsTest#testCompareFloat",
      "smells": {
        "Magic Number Test": 81,
        "Verbose Test": 1,
        "Lazy Test": 1,
        "Assertion Roulette": 81
      }
    },
    "testConstants": {
      "name": "testConstants",
      "mvn_run": "org.apache.commons.lang3.math.NumberUtilsTest#testConstants",
      "smells": {
        "Magic Number Test": 18,
        "Verbose Test": 1,
        "Assertion Roulette": 36
      }
    },
    "testConstructor": {
      "name": "testConstructor",
      "mvn_run": "org.apache.commons.lang3.math.NumberUtilsTest#testConstructor",
      "smells": {
        "Magic Number Test": 1,
        "Assertion Roulette": 5
      }
    },
    "testCreateBigInteger": {
      "name": "testCreateBigInteger",
      "mvn_run": "org.apache.commons.lang3.math.NumberUtilsTest#testCreateBigInteger",
      "smells": {
        "Magic Number Test": 3,
        "Lazy Test": 1,
        "Duplicate Assert": 1,
        "Assertion Roulette": 13
      }
    },
    "testCreateNumber": {
      "name": "testCreateNumber",
      "mvn_run": "org.apache.commons.lang3.math.NumberUtilsTest#testCreateNumber",
      "smells": {
        "Magic Number Test": 3,
        "Verbose Test": 1,
        "Lazy Test": 1,
        "Eager Test": 1,
        "Assertion Roulette": 48
      }
    },
    "testCreateNumberMagnitude": {
      "name": "testCreateNumberMagnitude",
      "mvn_run": "org.apache.commons.lang3.math.NumberUtilsTest#testCreateNumberMagnitude",
      "smells": {
        "Magic Number Test": 5,
        "Sensitive Equality": 2,
        "Verbose Test": 1,
        "Lazy Test": 1,
        "Assertion Roulette": 22
      }
    },
    "testCreateNumberZero": {
      "name": "testCreateNumberZero",
      "mvn_run": "org.apache.commons.lang3.math.NumberUtilsTest#testCreateNumberZero",
      "smells": {
        "Magic Number Test": 4,
        "Verbose Test": 1,
        "Lazy Test": 1,
        "Assertion Roulette": 4,
        "Conditional Test Logic": 4
      }
    },
    "TestLang747": {
      "name": "TestLang747",
      "mvn_run": "org.apache.commons.lang3.math.NumberUtilsTest#TestLang747",
      "smells": {
        "Magic Number Test": 4,
        "Verbose Test": 1,
        "Lazy Test": 1,
        "Assertion Roulette": 26
      }
    },
    "testMaxDouble": {
      "name": "testMaxDouble",
      "mvn_run": "org.apache.commons.lang3.math.NumberUtilsTest#testMaxDouble",
      "smells": {
        "Magic Number Test": 5,
        "Lazy Test": 1,
        "Assertion Roulette": 5
      }
    },
    "testMaxFloat": {
      "name": "testMaxFloat",
      "mvn_run": "org.apache.commons.lang3.math.NumberUtilsTest#testMaxFloat",
      "smells": {
        "Magic Number Test": 5,
        "Lazy Test": 1,
        "Assertion Roulette": 5
      }
    },
    "testMaximumDouble": {
      "name": "testMaximumDouble",
      "mvn_run": "org.apache.commons.lang3.math.NumberUtilsTest#testMaximumDouble",
      "smells": {
        "Magic Number Test": 5,
        "Lazy Test": 1,
        "Assertion Roulette": 5
      }
    },
    "testMaximumFloat": {
      "name": "testMaximumFloat",
      "mvn_run": "org.apache.commons.lang3.math.NumberUtilsTest#testMaximumFloat",
      "smells": {
        "Magic Number Test": 5,
        "Lazy Test": 1,
        "Assertion Roulette": 5
      }
    },
    "testMaximumInt": {
      "name": "testMaximumInt",
      "mvn_run": "org.apache.commons.lang3.math.NumberUtilsTest#testMaximumInt",
      "smells": {
        "Magic Number Test": 5,
        "Lazy Test": 1,
        "Assertion Roulette": 5
      }
    },
    "testMaxInt": {
      "name": "testMaxInt",
      "mvn_run": "org.apache.commons.lang3.math.NumberUtilsTest#testMaxInt",
      "smells": {
        "Magic Number Test": 5,
        "Lazy Test": 1,
        "Assertion Roulette": 5
      }
    },
    "testMinDouble": {
      "name": "testMinDouble",
      "mvn_run": "org.apache.commons.lang3.math.NumberUtilsTest#testMinDouble",
      "smells": {
        "Magic Number Test": 6,
        "Lazy Test": 1,
        "Assertion Roulette": 6
      }
    },
    "testMinFloat": {
      "name": "testMinFloat",
      "mvn_run": "org.apache.commons.lang3.math.NumberUtilsTest#testMinFloat",
      "smells": {
        "Magic Number Test": 7,
        "Lazy Test": 1,
        "Assertion Roulette": 7
      }
    },
    "testMinimumDouble": {
      "name": "testMinimumDouble",
      "mvn_run": "org.apache.commons.lang3.math.NumberUtilsTest#testMinimumDouble",
      "smells": {
        "Magic Number Test": 5,
        "Lazy Test": 1,
        "Assertion Roulette": 5
      }
    },
    "testMinimumFloat": {
      "name": "testMinimumFloat",
      "mvn_run": "org.apache.commons.lang3.math.NumberUtilsTest#testMinimumFloat",
      "smells": {
        "Magic Number Test": 5,
        "Lazy Test": 1,
        "Assertion Roulette": 5
      }
    },
    "testMinimumInt": {
      "name": "testMinimumInt",
      "mvn_run": "org.apache.commons.lang3.math.NumberUtilsTest#testMinimumInt",
      "smells": {
        "Magic Number Test": 5,
        "Lazy Test": 1,
        "Assertion Roulette": 5
      }
    },
    "testMinInt": {
      "name": "testMinInt",
      "mvn_run": "org.apache.commons.lang3.math.NumberUtilsTest#testMinInt",
      "smells": {
        "Magic Number Test": 4,
        "Lazy Test": 1,
        "Assertion Roulette": 4
      }
    },
    "testStringToDoubleString": {
      "name": "testStringToDoubleString",
      "mvn_run": "org.apache.commons.lang3.math.NumberUtilsTest#testStringToDoubleString",
      "smells": {
        "Magic Number Test": 9,
        "Lazy Test": 1,
        "Assertion Roulette": 11
      }
    },
    "testStringToDoubleStringD": {
      "name": "testStringToDoubleStringD",
      "mvn_run": "org.apache.commons.lang3.math.NumberUtilsTest#testStringToDoubleStringD",
      "smells": {
        "Magic Number Test": 6,
        "Lazy Test": 1,
        "Assertion Roulette": 6
      }
    },
    "testToByteString": {
      "name": "testToByteString",
      "mvn_run": "org.apache.commons.lang3.math.NumberUtilsTest#testToByteString",
      "smells": {
        "Magic Number Test": 4,
        "Lazy Test": 1,
        "Assertion Roulette": 4
      }
    },
    "testToByteStringI": {
      "name": "testToByteStringI",
      "mvn_run": "org.apache.commons.lang3.math.NumberUtilsTest#testToByteStringI",
      "smells": {
        "Magic Number Test": 2,
        "Lazy Test": 1,
        "Assertion Roulette": 2
      }
    },
    "testToFloatString": {
      "name": "testToFloatString",
      "mvn_run": "org.apache.commons.lang3.math.NumberUtilsTest#testToFloatString",
      "smells": {
        "Magic Number Test": 9,
        "Lazy Test": 1,
        "Assertion Roulette": 11
      }
    },
    "testToFloatStringF": {
      "name": "testToFloatStringF",
      "mvn_run": "org.apache.commons.lang3.math.NumberUtilsTest#testToFloatStringF",
      "smells": {
        "Magic Number Test": 5,
        "Lazy Test": 1,
        "Assertion Roulette": 5
      }
    },
    "testToIntString": {
      "name": "testToIntString",
      "mvn_run": "org.apache.commons.lang3.math.NumberUtilsTest#testToIntString",
      "smells": {
        "Magic Number Test": 4,
        "Lazy Test": 1,
        "Assertion Roulette": 4
      }
    },
    "testToIntStringI": {
      "name": "testToIntStringI",
      "mvn_run": "org.apache.commons.lang3.math.NumberUtilsTest#testToIntStringI",
      "smells": {
        "Magic Number Test": 2,
        "Lazy Test": 1,
        "Assertion Roulette": 2
      }
    },
    "testToScaledBigDecimalBigDecimal": {
      "name": "testToScaledBigDecimalBigDecimal",
      "mvn_run": "org.apache.commons.lang3.math.NumberUtilsTest#testToScaledBigDecimalBigDecimal",
      "smells": {
        "Magic Number Test": 3,
        "Sensitive Equality": 1,
        "Lazy Test": 1,
        "Eager Test": 1,
        "Assertion Roulette": 4
      }
    },
    "testToScaledBigDecimalBigDecimalIRM": {
      "name": "testToScaledBigDecimalBigDecimalIRM",
      "mvn_run": "org.apache.commons.lang3.math.NumberUtilsTest#testToScaledBigDecimalBigDecimalIRM",
      "smells": {
        "Magic Number Test": 7,
        "Sensitive Equality": 1,
        "Lazy Test": 1,
        "Eager Test": 1,
        "Assertion Roulette": 4
      }
    },
    "testToScaledBigDecimalDouble": {
      "name": "testToScaledBigDecimalDouble",
      "mvn_run": "org.apache.commons.lang3.math.NumberUtilsTest#testToScaledBigDecimalDouble",
      "smells": {
        "Magic Number Test": 3,
        "Sensitive Equality": 1,
        "Lazy Test": 1,
        "Eager Test": 1,
        "Assertion Roulette": 4
      }
    },
    "testToScaledBigDecimalDoubleIRM": {
      "name": "testToScaledBigDecimalDoubleIRM",
      "mvn_run": "org.apache.commons.lang3.math.NumberUtilsTest#testToScaledBigDecimalDoubleIRM",
      "smells": {
        "Magic Number Test": 7,
        "Sensitive Equality": 1,
        "Lazy Test": 1,
        "Eager Test": 1,
        "Assertion Roulette": 4
      }
    },
    "testToScaledBigDecimalFloat": {
      "name": "testToScaledBigDecimalFloat",
      "mvn_run": "org.apache.commons.lang3.math.NumberUtilsTest#testToScaledBigDecimalFloat",
      "smells": {
        "Magic Number Test": 3,
        "Sensitive Equality": 1,
        "Lazy Test": 1,
        "Eager Test": 1,
        "Assertion Roulette": 4
      }
    },
    "testToScaledBigDecimalFloatIRM": {
      "name": "testToScaledBigDecimalFloatIRM",
      "mvn_run": "org.apache.commons.lang3.math.NumberUtilsTest#testToScaledBigDecimalFloatIRM",
      "smells": {
        "Magic Number Test": 7,
        "Sensitive Equality": 1,
        "Lazy Test": 1,
        "Eager Test": 1,
        "Assertion Roulette": 4
      }
    },
    "testToScaledBigDecimalString": {
      "name": "testToScaledBigDecimalString",
      "mvn_run": "org.apache.commons.lang3.math.NumberUtilsTest#testToScaledBigDecimalString",
      "smells": {
        "Magic Number Test": 3,
        "Sensitive Equality": 1,
        "Lazy Test": 1,
        "Eager Test": 1,
        "Assertion Roulette": 4
      }
    },
    "testToScaledBigDecimalStringIRM": {
      "name": "testToScaledBigDecimalStringIRM",
      "mvn_run": "org.apache.commons.lang3.math.NumberUtilsTest#testToScaledBigDecimalStringIRM",
      "smells": {
        "Magic Number Test": 4,
        "Sensitive Equality": 1,
        "Lazy Test": 1,
        "Eager Test": 1,
        "Assertion Roulette": 4
      }
    },
    "testToShortString": {
      "name": "testToShortString",
      "mvn_run": "org.apache.commons.lang3.math.NumberUtilsTest#testToShortString",
      "smells": {
        "Magic Number Test": 4,
        "Lazy Test": 1,
        "Assertion Roulette": 4
      }
    },
    "testToShortStringI": {
      "name": "testToShortStringI",
      "mvn_run": "org.apache.commons.lang3.math.NumberUtilsTest#testToShortStringI",
      "smells": {
        "Magic Number Test": 2,
        "Lazy Test": 1,
        "Assertion Roulette": 2
      }
    },
    "testStringCreateNumberEnsureNoPrecisionLoss": {
      "name": "testStringCreateNumberEnsureNoPrecisionLoss",
      "mvn_run": "org.apache.commons.lang3.math.NumberUtilsTest#testStringCreateNumberEnsureNoPrecisionLoss",
      "smells": {
        "Sensitive Equality": 9,
        "Lazy Test": 1,
        "Assertion Roulette": 23
      }
    },
    "testCreateLong": {
      "name": "testCreateLong",
      "mvn_run": "org.apache.commons.lang3.math.NumberUtilsTest#testCreateLong",
      "smells": {
        "Lazy Test": 1,
        "Assertion Roulette": 2
      }
    },
    "testCreateDouble": {
      "name": "testCreateDouble",
      "mvn_run": "org.apache.commons.lang3.math.NumberUtilsTest#testCreateDouble",
      "smells": {
        "Lazy Test": 1,
        "Assertion Roulette": 1
      }
    },
    "testMaxShort_nullArray": {
      "name": "testMaxShort_nullArray",
      "mvn_run": "org.apache.commons.lang3.math.NumberUtilsTest#testMaxShort_nullArray",
      "smells": {
        "Lazy Test": 1
      }
    },
    "testMaxShort": {
      "name": "testMaxShort",
      "mvn_run": "org.apache.commons.lang3.math.NumberUtilsTest#testMaxShort",
      "smells": {
        "Lazy Test": 1,
        "Assertion Roulette": 5
      }
    },
    "testMaxLong_nullArray": {
      "name": "testMaxLong_nullArray",
      "mvn_run": "org.apache.commons.lang3.math.NumberUtilsTest#testMaxLong_nullArray",
      "smells": {
        "Lazy Test": 1
      }
    },
    "testMaxLong": {
      "name": "testMaxLong",
      "mvn_run": "org.apache.commons.lang3.math.NumberUtilsTest#testMaxLong",
      "smells": {
        "Lazy Test": 1,
        "Assertion Roulette": 5
      }
    },
    "testMaxInt_nullArray": {
      "name": "testMaxInt_nullArray",
      "mvn_run": "org.apache.commons.lang3.math.NumberUtilsTest#testMaxInt_nullArray",
      "smells": {
        "Lazy Test": 1
      }
    },
    "testMaximumShort": {
      "name": "testMaximumShort",
      "mvn_run": "org.apache.commons.lang3.math.NumberUtilsTest#testMaximumShort",
      "smells": {
        "Lazy Test": 1,
        "Assertion Roulette": 4
      }
    },
    "testMaximumLong": {
      "name": "testMaximumLong",
      "mvn_run": "org.apache.commons.lang3.math.NumberUtilsTest#testMaximumLong",
      "smells": {
        "Lazy Test": 1,
        "Assertion Roulette": 5
      }
    },
    "testMaximumByte": {
      "name": "testMaximumByte",
      "mvn_run": "org.apache.commons.lang3.math.NumberUtilsTest#testMaximumByte",
      "smells": {
        "Lazy Test": 1,
        "Assertion Roulette": 4
      }
    },
    "testMaxFloat_nullArray": {
      "name": "testMaxFloat_nullArray",
      "mvn_run": "org.apache.commons.lang3.math.NumberUtilsTest#testMaxFloat_nullArray",
      "smells": {
        "Lazy Test": 1
      }
    },
    "testMaxDouble_nullArray": {
      "name": "testMaxDouble_nullArray",
      "mvn_run": "org.apache.commons.lang3.math.NumberUtilsTest#testMaxDouble_nullArray",
      "smells": {
        "Lazy Test": 1
      }
    },
    "testMaxByte_nullArray": {
      "name": "testMaxByte_nullArray",
      "mvn_run": "org.apache.commons.lang3.math.NumberUtilsTest#testMaxByte_nullArray",
      "smells": {
        "Lazy Test": 1
      }
    },
    "testMaxByte": {
      "name": "testMaxByte",
      "mvn_run": "org.apache.commons.lang3.math.NumberUtilsTest#testMaxByte",
      "smells": {
        "Lazy Test": 1,
        "Assertion Roulette": 5
      }
    },
    "testLang381": {
      "name": "testLang381",
      "mvn_run": "org.apache.commons.lang3.math.NumberUtilsTest#testLang381",
      "smells": {
        "Lazy Test": 2,
        "Eager Test": 1,
        "Assertion Roulette": 10
      }
    },
    "testToLongStringL": {
      "name": "testToLongStringL",
      "mvn_run": "org.apache.commons.lang3.math.NumberUtilsTest#testToLongStringL",
      "smells": {
        "Lazy Test": 1,
        "Assertion Roulette": 2
      }
    },
    "testToLongString": {
      "name": "testToLongString",
      "mvn_run": "org.apache.commons.lang3.math.NumberUtilsTest#testToLongString",
      "smells": {
        "Lazy Test": 1,
        "Assertion Roulette": 8
      }
    },
    "testLang1087": {
      "name": "testLang1087",
      "mvn_run": "org.apache.commons.lang3.math.NumberUtilsTest#testLang1087",
      "smells": {
        "Lazy Test": 1,
        "Eager Test": 1,
        "Assertion Roulette": 6
      }
    },
    "testCreateNumberFailure_8": {
      "name": "testCreateNumberFailure_8",
      "mvn_run": "org.apache.commons.lang3.math.NumberUtilsTest#testCreateNumberFailure_8",
      "smells": {
        "Lazy Test": 1
      }
    },
    "testCreateNumberFailure_7": {
      "name": "testCreateNumberFailure_7",
      "mvn_run": "org.apache.commons.lang3.math.NumberUtilsTest#testCreateNumberFailure_7",
      "smells": {
        "Lazy Test": 1
      }
    },
    "testCreateNumberFailure_6": {
      "name": "testCreateNumberFailure_6",
      "mvn_run": "org.apache.commons.lang3.math.NumberUtilsTest#testCreateNumberFailure_6",
      "smells": {
        "Lazy Test": 1
      }
    },
    "testCreateNumberFailure_5": {
      "name": "testCreateNumberFailure_5",
      "mvn_run": "org.apache.commons.lang3.math.NumberUtilsTest#testCreateNumberFailure_5",
      "smells": {
        "Lazy Test": 1
      }
    },
    "testCreateNumberFailure_4": {
      "name": "testCreateNumberFailure_4",
      "mvn_run": "org.apache.commons.lang3.math.NumberUtilsTest#testCreateNumberFailure_4",
      "smells": {
        "Lazy Test": 1
      }
    },
    "testCreateNumberFailure_3": {
      "name": "testCreateNumberFailure_3",
      "mvn_run": "org.apache.commons.lang3.math.NumberUtilsTest#testCreateNumberFailure_3",
      "smells": {
        "Lazy Test": 1
      }
    },
    "testCreateNumberFailure_2": {
      "name": "testCreateNumberFailure_2",
      "mvn_run": "org.apache.commons.lang3.math.NumberUtilsTest#testCreateNumberFailure_2",
      "smells": {
        "Lazy Test": 1
      }
    },
    "testCreateNumberFailure_1": {
      "name": "testCreateNumberFailure_1",
      "mvn_run": "org.apache.commons.lang3.math.NumberUtilsTest#testCreateNumberFailure_1",
      "smells": {
        "Lazy Test": 1
      }
    },
    "testCreateBigDecimal": {
      "name": "testCreateBigDecimal",
      "mvn_run": "org.apache.commons.lang3.math.NumberUtilsTest#testCreateBigDecimal",
      "smells": {
        "Lazy Test": 1,
        "Assertion Roulette": 1
      }
    },
    "testCreateFloat": {
      "name": "testCreateFloat",
      "mvn_run": "org.apache.commons.lang3.math.NumberUtilsTest#testCreateFloat",
      "smells": {
        "Lazy Test": 1,
        "Assertion Roulette": 1
      }
    },
    "testMinShort_nullArray": {
      "name": "testMinShort_nullArray",
      "mvn_run": "org.apache.commons.lang3.math.NumberUtilsTest#testMinShort_nullArray",
      "smells": {
        "Lazy Test": 1
      }
    },
    "testMinShort": {
      "name": "testMinShort",
      "mvn_run": "org.apache.commons.lang3.math.NumberUtilsTest#testMinShort",
      "smells": {
        "Lazy Test": 1,
        "Assertion Roulette": 4
      }
    },
    "testMinLong_nullArray": {
      "name": "testMinLong_nullArray",
      "mvn_run": "org.apache.commons.lang3.math.NumberUtilsTest#testMinLong_nullArray",
      "smells": {
        "Lazy Test": 1
      }
    },
    "testMinLong": {
      "name": "testMinLong",
      "mvn_run": "org.apache.commons.lang3.math.NumberUtilsTest#testMinLong",
      "smells": {
        "Lazy Test": 1,
        "Assertion Roulette": 4
      }
    },
    "testMinInt_nullArray": {
      "name": "testMinInt_nullArray",
      "mvn_run": "org.apache.commons.lang3.math.NumberUtilsTest#testMinInt_nullArray",
      "smells": {
        "Lazy Test": 1
      }
    },
    "testMinimumShort": {
      "name": "testMinimumShort",
      "mvn_run": "org.apache.commons.lang3.math.NumberUtilsTest#testMinimumShort",
      "smells": {
        "Lazy Test": 1,
        "Assertion Roulette": 4
      }
    },
    "testMinimumLong": {
      "name": "testMinimumLong",
      "mvn_run": "org.apache.commons.lang3.math.NumberUtilsTest#testMinimumLong",
      "smells": {
        "Lazy Test": 1,
        "Assertion Roulette": 5
      }
    },
    "testMinimumByte": {
      "name": "testMinimumByte",
      "mvn_run": "org.apache.commons.lang3.math.NumberUtilsTest#testMinimumByte",
      "smells": {
        "Lazy Test": 1,
        "Assertion Roulette": 4
      }
    },
    "testMinFloat_nullArray": {
      "name": "testMinFloat_nullArray",
      "mvn_run": "org.apache.commons.lang3.math.NumberUtilsTest#testMinFloat_nullArray",
      "smells": {
        "Lazy Test": 1
      }
    },
    "testMinDouble_nullArray": {
      "name": "testMinDouble_nullArray",
      "mvn_run": "org.apache.commons.lang3.math.NumberUtilsTest#testMinDouble_nullArray",
      "smells": {
        "Lazy Test": 1
      }
    },
    "testMinByte_nullArray": {
      "name": "testMinByte_nullArray",
      "mvn_run": "org.apache.commons.lang3.math.NumberUtilsTest#testMinByte_nullArray",
      "smells": {
        "Lazy Test": 1
      }
    },
    "testMinByte": {
      "name": "testMinByte",
      "mvn_run": "org.apache.commons.lang3.math.NumberUtilsTest#testMinByte",
      "smells": {
        "Lazy Test": 1,
        "Assertion Roulette": 4
      }
    },
    "testCreateInteger": {
      "name": "testCreateInteger",
      "mvn_run": "org.apache.commons.lang3.math.NumberUtilsTest#testCreateInteger",
      "smells": {
        "Lazy Test": 1,
        "Assertion Roulette": 2
      }
    },
    "testIsParsable": {
      "name": "testIsParsable",
      "mvn_run": "org.apache.commons.lang3.math.NumberUtilsTest#testIsParsable",
      "smells": {
        "Assertion Roulette": 19
      }
    }
  },
  "org.apache.commons.lang3.math.IEEE754rUtilsTest": {
    "testConstructorExists": {
      "name": "testConstructorExists",
      "mvn_run": "org.apache.commons.lang3.math.IEEE754rUtilsTest#testConstructorExists",
      "smells": {
        "Unknown Test": 1
      }
    },
    "testLang381": {
      "name": "testLang381",
      "mvn_run": "org.apache.commons.lang3.math.IEEE754rUtilsTest#testLang381",
      "smells": {
        "Magic Number Test": 12,
        "Lazy Test": 2,
        "Eager Test": 1,
        "Assertion Roulette": 14
      }
    },
    "testEnforceExceptions": {
      "name": "testEnforceExceptions",
      "mvn_run": "org.apache.commons.lang3.math.IEEE754rUtilsTest#testEnforceExceptions",
      "smells": {
        "Verbose Test": 1,
        "Lazy Test": 2,
        "Duplicate Assert": 2,
        "Eager Test": 1
      }
    }
  },
  "org.apache.commons.lang3.time.CalendarUtilsTest": {
    "testGetStandaloneLongMonthNames": {
      "name": "testGetStandaloneLongMonthNames",
      "mvn_run": "org.apache.commons.lang3.time.CalendarUtilsTest#testGetStandaloneLongMonthNames",
      "smells": {
        "Magic Number Test": 1,
        "Lazy Test": 1,
        "Assertion Roulette": 13
      }
    },
    "testGetStandaloneShortMonthNames": {
      "name": "testGetStandaloneShortMonthNames",
      "mvn_run": "org.apache.commons.lang3.time.CalendarUtilsTest#testGetStandaloneShortMonthNames",
      "smells": {
        "Magic Number Test": 1,
        "Lazy Test": 1,
        "Assertion Roulette": 13
      }
    },
    "testGetDayOfMonth": {
      "name": "testGetDayOfMonth",
      "mvn_run": "org.apache.commons.lang3.time.CalendarUtilsTest#testGetDayOfMonth",
      "smells": {
        "Assertion Roulette": 1
      }
    },
    "testGetMonth": {
      "name": "testGetMonth",
      "mvn_run": "org.apache.commons.lang3.time.CalendarUtilsTest#testGetMonth",
      "smells": {
        "Assertion Roulette": 1
      }
    },
    "testGetYear": {
      "name": "testGetYear",
      "mvn_run": "org.apache.commons.lang3.time.CalendarUtilsTest#testGetYear",
      "smells": {
        "Assertion Roulette": 1
      }
    }
  },
  "org.apache.commons.lang3.time.FastDateParserTest": {
    "testJpLocales": {
      "name": "testJpLocales",
      "mvn_run": "org.apache.commons.lang3.time.FastDateParserTest#testJpLocales",
      "smells": {
        "Unknown Test": 1
      }
    },
    "testLANG_831": {
      "name": "testLANG_831",
      "mvn_run": "org.apache.commons.lang3.time.FastDateParserTest#testLANG_831",
      "smells": {
        "Unknown Test": 1
      }
    },
    "testLANG_832": {
      "name": "testLANG_832",
      "mvn_run": "org.apache.commons.lang3.time.FastDateParserTest#testLANG_832",
      "smells": {
        "Unknown Test": 1
      }
    },
    "testParses": {
      "name": "testParses",
      "mvn_run": "org.apache.commons.lang3.time.FastDateParserTest#testParses",
      "smells": {
        "Unknown Test": 1,
        "Lazy Test": 1,
        "Conditional Test Logic": 4
      }
    },
    "testSpecialCharacters": {
      "name": "testSpecialCharacters",
      "mvn_run": "org.apache.commons.lang3.time.FastDateParserTest#testSpecialCharacters",
      "smells": {
        "Unknown Test": 1
      }
    },
    "testSdfAndFdp": {
      "name": "testSdfAndFdp",
      "mvn_run": "org.apache.commons.lang3.time.FastDateParserTest#testSdfAndFdp",
      "smells": {
        "IgnoredTest": 1,
        "Verbose Test": 1,
        "Lazy Test": 1,
        "Assertion Roulette": 2,
        "Conditional Test Logic": 2,
        "Exception Catching Throwing": 2
      }
    },
    "testParsesKnownJava16Ea25Failure": {
      "name": "testParsesKnownJava16Ea25Failure",
      "mvn_run": "org.apache.commons.lang3.time.FastDateParserTest#testParsesKnownJava16Ea25Failure",
      "smells": {
        "Sensitive Equality": 1,
        "Lazy Test": 2,
        "Eager Test": 1,
        "Assertion Roulette": 2
      }
    },
    "testToStringContainsName": {
      "name": "testToStringContainsName",
      "mvn_run": "org.apache.commons.lang3.time.FastDateParserTest#testToStringContainsName",
      "smells": {
        "Sensitive Equality": 1,
        "Lazy Test": 1,
        "Assertion Roulette": 1
      }
    },
    "testAmPm": {
      "name": "testAmPm",
      "mvn_run": "org.apache.commons.lang3.time.FastDateParserTest#testAmPm",
      "smells": {
        "Verbose Test": 1,
        "Lazy Test": 1,
        "Assertion Roulette": 16
      }
    },
    "testTzParses": {
      "name": "testTzParses",
      "mvn_run": "org.apache.commons.lang3.time.FastDateParserTest#testTzParses",
      "smells": {
        "Lazy Test": 2,
        "Eager Test": 1,
        "Assertion Roulette": 1,
        "Conditional Test Logic": 2
      }
    },
    "testShortDateStyleWithLocales": {
      "name": "testShortDateStyleWithLocales",
      "mvn_run": "org.apache.commons.lang3.time.FastDateParserTest#testShortDateStyleWithLocales",
      "smells": {
        "Lazy Test": 1,
        "Assertion Roulette": 2
      }
    },
    "testQuotes": {
      "name": "testQuotes",
      "mvn_run": "org.apache.commons.lang3.time.FastDateParserTest#testQuotes",
      "smells": {
        "Lazy Test": 1,
        "Assertion Roulette": 1
      }
    },
    "testParseZone": {
      "name": "testParseZone",
      "mvn_run": "org.apache.commons.lang3.time.FastDateParserTest#testParseZone",
      "smells": {
        "Lazy Test": 1,
        "Assertion Roulette": 6
      }
    },
    "testParseOffset": {
      "name": "testParseOffset",
      "mvn_run": "org.apache.commons.lang3.time.FastDateParserTest#testParseOffset",
      "smells": {
        "Lazy Test": 1,
        "Assertion Roulette": 1
      }
    },
    "testParseNumerics": {
      "name": "testParseNumerics",
      "mvn_run": "org.apache.commons.lang3.time.FastDateParserTest#testParseNumerics",
      "smells": {
        "Lazy Test": 1,
        "Assertion Roulette": 1
      }
    },
    "testParseLongShort": {
      "name": "testParseLongShort",
      "mvn_run": "org.apache.commons.lang3.time.FastDateParserTest#testParseLongShort",
      "smells": {
        "Lazy Test": 1,
        "Assertion Roulette": 4
      }
    },
    "testMilleniumBug": {
      "name": "testMilleniumBug",
      "mvn_run": "org.apache.commons.lang3.time.FastDateParserTest#testMilleniumBug",
      "smells": {
        "Lazy Test": 1,
        "Assertion Roulette": 1
      }
    },
    "testLowYearPadding": {
      "name": "testLowYearPadding",
      "mvn_run": "org.apache.commons.lang3.time.FastDateParserTest#testLowYearPadding",
      "smells": {
        "Lazy Test": 1,
        "Assertion Roulette": 4
      }
    },
    "testLang996": {
      "name": "testLang996",
      "mvn_run": "org.apache.commons.lang3.time.FastDateParserTest#testLang996",
      "smells": {
        "Lazy Test": 1,
        "Assertion Roulette": 3
      }
    },
    "testLang538": {
      "name": "testLang538",
      "mvn_run": "org.apache.commons.lang3.time.FastDateParserTest#testLang538",
      "smells": {
        "Lazy Test": 1,
        "Assertion Roulette": 1
      }
    },
    "testLang303": {
      "name": "testLang303",
      "mvn_run": "org.apache.commons.lang3.time.FastDateParserTest#testLang303",
      "smells": {
        "Lazy Test": 1,
        "Assertion Roulette": 1
      }
    },
    "testLang1380": {
      "name": "testLang1380",
      "mvn_run": "org.apache.commons.lang3.time.FastDateParserTest#testLang1380",
      "smells": {
        "Lazy Test": 1,
        "Assertion Roulette": 3
      }
    },
    "testLang1121": {
      "name": "testLang1121",
      "mvn_run": "org.apache.commons.lang3.time.FastDateParserTest#testLang1121",
      "smells": {
        "Lazy Test": 1,
        "Duplicate Assert": 1,
        "Assertion Roulette": 2
      }
    },
    "testDayOf": {
      "name": "testDayOf",
      "mvn_run": "org.apache.commons.lang3.time.FastDateParserTest#testDayOf",
      "smells": {
        "Lazy Test": 1,
        "Assertion Roulette": 1
      }
    },
    "testDayNumberOfWeek": {
      "name": "testDayNumberOfWeek",
      "mvn_run": "org.apache.commons.lang3.time.FastDateParserTest#testDayNumberOfWeek",
      "smells": {
        "Lazy Test": 1,
        "Assertion Roulette": 3
      }
    },
    "test1806": {
      "name": "test1806",
      "mvn_run": "org.apache.commons.lang3.time.FastDateParserTest#test1806",
      "smells": {
        "Lazy Test": 1,
        "Assertion Roulette": 3,
        "Conditional Test Logic": 1
      }
    },
    "test_Equality_Hash": {
      "name": "test_Equality_Hash",
      "mvn_run": "org.apache.commons.lang3.time.FastDateParserTest#test_Equality_Hash",
      "smells": {
        "Assertion Roulette": 1,
        "Conditional Test Logic": 2
      }
    },
    "testEquals": {
      "name": "testEquals",
      "mvn_run": "org.apache.commons.lang3.time.FastDateParserTest#testEquals",
      "smells": {
        "Assertion Roulette": 3
      }
    },
    "testLocaleMatches": {
      "name": "testLocaleMatches",
      "mvn_run": "org.apache.commons.lang3.time.FastDateParserTest#testLocaleMatches",
      "smells": {
        "Assertion Roulette": 1
      }
    },
    "testPatternMatches": {
      "name": "testPatternMatches",
      "mvn_run": "org.apache.commons.lang3.time.FastDateParserTest#testPatternMatches",
      "smells": {
        "Assertion Roulette": 1
      }
    },
    "testTimeZoneMatches": {
      "name": "testTimeZoneMatches",
      "mvn_run": "org.apache.commons.lang3.time.FastDateParserTest#testTimeZoneMatches",
      "smells": {
        "Assertion Roulette": 1
      }
    }
  },
  "org.apache.commons.lang3.time.FastTimeZoneTest": {
    "testGetGmtTimeZone": {
      "name": "testGetGmtTimeZone",
      "mvn_run": "org.apache.commons.lang3.time.FastTimeZoneTest#testGetGmtTimeZone",
      "smells": {
        "Magic Number Test": 1,
        "Lazy Test": 1,
        "Eager Test": 1,
        "Assertion Roulette": 1
      }
    },
    "testZeroOffsetsReturnSingleton": {
      "name": "testZeroOffsetsReturnSingleton",
      "mvn_run": "org.apache.commons.lang3.time.FastTimeZoneTest#testZeroOffsetsReturnSingleton",
      "smells": {
        "Lazy Test": 2,
        "Eager Test": 1,
        "Assertion Roulette": 2
      }
    },
    "testZ": {
      "name": "testZ",
      "mvn_run": "org.apache.commons.lang3.time.FastTimeZoneTest#testZ",
      "smells": {
        "Lazy Test": 2,
        "Eager Test": 1,
        "Assertion Roulette": 1
      }
    },
    "testUTC": {
      "name": "testUTC",
      "mvn_run": "org.apache.commons.lang3.time.FastTimeZoneTest#testUTC",
      "smells": {
        "Lazy Test": 2,
        "Eager Test": 1,
        "Assertion Roulette": 1
      }
    },
    "testOlson": {
      "name": "testOlson",
      "mvn_run": "org.apache.commons.lang3.time.FastTimeZoneTest#testOlson",
      "smells": {
        "Lazy Test": 1,
        "Assertion Roulette": 1
      }
    },
    "testBareGmt": {
      "name": "testBareGmt",
      "mvn_run": "org.apache.commons.lang3.time.FastTimeZoneTest#testBareGmt",
      "smells": {
        "Lazy Test": 2,
        "Eager Test": 1,
        "Assertion Roulette": 1
      }
    },
    "testSign": {
      "name": "testSign",
      "mvn_run": "org.apache.commons.lang3.time.FastTimeZoneTest#testSign",
      "smells": {
        "Lazy Test": 1,
        "Eager Test": 1,
        "Assertion Roulette": 4
      }
    },
    "testHoursMinutes": {
      "name": "testHoursMinutes",
      "mvn_run": "org.apache.commons.lang3.time.FastTimeZoneTest#testHoursMinutes",
      "smells": {
        "Lazy Test": 1,
        "Eager Test": 1,
        "Assertion Roulette": 6
      }
    },
    "testHoursColonMinutes": {
      "name": "testHoursColonMinutes",
      "mvn_run": "org.apache.commons.lang3.time.FastTimeZoneTest#testHoursColonMinutes",
      "smells": {
        "Lazy Test": 1,
        "Eager Test": 1,
        "Assertion Roulette": 6
      }
    },
    "testGmtPrefix": {
      "name": "testGmtPrefix",
      "mvn_run": "org.apache.commons.lang3.time.FastTimeZoneTest#testGmtPrefix",
      "smells": {
        "Lazy Test": 1,
        "Eager Test": 1,
        "Assertion Roulette": 2
      }
    }
  },
  "org.apache.commons.lang3.time.DurationFormatUtilsTest": {
    "testDurationsByBruteForce": {
      "name": "testDurationsByBruteForce",
      "mvn_run": "org.apache.commons.lang3.time.DurationFormatUtilsTest#testDurationsByBruteForce",
      "smells": {
        "Unknown Test": 1
      }
    },
    "testConstructor": {
      "name": "testConstructor",
      "mvn_run": "org.apache.commons.lang3.time.DurationFormatUtilsTest#testConstructor",
      "smells": {
        "Magic Number Test": 1,
        "Assertion Roulette": 5
      }
    },
    "testLANG982": {
      "name": "testLANG982",
      "mvn_run": "org.apache.commons.lang3.time.DurationFormatUtilsTest#testLANG982",
      "smells": {
        "Magic Number Test": 8,
        "Lazy Test": 1,
        "Assertion Roulette": 8
      }
    },
    "testLANG984": {
      "name": "testLANG984",
      "mvn_run": "org.apache.commons.lang3.time.DurationFormatUtilsTest#testLANG984",
      "smells": {
        "Magic Number Test": 1,
        "Sensitive Equality": 3,
        "Lazy Test": 1,
        "Assertion Roulette": 4
      }
    },
    "testLexx": {
      "name": "testLexx",
      "mvn_run": "org.apache.commons.lang3.time.DurationFormatUtilsTest#testLexx",
      "smells": {
        "Magic Number Test": 1,
        "Verbose Test": 1,
        "Assertion Roulette": 7
      }
    },
    "testEdgeDurations": {
      "name": "testEdgeDurations",
      "mvn_run": "org.apache.commons.lang3.time.DurationFormatUtilsTest#testEdgeDurations",
      "smells": {
        "Verbose Test": 1
      }
    },
    "testFormatDuration": {
      "name": "testFormatDuration",
      "mvn_run": "org.apache.commons.lang3.time.DurationFormatUtilsTest#testFormatDuration",
      "smells": {
        "Verbose Test": 1,
        "Lazy Test": 1,
        "Duplicate Assert": 4,
        "Assertion Roulette": 19
      }
    },
    "testFormatDurationPluralWords": {
      "name": "testFormatDurationPluralWords",
      "mvn_run": "org.apache.commons.lang3.time.DurationFormatUtilsTest#testFormatDurationPluralWords",
      "smells": {
        "Verbose Test": 1,
        "Lazy Test": 1,
        "Assertion Roulette": 15
      }
    },
    "testFormatDurationWords": {
      "name": "testFormatDurationWords",
      "mvn_run": "org.apache.commons.lang3.time.DurationFormatUtilsTest#testFormatDurationWords",
      "smells": {
        "Verbose Test": 1,
        "Lazy Test": 1,
        "Duplicate Assert": 7,
        "Assertion Roulette": 26,
        "Conditional Test Logic": 1
      }
    },
    "testFormatPeriod": {
      "name": "testFormatPeriod",
      "mvn_run": "org.apache.commons.lang3.time.DurationFormatUtilsTest#testFormatPeriod",
      "smells": {
        "Verbose Test": 1,
        "Lazy Test": 1,
        "Assertion Roulette": 30
      }
    },
    "testFormatNegativeDurationHMS": {
      "name": "testFormatNegativeDurationHMS",
      "mvn_run": "org.apache.commons.lang3.time.DurationFormatUtilsTest#testFormatNegativeDurationHMS",
      "smells": {
        "Lazy Test": 1
      }
    },
    "testFormatDurationHMS": {
      "name": "testFormatDurationHMS",
      "mvn_run": "org.apache.commons.lang3.time.DurationFormatUtilsTest#testFormatDurationHMS",
      "smells": {
        "Lazy Test": 1,
        "Assertion Roulette": 9
      }
    },
    "testFormatPeriodISOStartGreaterEnd": {
      "name": "testFormatPeriodISOStartGreaterEnd",
      "mvn_run": "org.apache.commons.lang3.time.DurationFormatUtilsTest#testFormatPeriodISOStartGreaterEnd",
      "smells": {
        "Lazy Test": 1
      }
    },
    "testFormatPeriodISOMethod": {
      "name": "testFormatPeriodISOMethod",
      "mvn_run": "org.apache.commons.lang3.time.DurationFormatUtilsTest#testFormatPeriodISOMethod",
      "smells": {
        "Lazy Test": 1,
        "Assertion Roulette": 3
      }
    },
    "testFormatNegativeDuration": {
      "name": "testFormatNegativeDuration",
      "mvn_run": "org.apache.commons.lang3.time.DurationFormatUtilsTest#testFormatNegativeDuration",
      "smells": {
        "Lazy Test": 1
      }
    },
    "testFormatNegativeDurationISO": {
      "name": "testFormatNegativeDurationISO",
      "mvn_run": "org.apache.commons.lang3.time.DurationFormatUtilsTest#testFormatNegativeDurationISO",
      "smells": {
        "Lazy Test": 1
      }
    },
    "testFormatDurationISO": {
      "name": "testFormatDurationISO",
      "mvn_run": "org.apache.commons.lang3.time.DurationFormatUtilsTest#testFormatDurationISO",
      "smells": {
        "Lazy Test": 1,
        "Assertion Roulette": 5
      }
    },
    "testFormatNegativeDurationWords": {
      "name": "testFormatNegativeDurationWords",
      "mvn_run": "org.apache.commons.lang3.time.DurationFormatUtilsTest#testFormatNegativeDurationWords",
      "smells": {
        "Lazy Test": 1
      }
    },
    "testLANG815": {
      "name": "testLANG815",
      "mvn_run": "org.apache.commons.lang3.time.DurationFormatUtilsTest#testLANG815",
      "smells": {
        "Lazy Test": 1,
        "Assertion Roulette": 1
      }
    },
    "testFormatPeriodISO": {
      "name": "testFormatPeriodISO",
      "mvn_run": "org.apache.commons.lang3.time.DurationFormatUtilsTest#testFormatPeriodISO",
      "smells": {
        "Lazy Test": 1,
        "Assertion Roulette": 3
      }
    },
    "testFormatPeriodeStartGreaterEnd": {
      "name": "testFormatPeriodeStartGreaterEnd",
      "mvn_run": "org.apache.commons.lang3.time.DurationFormatUtilsTest#testFormatPeriodeStartGreaterEnd",
      "smells": {
        "Lazy Test": 1
      }
    },
    "testLowDurations": {
      "name": "testLowDurations",
      "mvn_run": "org.apache.commons.lang3.time.DurationFormatUtilsTest#testLowDurations",
      "smells": {
        "Conditional Test Logic": 3
      }
    }
  },
  "org.apache.commons.lang3.time.FastDatePrinterTest": {
    "testAppendableOptions": {
      "name": "testAppendableOptions",
      "mvn_run": "org.apache.commons.lang3.time.FastDatePrinterTest#testAppendableOptions",
      "smells": {
        "Sensitive Equality": 2,
        "Lazy Test": 2,
        "Eager Test": 1,
        "Assertion Roulette": 2
      }
    },
    "testStringBufferOptions": {
      "name": "testStringBufferOptions",
      "mvn_run": "org.apache.commons.lang3.time.FastDatePrinterTest#testStringBufferOptions",
      "smells": {
        "Sensitive Equality": 5,
        "Lazy Test": 2,
        "Eager Test": 1,
        "Assertion Roulette": 5
      }
    },
    "testToStringContainsName": {
      "name": "testToStringContainsName",
      "mvn_run": "org.apache.commons.lang3.time.FastDatePrinterTest#testToStringContainsName",
      "smells": {
        "Sensitive Equality": 1,
        "Lazy Test": 1,
        "Assertion Roulette": 1
      }
    },
    "testFormat": {
      "name": "testFormat",
      "mvn_run": "org.apache.commons.lang3.time.FastDatePrinterTest#testFormat",
      "smells": {
        "Verbose Test": 1,
        "Lazy Test": 1,
        "Assertion Roulette": 21
      }
    },
    "testWeekYear": {
      "name": "testWeekYear",
      "mvn_run": "org.apache.commons.lang3.time.FastDatePrinterTest#testWeekYear",
      "smells": {
        "Lazy Test": 1,
        "Assertion Roulette": 4
      }
    },
    "testTimeZoneAsZ": {
      "name": "testTimeZoneAsZ",
      "mvn_run": "org.apache.commons.lang3.time.FastDatePrinterTest#testTimeZoneAsZ",
      "smells": {
        "Lazy Test": 1,
        "Assertion Roulette": 3
      }
    },
    "testSimpleDate": {
      "name": "testSimpleDate",
      "mvn_run": "org.apache.commons.lang3.time.FastDatePrinterTest#testSimpleDate",
      "smells": {
        "Lazy Test": 1,
        "Assertion Roulette": 3
      }
    },
    "testShortDateStyleWithLocales": {
      "name": "testShortDateStyleWithLocales",
      "mvn_run": "org.apache.commons.lang3.time.FastDatePrinterTest#testShortDateStyleWithLocales",
      "smells": {
        "Lazy Test": 1,
        "Assertion Roulette": 2
      }
    },
    "testMilleniumBug": {
      "name": "testMilleniumBug",
      "mvn_run": "org.apache.commons.lang3.time.FastDatePrinterTest#testMilleniumBug",
      "smells": {
        "Lazy Test": 1,
        "Assertion Roulette": 1
      }
    },
    "testLowYearPadding": {
      "name": "testLowYearPadding",
      "mvn_run": "org.apache.commons.lang3.time.FastDatePrinterTest#testLowYearPadding",
      "smells": {
        "Lazy Test": 1,
        "Assertion Roulette": 4
      }
    },
    "testLang916": {
      "name": "testLang916",
      "mvn_run": "org.apache.commons.lang3.time.FastDatePrinterTest#testLang916",
      "smells": {
        "Lazy Test": 1
      }
    },
    "testLang645": {
      "name": "testLang645",
      "mvn_run": "org.apache.commons.lang3.time.FastDatePrinterTest#testLang645",
      "smells": {
        "Lazy Test": 1,
        "Assertion Roulette": 1
      }
    },
    "testLang538": {
      "name": "testLang538",
      "mvn_run": "org.apache.commons.lang3.time.FastDatePrinterTest#testLang538",
      "smells": {
        "Lazy Test": 1
      }
    },
    "testLang303": {
      "name": "testLang303",
      "mvn_run": "org.apache.commons.lang3.time.FastDatePrinterTest#testLang303",
      "smells": {
        "Lazy Test": 1,
        "Assertion Roulette": 1
      }
    },
    "testLang1103": {
      "name": "testLang1103",
      "mvn_run": "org.apache.commons.lang3.time.FastDatePrinterTest#testLang1103",
      "smells": {
        "Lazy Test": 1,
        "Assertion Roulette": 5
      }
    },
    "testHourFormats": {
      "name": "testHourFormats",
      "mvn_run": "org.apache.commons.lang3.time.FastDatePrinterTest#testHourFormats",
      "smells": {
        "Lazy Test": 1,
        "Assertion Roulette": 3
      }
    },
    "testDayNumberOfWeek": {
      "name": "testDayNumberOfWeek",
      "mvn_run": "org.apache.commons.lang3.time.FastDatePrinterTest#testDayNumberOfWeek",
      "smells": {
        "Lazy Test": 1,
        "Assertion Roulette": 3
      }
    },
    "test1806": {
      "name": "test1806",
      "mvn_run": "org.apache.commons.lang3.time.FastDatePrinterTest#test1806",
      "smells": {
        "Lazy Test": 1,
        "Assertion Roulette": 3,
        "Conditional Test Logic": 1
      }
    },
    "testEquals": {
      "name": "testEquals",
      "mvn_run": "org.apache.commons.lang3.time.FastDatePrinterTest#testEquals",
      "smells": {
        "Assertion Roulette": 3
      }
    },
    "testLocaleMatches": {
      "name": "testLocaleMatches",
      "mvn_run": "org.apache.commons.lang3.time.FastDatePrinterTest#testLocaleMatches",
      "smells": {
        "Assertion Roulette": 1
      }
    },
    "testPatternMatches": {
      "name": "testPatternMatches",
      "mvn_run": "org.apache.commons.lang3.time.FastDatePrinterTest#testPatternMatches",
      "smells": {
        "Assertion Roulette": 1
      }
    },
    "testTimeZoneMatches": {
      "name": "testTimeZoneMatches",
      "mvn_run": "org.apache.commons.lang3.time.FastDatePrinterTest#testTimeZoneMatches",
      "smells": {
        "Assertion Roulette": 1
      }
    }
  },
  "org.apache.commons.lang3.time.StopWatchTest": {
    "testStopWatchSimple": {
      "name": "testStopWatchSimple",
      "mvn_run": "org.apache.commons.lang3.time.StopWatchTest#testStopWatchSimple",
      "smells": {
        "Magic Number Test": 3,
        "Lazy Test": 4,
        "Eager Test": 1,
        "Assertion Roulette": 4
      }
    },
    "testStopWatchSimpleGet": {
      "name": "testStopWatchSimpleGet",
      "mvn_run": "org.apache.commons.lang3.time.StopWatchTest#testStopWatchSimpleGet",
      "smells": {
        "Magic Number Test": 2,
        "Sensitive Equality": 1,
        "Lazy Test": 4,
        "Eager Test": 1,
        "Assertion Roulette": 3
      }
    },
    "testStopWatchSplit": {
      "name": "testStopWatchSplit",
      "mvn_run": "org.apache.commons.lang3.time.StopWatchTest#testStopWatchSplit",
      "smells": {
        "Magic Number Test": 5,
        "Lazy Test": 5,
        "Eager Test": 1,
        "Assertion Roulette": 5
      }
    },
    "testStopWatchSuspend": {
      "name": "testStopWatchSuspend",
      "mvn_run": "org.apache.commons.lang3.time.StopWatchTest#testStopWatchSuspend",
      "smells": {
        "Magic Number Test": 4,
        "Lazy Test": 5,
        "Eager Test": 1,
        "Assertion Roulette": 6
      }
    },
    "testToSplitString": {
      "name": "testToSplitString",
      "mvn_run": "org.apache.commons.lang3.time.StopWatchTest#testToSplitString",
      "smells": {
        "Magic Number Test": 1,
        "Lazy Test": 3,
        "Eager Test": 1,
        "Assertion Roulette": 1
      }
    },
    "testToSplitStringWithMessage": {
      "name": "testToSplitStringWithMessage",
      "mvn_run": "org.apache.commons.lang3.time.StopWatchTest#testToSplitStringWithMessage",
      "smells": {
        "Magic Number Test": 1,
        "Lazy Test": 4,
        "Eager Test": 1,
        "Assertion Roulette": 1
      }
    },
    "testToString": {
      "name": "testToString",
      "mvn_run": "org.apache.commons.lang3.time.StopWatchTest#testToString",
      "smells": {
        "Magic Number Test": 1,
        "Lazy Test": 3,
        "Eager Test": 1,
        "Assertion Roulette": 1
      }
    },
    "testToStringWithMessage": {
      "name": "testToStringWithMessage",
      "mvn_run": "org.apache.commons.lang3.time.StopWatchTest#testToStringWithMessage",
      "smells": {
        "Magic Number Test": 1,
        "Sensitive Equality": 1,
        "Lazy Test": 4,
        "Eager Test": 1,
        "Assertion Roulette": 2
      }
    },
    "testMessage": {
      "name": "testMessage",
      "mvn_run": "org.apache.commons.lang3.time.StopWatchTest#testMessage",
      "smells": {
        "Sensitive Equality": 1,
        "Lazy Test": 6,
        "Eager Test": 1,
        "Assertion Roulette": 4
      }
    },
    "testBadStates": {
      "name": "testBadStates",
      "mvn_run": "org.apache.commons.lang3.time.StopWatchTest#testBadStates",
      "smells": {
        "Verbose Test": 1,
        "Lazy Test": 3,
        "Duplicate Assert": 2,
        "Eager Test": 1
      }
    },
    "testLang315": {
      "name": "testLang315",
      "mvn_run": "org.apache.commons.lang3.time.StopWatchTest#testLang315",
      "smells": {
        "Lazy Test": 4,
        "Eager Test": 1,
        "Assertion Roulette": 1
      }
    },
    "testBooleanStates": {
      "name": "testBooleanStates",
      "mvn_run": "org.apache.commons.lang3.time.StopWatchTest#testBooleanStates",
      "smells": {
        "Lazy Test": 5,
        "Duplicate Assert": 5,
        "Eager Test": 1,
        "Assertion Roulette": 12
      }
    },
    "testStopWatchGetWithTimeUnit": {
      "name": "testStopWatchGetWithTimeUnit",
      "mvn_run": "org.apache.commons.lang3.time.StopWatchTest#testStopWatchGetWithTimeUnit",
      "smells": {
        "Lazy Test": 1,
        "Assertion Roulette": 4
      }
    },
    "testGetStartTime": {
      "name": "testGetStartTime",
      "mvn_run": "org.apache.commons.lang3.time.StopWatchTest#testGetStartTime",
      "smells": {
        "Lazy Test": 3,
        "Eager Test": 1,
        "Assertion Roulette": 1
      }
    },
    "testFormatSplitTimeWithMessage": {
      "name": "testFormatSplitTimeWithMessage",
      "mvn_run": "org.apache.commons.lang3.time.StopWatchTest#testFormatSplitTimeWithMessage",
      "smells": {
        "Lazy Test": 4,
        "Eager Test": 1,
        "Assertion Roulette": 1
      }
    },
    "testFormatTimeWithMessage": {
      "name": "testFormatTimeWithMessage",
      "mvn_run": "org.apache.commons.lang3.time.StopWatchTest#testFormatTimeWithMessage",
      "smells": {
        "Lazy Test": 2,
        "Eager Test": 1
      }
    },
    "testFormatTime": {
      "name": "testFormatTime",
      "mvn_run": "org.apache.commons.lang3.time.StopWatchTest#testFormatTime",
      "smells": {
        "Lazy Test": 2,
        "Eager Test": 1,
        "Assertion Roulette": 2
      }
    },
    "testStopWatchStatic": {
      "name": "testStopWatchStatic",
      "mvn_run": "org.apache.commons.lang3.time.StopWatchTest#testStopWatchStatic",
      "smells": {
        "Lazy Test": 2,
        "Eager Test": 1,
        "Assertion Roulette": 1
      }
    },
    "testFormatSplitTime": {
      "name": "testFormatSplitTime",
      "mvn_run": "org.apache.commons.lang3.time.StopWatchTest#testFormatSplitTime",
      "smells": {
        "Lazy Test": 3,
        "Eager Test": 1,
        "Assertion Roulette": 2
      }
    },
    "testStopTimeSimple": {
      "name": "testStopTimeSimple",
      "mvn_run": "org.apache.commons.lang3.time.StopWatchTest#testStopTimeSimple",
      "smells": {
        "Lazy Test": 3,
        "Eager Test": 1,
        "Assertion Roulette": 3
      }
    }
  },
  "org.apache.commons.lang3.time.FastDateFormatTest": {
    "testLANG_1267": {
      "name": "testLANG_1267",
      "mvn_run": "org.apache.commons.lang3.time.FastDateFormatTest#testLANG_1267",
      "smells": {
        "Unknown Test": 1,
        "Lazy Test": 1
      }
    },
    "testLANG_954": {
      "name": "testLANG_954",
      "mvn_run": "org.apache.commons.lang3.time.FastDateFormatTest#testLANG_954",
      "smells": {
        "Unknown Test": 1,
        "Lazy Test": 1
      }
    },
    "testParseSync": {
      "name": "testParseSync",
      "mvn_run": "org.apache.commons.lang3.time.FastDateFormatTest#testParseSync",
      "smells": {
        "Unknown Test": 1,
        "Lazy Test": 1
      }
    },
    "testTimeDateDefaults": {
      "name": "testTimeDateDefaults",
      "mvn_run": "org.apache.commons.lang3.time.FastDateFormatTest#testTimeDateDefaults",
      "smells": {
        "Lazy Test": 1,
        "Assertion Roulette": 3
      }
    },
    "testCheckDifferingStyles": {
      "name": "testCheckDifferingStyles",
      "mvn_run": "org.apache.commons.lang3.time.FastDateFormatTest#testCheckDifferingStyles",
      "smells": {
        "Lazy Test": 1,
        "Assertion Roulette": 6
      }
    },
    "testCheckDefaults": {
      "name": "testCheckDefaults",
      "mvn_run": "org.apache.commons.lang3.time.FastDateFormatTest#testCheckDefaults",
      "smells": {
        "Lazy Test": 5,
        "Eager Test": 1,
        "Assertion Roulette": 4
      }
    },
    "test_changeDefault_Locale_DateTimeInstance": {
      "name": "test_changeDefault_Locale_DateTimeInstance",
      "mvn_run": "org.apache.commons.lang3.time.FastDateFormatTest#test_changeDefault_Locale_DateTimeInstance",
      "smells": {
        "Lazy Test": 2,
        "Eager Test": 1,
        "Assertion Roulette": 5
      }
    },
    "test_getInstance_String_TimeZone_Locale": {
      "name": "test_getInstance_String_TimeZone_Locale",
      "mvn_run": "org.apache.commons.lang3.time.FastDateFormatTest#test_getInstance_String_TimeZone_Locale",
      "smells": {
        "Lazy Test": 3,
        "Eager Test": 1,
        "Assertion Roulette": 7
      }
    },
    "test_getInstance_String_TimeZone": {
      "name": "test_getInstance_String_TimeZone",
      "mvn_run": "org.apache.commons.lang3.time.FastDateFormatTest#test_getInstance_String_TimeZone",
      "smells": {
        "Lazy Test": 2,
        "Eager Test": 1,
        "Assertion Roulette": 6
      }
    },
    "test_getInstance_String": {
      "name": "test_getInstance_String",
      "mvn_run": "org.apache.commons.lang3.time.FastDateFormatTest#test_getInstance_String",
      "smells": {
        "Lazy Test": 3,
        "Eager Test": 1,
        "Assertion Roulette": 5
      }
    },
    "testStandaloneLongMonthForm": {
      "name": "testStandaloneLongMonthForm",
      "mvn_run": "org.apache.commons.lang3.time.FastDateFormatTest#testStandaloneLongMonthForm",
      "smells": {
        "Lazy Test": 2,
        "Eager Test": 1,
        "Assertion Roulette": 3
      }
    },
    "testStandaloneShortMonthForm": {
      "name": "testStandaloneShortMonthForm",
      "mvn_run": "org.apache.commons.lang3.time.FastDateFormatTest#testStandaloneShortMonthForm",
      "smells": {
        "Lazy Test": 2,
        "Eager Test": 1,
        "Assertion Roulette": 3
      }
    },
    "testLANG_1152": {
      "name": "testLANG_1152",
      "mvn_run": "org.apache.commons.lang3.time.FastDateFormatTest#testLANG_1152",
      "smells": {
        "Lazy Test": 2,
        "Eager Test": 1,
        "Assertion Roulette": 2
      }
    },
    "test_getInstance_String_Locale": {
      "name": "test_getInstance_String_Locale",
      "mvn_run": "org.apache.commons.lang3.time.FastDateFormatTest#test_getInstance_String_Locale",
      "smells": {
        "Lazy Test": 2,
        "Eager Test": 1,
        "Assertion Roulette": 3
      }
    },
    "test_getInstance": {
      "name": "test_getInstance",
      "mvn_run": "org.apache.commons.lang3.time.FastDateFormatTest#test_getInstance",
      "smells": {
        "Lazy Test": 1,
        "Assertion Roulette": 1
      }
    },
    "test_changeDefault_Locale_DateInstance": {
      "name": "test_changeDefault_Locale_DateInstance",
      "mvn_run": "org.apache.commons.lang3.time.FastDateFormatTest#test_changeDefault_Locale_DateInstance",
      "smells": {
        "Lazy Test": 2,
        "Eager Test": 1,
        "Assertion Roulette": 5
      }
    },
    "testDateDefaults": {
      "name": "testDateDefaults",
      "mvn_run": "org.apache.commons.lang3.time.FastDateFormatTest#testDateDefaults",
      "smells": {
        "Lazy Test": 1,
        "Assertion Roulette": 3
      }
    },
    "testTimeDefaults": {
      "name": "testTimeDefaults",
      "mvn_run": "org.apache.commons.lang3.time.FastDateFormatTest#testTimeDefaults",
      "smells": {
        "Assertion Roulette": 3
      }
    }
  },
  "org.apache.commons.lang3.time.DateUtilsTest": {
    "testLANG799": {
      "name": "testLANG799",
      "mvn_run": "org.apache.commons.lang3.time.DateUtilsTest#testLANG799",
      "smells": {
        "Unknown Test": 1,
        "Lazy Test": 1
      }
    },
    "testLANG799_DE_OK": {
      "name": "testLANG799_DE_OK",
      "mvn_run": "org.apache.commons.lang3.time.DateUtilsTest#testLANG799_DE_OK",
      "smells": {
        "Unknown Test": 1,
        "Lazy Test": 2,
        "Eager Test": 1
      }
    },
    "testLANG799_EN_OK": {
      "name": "testLANG799_EN_OK",
      "mvn_run": "org.apache.commons.lang3.time.DateUtilsTest#testLANG799_EN_OK",
      "smells": {
        "Unknown Test": 1,
        "Lazy Test": 2,
        "Eager Test": 1
      }
    },
    "testLANG799_EN_WITH_DE_LOCALE": {
      "name": "testLANG799_EN_WITH_DE_LOCALE",
      "mvn_run": "org.apache.commons.lang3.time.DateUtilsTest#testLANG799_EN_WITH_DE_LOCALE",
      "smells": {
        "Unknown Test": 1,
        "Lazy Test": 1
      }
    },
    "testAddDays": {
      "name": "testAddDays",
      "mvn_run": "org.apache.commons.lang3.time.DateUtilsTest#testAddDays",
      "smells": {
        "Magic Number Test": 6,
        "Duplicate Assert": 2,
        "Assertion Roulette": 3
      }
    },
    "testAddHours": {
      "name": "testAddHours",
      "mvn_run": "org.apache.commons.lang3.time.DateUtilsTest#testAddHours",
      "smells": {
        "Magic Number Test": 6,
        "Duplicate Assert": 2,
        "Assertion Roulette": 3
      }
    },
    "testAddMilliseconds": {
      "name": "testAddMilliseconds",
      "mvn_run": "org.apache.commons.lang3.time.DateUtilsTest#testAddMilliseconds",
      "smells": {
        "Magic Number Test": 6,
        "Duplicate Assert": 2,
        "Assertion Roulette": 3
      }
    },
    "testAddMinutes": {
      "name": "testAddMinutes",
      "mvn_run": "org.apache.commons.lang3.time.DateUtilsTest#testAddMinutes",
      "smells": {
        "Magic Number Test": 6,
        "Duplicate Assert": 2,
        "Assertion Roulette": 3
      }
    },
    "testAddMonths": {
      "name": "testAddMonths",
      "mvn_run": "org.apache.commons.lang3.time.DateUtilsTest#testAddMonths",
      "smells": {
        "Magic Number Test": 6,
        "Lazy Test": 1,
        "Duplicate Assert": 2,
        "Assertion Roulette": 3
      }
    },
    "testAddSeconds": {
      "name": "testAddSeconds",
      "mvn_run": "org.apache.commons.lang3.time.DateUtilsTest#testAddSeconds",
      "smells": {
        "Magic Number Test": 6,
        "Duplicate Assert": 2,
        "Assertion Roulette": 3
      }
    },
    "testAddWeeks": {
      "name": "testAddWeeks",
      "mvn_run": "org.apache.commons.lang3.time.DateUtilsTest#testAddWeeks",
      "smells": {
        "Magic Number Test": 6,
        "Lazy Test": 1,
        "Duplicate Assert": 2,
        "Eager Test": 1,
        "Assertion Roulette": 3
      }
    },
    "testAddYears": {
      "name": "testAddYears",
      "mvn_run": "org.apache.commons.lang3.time.DateUtilsTest#testAddYears",
      "smells": {
        "Magic Number Test": 6,
        "Duplicate Assert": 2,
        "Assertion Roulette": 3
      }
    },
    "testCeil": {
      "name": "testCeil",
      "mvn_run": "org.apache.commons.lang3.time.DateUtilsTest#testCeil",
      "smells": {
        "Magic Number Test": 1,
        "Verbose Test": 1,
        "Duplicate Assert": 1,
        "Assertion Roulette": 61,
        "Exception Catching Throwing": 1
      }
    },
    "testConstructor": {
      "name": "testConstructor",
      "mvn_run": "org.apache.commons.lang3.time.DateUtilsTest#testConstructor",
      "smells": {
        "Magic Number Test": 1,
        "Assertion Roulette": 5
      }
    },
    "testLang530": {
      "name": "testLang530",
      "mvn_run": "org.apache.commons.lang3.time.DateUtilsTest#testLang530",
      "smells": {
        "Magic Number Test": 1,
        "Lazy Test": 1,
        "Assertion Roulette": 1
      }
    },
    "testSetDays": {
      "name": "testSetDays",
      "mvn_run": "org.apache.commons.lang3.time.DateUtilsTest#testSetDays",
      "smells": {
        "Magic Number Test": 4,
        "Duplicate Assert": 2,
        "Assertion Roulette": 2
      }
    },
    "testSetHours": {
      "name": "testSetHours",
      "mvn_run": "org.apache.commons.lang3.time.DateUtilsTest#testSetHours",
      "smells": {
        "Magic Number Test": 4,
        "Duplicate Assert": 2,
        "Assertion Roulette": 2
      }
    },
    "testSetMilliseconds": {
      "name": "testSetMilliseconds",
      "mvn_run": "org.apache.commons.lang3.time.DateUtilsTest#testSetMilliseconds",
      "smells": {
        "Magic Number Test": 4,
        "Duplicate Assert": 2,
        "Assertion Roulette": 2
      }
    },
    "testSetMinutes": {
      "name": "testSetMinutes",
      "mvn_run": "org.apache.commons.lang3.time.DateUtilsTest#testSetMinutes",
      "smells": {
        "Magic Number Test": 4,
        "Duplicate Assert": 2,
        "Assertion Roulette": 2
      }
    },
    "testSetMonths": {
      "name": "testSetMonths",
      "mvn_run": "org.apache.commons.lang3.time.DateUtilsTest#testSetMonths",
      "smells": {
        "Magic Number Test": 6,
        "Duplicate Assert": 2,
        "Assertion Roulette": 3
      }
    },
    "testSetSeconds": {
      "name": "testSetSeconds",
      "mvn_run": "org.apache.commons.lang3.time.DateUtilsTest#testSetSeconds",
      "smells": {
        "Magic Number Test": 4,
        "Duplicate Assert": 2,
        "Assertion Roulette": 2
      }
    },
    "testSetYears": {
      "name": "testSetYears",
      "mvn_run": "org.apache.commons.lang3.time.DateUtilsTest#testSetYears",
      "smells": {
        "Magic Number Test": 6,
        "Duplicate Assert": 2,
        "Assertion Roulette": 3
      }
    },
    "testTruncate": {
      "name": "testTruncate",
      "mvn_run": "org.apache.commons.lang3.time.DateUtilsTest#testTruncate",
      "smells": {
        "Magic Number Test": 1,
        "Verbose Test": 1,
        "Lazy Test": 1,
        "Duplicate Assert": 1,
        "Assertion Roulette": 47,
        "Exception Catching Throwing": 1
      }
    },
    "testRound": {
      "name": "testRound",
      "mvn_run": "org.apache.commons.lang3.time.DateUtilsTest#testRound",
      "smells": {
        "Verbose Test": 1,
        "Lazy Test": 1,
        "Assertion Roulette": 59,
        "Exception Catching Throwing": 1
      }
    },
    "testRoundLang346": {
      "name": "testRoundLang346",
      "mvn_run": "org.apache.commons.lang3.time.DateUtilsTest#testRoundLang346",
      "smells": {
        "Verbose Test": 1,
        "Lazy Test": 1,
        "Assertion Roulette": 8
      }
    },
    "testTruncateLang59": {
      "name": "testTruncateLang59",
      "mvn_run": "org.apache.commons.lang3.time.DateUtilsTest#testTruncateLang59",
      "smells": {
        "Verbose Test": 1,
        "Lazy Test": 2,
        "Eager Test": 1,
        "Assertion Roulette": 13,
        "Exception Catching Throwing": 1
      }
    },
    "testWeekIterator": {
      "name": "testWeekIterator",
      "mvn_run": "org.apache.commons.lang3.time.DateUtilsTest#testWeekIterator",
      "smells": {
        "Verbose Test": 1,
        "Lazy Test": 2,
        "Duplicate Assert": 1,
        "Eager Test": 1,
        "Conditional Test Logic": 2
      }
    },
    "testMonthIterator": {
      "name": "testMonthIterator",
      "mvn_run": "org.apache.commons.lang3.time.DateUtilsTest#testMonthIterator",
      "smells": {
        "Lazy Test": 1
      }
    },
    "testIteratorEx": {
      "name": "testIteratorEx",
      "mvn_run": "org.apache.commons.lang3.time.DateUtilsTest#testIteratorEx",
      "smells": {
        "Lazy Test": 1
      }
    },
    "testIsSameDay_DateNullNull": {
      "name": "testIsSameDay_DateNullNull",
      "mvn_run": "org.apache.commons.lang3.time.DateUtilsTest#testIsSameDay_DateNullNull",
      "smells": {
        "Lazy Test": 1
      }
    },
    "testIsSameDay_DateNullNotNull": {
      "name": "testIsSameDay_DateNullNotNull",
      "mvn_run": "org.apache.commons.lang3.time.DateUtilsTest#testIsSameDay_DateNullNotNull",
      "smells": {
        "Lazy Test": 1
      }
    },
    "testIsSameDay_DateNotNullNull": {
      "name": "testIsSameDay_DateNotNullNull",
      "mvn_run": "org.apache.commons.lang3.time.DateUtilsTest#testIsSameDay_DateNotNullNull",
      "smells": {
        "Lazy Test": 1
      }
    },
    "testIsSameDay_Date": {
      "name": "testIsSameDay_Date",
      "mvn_run": "org.apache.commons.lang3.time.DateUtilsTest#testIsSameDay_Date",
      "smells": {
        "Lazy Test": 1,
        "Duplicate Assert": 2,
        "Assertion Roulette": 4
      }
    },
    "testIsSameDay_CalNullNull": {
      "name": "testIsSameDay_CalNullNull",
      "mvn_run": "org.apache.commons.lang3.time.DateUtilsTest#testIsSameDay_CalNullNull",
      "smells": {
        "Lazy Test": 1
      }
    },
    "testIsSameDay_CalNullNotNull": {
      "name": "testIsSameDay_CalNullNotNull",
      "mvn_run": "org.apache.commons.lang3.time.DateUtilsTest#testIsSameDay_CalNullNotNull",
      "smells": {
        "Lazy Test": 1
      }
    },
    "testIsSameDay_CalNotNullNull": {
      "name": "testIsSameDay_CalNotNullNull",
      "mvn_run": "org.apache.commons.lang3.time.DateUtilsTest#testIsSameDay_CalNotNullNull",
      "smells": {
        "Lazy Test": 1
      }
    },
    "testIsSameDay_Cal": {
      "name": "testIsSameDay_Cal",
      "mvn_run": "org.apache.commons.lang3.time.DateUtilsTest#testIsSameDay_Cal",
      "smells": {
        "Lazy Test": 1,
        "Duplicate Assert": 2,
        "Assertion Roulette": 4
      }
    },
    "testParseDateWithLeniency": {
      "name": "testParseDateWithLeniency",
      "mvn_run": "org.apache.commons.lang3.time.DateUtilsTest#testParseDateWithLeniency",
      "smells": {
        "Lazy Test": 2,
        "Eager Test": 1,
        "Assertion Roulette": 1
      }
    },
    "testIsSameLocalTime_CalNullNull": {
      "name": "testIsSameLocalTime_CalNullNull",
      "mvn_run": "org.apache.commons.lang3.time.DateUtilsTest#testIsSameLocalTime_CalNullNull",
      "smells": {
        "Lazy Test": 1
      }
    },
    "testIsSameLocalTime_CalNullNotNull": {
      "name": "testIsSameLocalTime_CalNullNotNull",
      "mvn_run": "org.apache.commons.lang3.time.DateUtilsTest#testIsSameLocalTime_CalNullNotNull",
      "smells": {
        "Lazy Test": 1
      }
    },
    "testIsSameLocalTime_CalNotNullNull": {
      "name": "testIsSameLocalTime_CalNotNullNull",
      "mvn_run": "org.apache.commons.lang3.time.DateUtilsTest#testIsSameLocalTime_CalNotNullNull",
      "smells": {
        "Lazy Test": 1
      }
    },
    "testIsSameLocalTime_Cal": {
      "name": "testIsSameLocalTime_Cal",
      "mvn_run": "org.apache.commons.lang3.time.DateUtilsTest#testIsSameLocalTime_Cal",
      "smells": {
        "Lazy Test": 1,
        "Assertion Roulette": 2
      }
    },
    "testIsSameInstant_DateNullNull": {
      "name": "testIsSameInstant_DateNullNull",
      "mvn_run": "org.apache.commons.lang3.time.DateUtilsTest#testIsSameInstant_DateNullNull",
      "smells": {
        "Lazy Test": 1
      }
    },
    "testIsSameInstant_DateNullNotNull": {
      "name": "testIsSameInstant_DateNullNotNull",
      "mvn_run": "org.apache.commons.lang3.time.DateUtilsTest#testIsSameInstant_DateNullNotNull",
      "smells": {
        "Lazy Test": 1
      }
    },
    "testIsSameInstant_DateNotNullNull": {
      "name": "testIsSameInstant_DateNotNullNull",
      "mvn_run": "org.apache.commons.lang3.time.DateUtilsTest#testIsSameInstant_DateNotNullNull",
      "smells": {
        "Lazy Test": 1
      }
    },
    "testIsSameInstant_Date": {
      "name": "testIsSameInstant_Date",
      "mvn_run": "org.apache.commons.lang3.time.DateUtilsTest#testIsSameInstant_Date",
      "smells": {
        "Lazy Test": 1,
        "Duplicate Assert": 2,
        "Assertion Roulette": 4
      }
    },
    "testIsSameInstant_CalNullNull": {
      "name": "testIsSameInstant_CalNullNull",
      "mvn_run": "org.apache.commons.lang3.time.DateUtilsTest#testIsSameInstant_CalNullNull",
      "smells": {
        "Lazy Test": 1
      }
    },
    "testIsSameInstant_CalNullNotNull": {
      "name": "testIsSameInstant_CalNullNotNull",
      "mvn_run": "org.apache.commons.lang3.time.DateUtilsTest#testIsSameInstant_CalNullNotNull",
      "smells": {
        "Lazy Test": 1
      }
    },
    "testIsSameInstant_CalNotNullNull": {
      "name": "testIsSameInstant_CalNotNullNull",
      "mvn_run": "org.apache.commons.lang3.time.DateUtilsTest#testIsSameInstant_CalNotNullNull",
      "smells": {
        "Lazy Test": 1
      }
    },
    "testIsSameInstant_Cal": {
      "name": "testIsSameInstant_Cal",
      "mvn_run": "org.apache.commons.lang3.time.DateUtilsTest#testIsSameInstant_Cal",
      "smells": {
        "Lazy Test": 1,
        "Assertion Roulette": 2
      }
    },
    "testParseDate_Null": {
      "name": "testParseDate_Null",
      "mvn_run": "org.apache.commons.lang3.time.DateUtilsTest#testParseDate_Null",
      "smells": {
        "Lazy Test": 1
      }
    },
    "testParseDate_NoDateString": {
      "name": "testParseDate_NoDateString",
      "mvn_run": "org.apache.commons.lang3.time.DateUtilsTest#testParseDate_NoDateString",
      "smells": {
        "Lazy Test": 1
      }
    },
    "testParseDate_InvalidDateString": {
      "name": "testParseDate_InvalidDateString",
      "mvn_run": "org.apache.commons.lang3.time.DateUtilsTest#testParseDate_InvalidDateString",
      "smells": {
        "Lazy Test": 1
      }
    },
    "testParseDate": {
      "name": "testParseDate",
      "mvn_run": "org.apache.commons.lang3.time.DateUtilsTest#testParseDate",
      "smells": {
        "Lazy Test": 1,
        "Duplicate Assert": 1,
        "Assertion Roulette": 3
      }
    },
    "testParse_NullParsers": {
      "name": "testParse_NullParsers",
      "mvn_run": "org.apache.commons.lang3.time.DateUtilsTest#testParse_NullParsers",
      "smells": {
        "Lazy Test": 1
      }
    },
    "testLANG799_EN_FAIL": {
      "name": "testLANG799_EN_FAIL",
      "mvn_run": "org.apache.commons.lang3.time.DateUtilsTest#testLANG799_EN_FAIL",
      "smells": {
        "Lazy Test": 1
      }
    },
    "testLANG799_DE_FAIL": {
      "name": "testLANG799_DE_FAIL",
      "mvn_run": "org.apache.commons.lang3.time.DateUtilsTest#testLANG799_DE_FAIL",
      "smells": {
        "Lazy Test": 1
      }
    },
    "testToCalendarWithTimeZoneNull": {
      "name": "testToCalendarWithTimeZoneNull",
      "mvn_run": "org.apache.commons.lang3.time.DateUtilsTest#testToCalendarWithTimeZoneNull",
      "smells": {
        "Lazy Test": 1
      }
    },
    "testToCalendarWithDateNull": {
      "name": "testToCalendarWithDateNull",
      "mvn_run": "org.apache.commons.lang3.time.DateUtilsTest#testToCalendarWithDateNull",
      "smells": {
        "Lazy Test": 1
      }
    },
    "testToCalendarWithDateAndTimeZoneNull": {
      "name": "testToCalendarWithDateAndTimeZoneNull",
      "mvn_run": "org.apache.commons.lang3.time.DateUtilsTest#testToCalendarWithDateAndTimeZoneNull",
      "smells": {
        "Lazy Test": 1
      }
    },
    "testToCalendarWithDateAndTimeZoneNotNull": {
      "name": "testToCalendarWithDateAndTimeZoneNotNull",
      "mvn_run": "org.apache.commons.lang3.time.DateUtilsTest#testToCalendarWithDateAndTimeZoneNotNull",
      "smells": {
        "Lazy Test": 1,
        "Assertion Roulette": 2
      }
    },
    "testToCalendar": {
      "name": "testToCalendar",
      "mvn_run": "org.apache.commons.lang3.time.DateUtilsTest#testToCalendar",
      "smells": {
        "Lazy Test": 1,
        "Assertion Roulette": 1
      }
    },
    "setUp": {
      "name": "setUp",
      "mvn_run": "org.apache.commons.lang3.time.DateUtilsTest#setUp",
      "smells": {
        "General Fixture": 17
      }
    }
  },
  "org.apache.commons.lang3.time.GmtTimeZoneTest": {
    "getOffset": {
      "name": "getOffset",
      "mvn_run": "org.apache.commons.lang3.time.GmtTimeZoneTest#getOffset",
      "smells": {
        "Magic Number Test": 1,
        "Lazy Test": 1,
        "Assertion Roulette": 1
      }
    },
    "getRawOffset": {
      "name": "getRawOffset",
      "mvn_run": "org.apache.commons.lang3.time.GmtTimeZoneTest#getRawOffset",
      "smells": {
        "Magic Number Test": 1,
        "Lazy Test": 2,
        "Eager Test": 1,
        "Assertion Roulette": 1
      }
    },
    "hoursInRange": {
      "name": "hoursInRange",
      "mvn_run": "org.apache.commons.lang3.time.GmtTimeZoneTest#hoursInRange",
      "smells": {
        "Magic Number Test": 1,
        "Lazy Test": 2,
        "Eager Test": 1,
        "Assertion Roulette": 1
      }
    },
    "minutesInRange": {
      "name": "minutesInRange",
      "mvn_run": "org.apache.commons.lang3.time.GmtTimeZoneTest#minutesInRange",
      "smells": {
        "Magic Number Test": 1,
        "Lazy Test": 2,
        "Eager Test": 1,
        "Assertion Roulette": 1
      }
    },
    "testGetOffset": {
      "name": "testGetOffset",
      "mvn_run": "org.apache.commons.lang3.time.GmtTimeZoneTest#testGetOffset",
      "smells": {
        "Magic Number Test": 2,
        "Lazy Test": 1,
        "Eager Test": 1,
        "Assertion Roulette": 1
      }
    },
    "testToString": {
      "name": "testToString",
      "mvn_run": "org.apache.commons.lang3.time.GmtTimeZoneTest#testToString",
      "smells": {
        "Sensitive Equality": 1,
        "Lazy Test": 1,
        "Eager Test": 1,
        "Assertion Roulette": 1
      }
    },
    "useDaylightTime": {
      "name": "useDaylightTime",
      "mvn_run": "org.apache.commons.lang3.time.GmtTimeZoneTest#useDaylightTime",
      "smells": {
        "Lazy Test": 2,
        "Eager Test": 1,
        "Assertion Roulette": 1
      }
    },
    "setRawOffset": {
      "name": "setRawOffset",
      "mvn_run": "org.apache.commons.lang3.time.GmtTimeZoneTest#setRawOffset",
      "smells": {
        "Lazy Test": 1,
        "Eager Test": 1
      }
    },
    "minutesOutOfRange": {
      "name": "minutesOutOfRange",
      "mvn_run": "org.apache.commons.lang3.time.GmtTimeZoneTest#minutesOutOfRange",
      "smells": {
        "Lazy Test": 1
      }
    },
    "inDaylightTime": {
      "name": "inDaylightTime",
      "mvn_run": "org.apache.commons.lang3.time.GmtTimeZoneTest#inDaylightTime",
      "smells": {
        "Lazy Test": 2,
        "Eager Test": 1,
        "Assertion Roulette": 1
      }
    },
    "hoursOutOfRange": {
      "name": "hoursOutOfRange",
      "mvn_run": "org.apache.commons.lang3.time.GmtTimeZoneTest#hoursOutOfRange",
      "smells": {
        "Lazy Test": 1
      }
    },
    "getID": {
      "name": "getID",
      "mvn_run": "org.apache.commons.lang3.time.GmtTimeZoneTest#getID",
      "smells": {
        "Lazy Test": 1,
        "Eager Test": 1,
        "Assertion Roulette": 5
      }
    }
  },
  "org.apache.commons.lang3.time.DateFormatUtilsTest": {
    "testDateISO": {
      "name": "testDateISO",
      "mvn_run": "org.apache.commons.lang3.time.DateFormatUtilsTest#testDateISO",
      "smells": {
        "Unknown Test": 1
      }
    },
    "testDateTimeISO": {
      "name": "testDateTimeISO",
      "mvn_run": "org.apache.commons.lang3.time.DateFormatUtilsTest#testDateTimeISO",
      "smells": {
        "Unknown Test": 1
      }
    },
    "testLANG1000": {
      "name": "testLANG1000",
      "mvn_run": "org.apache.commons.lang3.time.DateFormatUtilsTest#testLANG1000",
      "smells": {
        "Unknown Test": 1
      }
    },
    "testTimeISO": {
      "name": "testTimeISO",
      "mvn_run": "org.apache.commons.lang3.time.DateFormatUtilsTest#testTimeISO",
      "smells": {
        "Unknown Test": 1
      }
    },
    "testTimeNoTISO": {
      "name": "testTimeNoTISO",
      "mvn_run": "org.apache.commons.lang3.time.DateFormatUtilsTest#testTimeNoTISO",
      "smells": {
        "Unknown Test": 1
      }
    },
    "testGmtMinus3": {
      "name": "testGmtMinus3",
      "mvn_run": "org.apache.commons.lang3.time.DateFormatUtilsTest#testGmtMinus3",
      "smells": {
        "IgnoredTest": 1
      }
    },
    "testUTC": {
      "name": "testUTC",
      "mvn_run": "org.apache.commons.lang3.time.DateFormatUtilsTest#testUTC",
      "smells": {
        "IgnoredTest": 1
      }
    },
    "testConstructor": {
      "name": "testConstructor",
      "mvn_run": "org.apache.commons.lang3.time.DateFormatUtilsTest#testConstructor",
      "smells": {
        "Magic Number Test": 1,
        "Assertion Roulette": 5
      }
    },
    "testLang530": {
      "name": "testLang530",
      "mvn_run": "org.apache.commons.lang3.time.DateFormatUtilsTest#testLang530",
      "smells": {
        "Magic Number Test": 1,
        "Assertion Roulette": 1
      }
    },
    "testFormat": {
      "name": "testFormat",
      "mvn_run": "org.apache.commons.lang3.time.DateFormatUtilsTest#testFormat",
      "smells": {
        "Sensitive Equality": 4,
        "Lazy Test": 1,
        "Assertion Roulette": 4
      }
    },
    "testFormatCalendar": {
      "name": "testFormatCalendar",
      "mvn_run": "org.apache.commons.lang3.time.DateFormatUtilsTest#testFormatCalendar",
      "smells": {
        "Sensitive Equality": 4,
        "Lazy Test": 1,
        "Assertion Roulette": 4
      }
    },
    "testLang916": {
      "name": "testLang916",
      "mvn_run": "org.apache.commons.lang3.time.DateFormatUtilsTest#testLang916",
      "smells": {
        "Verbose Test": 1,
        "Lazy Test": 1
      }
    },
    "testLANG1462": {
      "name": "testLANG1462",
      "mvn_run": "org.apache.commons.lang3.time.DateFormatUtilsTest#testLANG1462",
      "smells": {
        "Lazy Test": 1,
        "Assertion Roulette": 2
      }
    },
    "testFormatUTC": {
      "name": "testFormatUTC",
      "mvn_run": "org.apache.commons.lang3.time.DateFormatUtilsTest#testFormatUTC",
      "smells": {
        "Assertion Roulette": 4
      }
    }
  },
  "org.apache.commons.lang3.time.DurationUtilsTest": {
    "testGetNanosOfMilli": {
      "name": "testGetNanosOfMilli",
      "mvn_run": "org.apache.commons.lang3.time.DurationUtilsTest#testGetNanosOfMilli",
      "smells": {
        "Magic Number Test": 7,
        "Assertion Roulette": 10
      }
    },
    "testGetNanosOfMiili": {
      "name": "testGetNanosOfMiili",
      "mvn_run": "org.apache.commons.lang3.time.DurationUtilsTest#testGetNanosOfMiili",
      "smells": {
        "Magic Number Test": 7,
        "Assertion Roulette": 10
      }
    },
    "testLongToIntRangeFit": {
      "name": "testLongToIntRangeFit",
      "mvn_run": "org.apache.commons.lang3.time.DurationUtilsTest#testLongToIntRangeFit",
      "smells": {
        "Magic Number Test": 1,
        "Assertion Roulette": 11
      }
    },
    "testOfRunnble": {
      "name": "testOfRunnble",
      "mvn_run": "org.apache.commons.lang3.time.DurationUtilsTest#testOfRunnble",
      "smells": {
        "Magic Number Test": 1,
        "Lazy Test": 1,
        "Eager Test": 1,
        "Assertion Roulette": 1
      }
    },
    "testOfConsumer": {
      "name": "testOfConsumer",
      "mvn_run": "org.apache.commons.lang3.time.DurationUtilsTest#testOfConsumer",
      "smells": {
        "Magic Number Test": 1,
        "Lazy Test": 1,
        "Eager Test": 1,
        "Assertion Roulette": 2
      }
    },
    "testSince": {
      "name": "testSince",
      "mvn_run": "org.apache.commons.lang3.time.DurationUtilsTest#testSince",
      "smells": {
        "Magic Number Test": 3,
        "Eager Test": 1,
        "Assertion Roulette": 3
      }
    },
    "testToDuration": {
      "name": "testToDuration",
      "mvn_run": "org.apache.commons.lang3.time.DurationUtilsTest#testToDuration",
      "smells": {
        "Magic Number Test": 10,
        "Eager Test": 1,
        "Assertion Roulette": 10
      }
    },
    "testToMillisInt": {
      "name": "testToMillisInt",
      "mvn_run": "org.apache.commons.lang3.time.DurationUtilsTest#testToMillisInt",
      "smells": {
        "Magic Number Test": 2,
        "Assertion Roulette": 10
      }
    },
    "testZeroIfNull": {
      "name": "testZeroIfNull",
      "mvn_run": "org.apache.commons.lang3.time.DurationUtilsTest#testZeroIfNull",
      "smells": {
        "Magic Number Test": 1,
        "Assertion Roulette": 2
      }
    },
    "testOfRunnbleThrowing": {
      "name": "testOfRunnbleThrowing",
      "mvn_run": "org.apache.commons.lang3.time.DurationUtilsTest#testOfRunnbleThrowing",
      "smells": {
        "Lazy Test": 1
      }
    },
    "testIsPositive": {
      "name": "testIsPositive",
      "mvn_run": "org.apache.commons.lang3.time.DurationUtilsTest#testIsPositive",
      "smells": {
        "Assertion Roulette": 3
      }
    }
  },
  "org.apache.commons.lang3.BooleanUtilsTest": {
    "test_toBoolean_int": {
      "name": "test_toBoolean_int",
      "mvn_run": "org.apache.commons.lang3.BooleanUtilsTest#test_toBoolean_int",
      "smells": {
        "Magic Number Test": 3,
        "Lazy Test": 1,
        "Assertion Roulette": 3
      }
    },
    "test_toBoolean_int_int_int": {
      "name": "test_toBoolean_int_int_int",
      "mvn_run": "org.apache.commons.lang3.BooleanUtilsTest#test_toBoolean_int_int_int",
      "smells": {
        "Magic Number Test": 2,
        "Lazy Test": 1,
        "Assertion Roulette": 2
      }
    },
    "test_toBooleanObject_int": {
      "name": "test_toBooleanObject_int",
      "mvn_run": "org.apache.commons.lang3.BooleanUtilsTest#test_toBooleanObject_int",
      "smells": {
        "Magic Number Test": 3,
        "Lazy Test": 1,
        "Assertion Roulette": 3
      }
    },
    "test_toBooleanObject_int_int_int": {
      "name": "test_toBooleanObject_int_int_int",
      "mvn_run": "org.apache.commons.lang3.BooleanUtilsTest#test_toBooleanObject_int_int_int",
      "smells": {
        "Magic Number Test": 3,
        "Lazy Test": 1,
        "Assertion Roulette": 3
      }
    },
    "test_toInteger_boolean": {
      "name": "test_toInteger_boolean",
      "mvn_run": "org.apache.commons.lang3.BooleanUtilsTest#test_toInteger_boolean",
      "smells": {
        "Magic Number Test": 2,
        "Lazy Test": 1,
        "Assertion Roulette": 2
      }
    },
    "test_toInteger_boolean_int_int": {
      "name": "test_toInteger_boolean_int_int",
      "mvn_run": "org.apache.commons.lang3.BooleanUtilsTest#test_toInteger_boolean_int_int",
      "smells": {
        "Magic Number Test": 2,
        "Lazy Test": 1,
        "Assertion Roulette": 2
      }
    },
    "test_toInteger_Boolean_int_int_int": {
      "name": "test_toInteger_Boolean_int_int_int",
      "mvn_run": "org.apache.commons.lang3.BooleanUtilsTest#test_toInteger_Boolean_int_int_int",
      "smells": {
        "Magic Number Test": 3,
        "Lazy Test": 1,
        "Assertion Roulette": 3
      }
    },
    "test_toIntegerObject_boolean": {
      "name": "test_toIntegerObject_boolean",
      "mvn_run": "org.apache.commons.lang3.BooleanUtilsTest#test_toIntegerObject_boolean",
      "smells": {
        "Magic Number Test": 2,
        "Lazy Test": 1,
        "Assertion Roulette": 2
      }
    },
    "test_toIntegerObject_Boolean": {
      "name": "test_toIntegerObject_Boolean",
      "mvn_run": "org.apache.commons.lang3.BooleanUtilsTest#test_toIntegerObject_Boolean",
      "smells": {
        "Magic Number Test": 2,
        "Lazy Test": 1,
        "Assertion Roulette": 3
      }
    },
    "testCompare": {
      "name": "testCompare",
      "mvn_run": "org.apache.commons.lang3.BooleanUtilsTest#testCompare",
      "smells": {
        "Magic Number Test": 4,
        "Assertion Roulette": 4
      }
    },
    "testConstructor": {
      "name": "testConstructor",
      "mvn_run": "org.apache.commons.lang3.BooleanUtilsTest#testConstructor",
      "smells": {
        "Magic Number Test": 1,
        "Assertion Roulette": 5
      }
    },
    "test_toBoolean_String": {
      "name": "test_toBoolean_String",
      "mvn_run": "org.apache.commons.lang3.BooleanUtilsTest#test_toBoolean_String",
      "smells": {
        "Sensitive Equality": 1,
        "Verbose Test": 1,
        "Lazy Test": 1,
        "Duplicate Assert": 1,
        "Assertion Roulette": 44
      }
    },
    "test_toString_boolean_String_String_String": {
      "name": "test_toString_boolean_String_String_String",
      "mvn_run": "org.apache.commons.lang3.BooleanUtilsTest#test_toString_boolean_String_String_String",
      "smells": {
        "Sensitive Equality": 2,
        "Lazy Test": 1,
        "Assertion Roulette": 2
      }
    },
    "test_toString_Boolean_String_String_String": {
      "name": "test_toString_Boolean_String_String_String",
      "mvn_run": "org.apache.commons.lang3.BooleanUtilsTest#test_toString_Boolean_String_String_String",
      "smells": {
        "Sensitive Equality": 3,
        "Lazy Test": 1,
        "Assertion Roulette": 3
      }
    },
    "test_toStringOnOff_boolean": {
      "name": "test_toStringOnOff_boolean",
      "mvn_run": "org.apache.commons.lang3.BooleanUtilsTest#test_toStringOnOff_boolean",
      "smells": {
        "Sensitive Equality": 2,
        "Lazy Test": 1,
        "Assertion Roulette": 2
      }
    },
    "test_toStringOnOff_Boolean": {
      "name": "test_toStringOnOff_Boolean",
      "mvn_run": "org.apache.commons.lang3.BooleanUtilsTest#test_toStringOnOff_Boolean",
      "smells": {
        "Sensitive Equality": 3,
        "Lazy Test": 1,
        "Assertion Roulette": 3
      }
    },
    "test_toStringTrueFalse_boolean": {
      "name": "test_toStringTrueFalse_boolean",
      "mvn_run": "org.apache.commons.lang3.BooleanUtilsTest#test_toStringTrueFalse_boolean",
      "smells": {
        "Sensitive Equality": 2,
        "Lazy Test": 1,
        "Assertion Roulette": 2
      }
    },
    "test_toStringTrueFalse_Boolean": {
      "name": "test_toStringTrueFalse_Boolean",
      "mvn_run": "org.apache.commons.lang3.BooleanUtilsTest#test_toStringTrueFalse_Boolean",
      "smells": {
        "Sensitive Equality": 3,
        "Lazy Test": 1,
        "Assertion Roulette": 3
      }
    },
    "test_toStringYesNo_boolean": {
      "name": "test_toStringYesNo_boolean",
      "mvn_run": "org.apache.commons.lang3.BooleanUtilsTest#test_toStringYesNo_boolean",
      "smells": {
        "Sensitive Equality": 2,
        "Lazy Test": 1,
        "Assertion Roulette": 2
      }
    },
    "test_toStringYesNo_Boolean": {
      "name": "test_toStringYesNo_Boolean",
      "mvn_run": "org.apache.commons.lang3.BooleanUtilsTest#test_toStringYesNo_Boolean",
      "smells": {
        "Sensitive Equality": 3,
        "Lazy Test": 1,
        "Assertion Roulette": 3
      }
    },
    "test_toBooleanObject_String": {
      "name": "test_toBooleanObject_String",
      "mvn_run": "org.apache.commons.lang3.BooleanUtilsTest#test_toBooleanObject_String",
      "smells": {
        "Verbose Test": 1,
        "Lazy Test": 1,
        "Duplicate Assert": 1,
        "Assertion Roulette": 32
      }
    },
    "testAnd_object_validInput_3items": {
      "name": "testAnd_object_validInput_3items",
      "mvn_run": "org.apache.commons.lang3.BooleanUtilsTest#testAnd_object_validInput_3items",
      "smells": {
        "Verbose Test": 1,
        "Lazy Test": 1,
        "Eager Test": 1
      }
    },
    "testAnd_primitive_validInput_3items": {
      "name": "testAnd_primitive_validInput_3items",
      "mvn_run": "org.apache.commons.lang3.BooleanUtilsTest#testAnd_primitive_validInput_3items",
      "smells": {
        "Verbose Test": 1,
        "Lazy Test": 1
      }
    },
    "testOr_object_validInput_3items": {
      "name": "testOr_object_validInput_3items",
      "mvn_run": "org.apache.commons.lang3.BooleanUtilsTest#testOr_object_validInput_3items",
      "smells": {
        "Verbose Test": 1,
        "Lazy Test": 1,
        "Eager Test": 1
      }
    },
    "testOr_primitive_validInput_3items": {
      "name": "testOr_primitive_validInput_3items",
      "mvn_run": "org.apache.commons.lang3.BooleanUtilsTest#testOr_primitive_validInput_3items",
      "smells": {
        "Verbose Test": 1,
        "Lazy Test": 1
      }
    },
    "testXor_object_validInput_3items": {
      "name": "testXor_object_validInput_3items",
      "mvn_run": "org.apache.commons.lang3.BooleanUtilsTest#testXor_object_validInput_3items",
      "smells": {
        "Verbose Test": 1,
        "Lazy Test": 1,
        "Eager Test": 1,
        "Assertion Roulette": 8
      }
    },
    "testXor_primitive_validInput_3items": {
      "name": "testXor_primitive_validInput_3items",
      "mvn_run": "org.apache.commons.lang3.BooleanUtilsTest#testXor_primitive_validInput_3items",
      "smells": {
        "Verbose Test": 1,
        "Lazy Test": 1,
        "Assertion Roulette": 8
      }
    },
    "testOneHot_primitive_validInput_3items": {
      "name": "testOneHot_primitive_validInput_3items",
      "mvn_run": "org.apache.commons.lang3.BooleanUtilsTest#testOneHot_primitive_validInput_3items",
      "smells": {
        "Lazy Test": 1
      }
    },
    "testOneHot_primitive_validInput_2items": {
      "name": "testOneHot_primitive_validInput_2items",
      "mvn_run": "org.apache.commons.lang3.BooleanUtilsTest#testOneHot_primitive_validInput_2items",
      "smells": {
        "Lazy Test": 1
      }
    },
    "testOneHot_primitive_validInput_1item": {
      "name": "testOneHot_primitive_validInput_1item",
      "mvn_run": "org.apache.commons.lang3.BooleanUtilsTest#testOneHot_primitive_validInput_1item",
      "smells": {
        "Lazy Test": 1
      }
    },
    "testOneHot_primitive_nullInput": {
      "name": "testOneHot_primitive_nullInput",
      "mvn_run": "org.apache.commons.lang3.BooleanUtilsTest#testOneHot_primitive_nullInput",
      "smells": {
        "Lazy Test": 1
      }
    },
    "testOneHot_primitive_emptyInput": {
      "name": "testOneHot_primitive_emptyInput",
      "mvn_run": "org.apache.commons.lang3.BooleanUtilsTest#testOneHot_primitive_emptyInput",
      "smells": {
        "Lazy Test": 1
      }
    },
    "testOneHot_object_validInput_3items": {
      "name": "testOneHot_object_validInput_3items",
      "mvn_run": "org.apache.commons.lang3.BooleanUtilsTest#testOneHot_object_validInput_3items",
      "smells": {
        "Lazy Test": 1
      }
    },
    "testOneHot_object_validInput_2ItemsNullsTreatedAsFalse": {
      "name": "testOneHot_object_validInput_2ItemsNullsTreatedAsFalse",
      "mvn_run": "org.apache.commons.lang3.BooleanUtilsTest#testOneHot_object_validInput_2ItemsNullsTreatedAsFalse",
      "smells": {
        "Lazy Test": 1
      }
    },
    "testOneHot_object_validInput_2items": {
      "name": "testOneHot_object_validInput_2items",
      "mvn_run": "org.apache.commons.lang3.BooleanUtilsTest#testOneHot_object_validInput_2items",
      "smells": {
        "Lazy Test": 1
      }
    },
    "testOneHot_object_validInput_1item": {
      "name": "testOneHot_object_validInput_1item",
      "mvn_run": "org.apache.commons.lang3.BooleanUtilsTest#testOneHot_object_validInput_1item",
      "smells": {
        "Lazy Test": 1
      }
    },
    "testOneHot_object_nullInput": {
      "name": "testOneHot_object_nullInput",
      "mvn_run": "org.apache.commons.lang3.BooleanUtilsTest#testOneHot_object_nullInput",
      "smells": {
        "Lazy Test": 1
      }
    },
    "testOneHot_object_nullElementInput": {
      "name": "testOneHot_object_nullElementInput",
      "mvn_run": "org.apache.commons.lang3.BooleanUtilsTest#testOneHot_object_nullElementInput",
      "smells": {
        "Lazy Test": 1,
        "Assertion Roulette": 1
      }
    },
    "testOneHot_object_emptyInput": {
      "name": "testOneHot_object_emptyInput",
      "mvn_run": "org.apache.commons.lang3.BooleanUtilsTest#testOneHot_object_emptyInput",
      "smells": {
        "Lazy Test": 1
      }
    },
    "test_toBooleanObject_String_String_String_String_nullValue": {
      "name": "test_toBooleanObject_String_String_String_String_nullValue",
      "mvn_run": "org.apache.commons.lang3.BooleanUtilsTest#test_toBooleanObject_String_String_String_String_nullValue",
      "smells": {
        "Lazy Test": 1
      }
    },
    "test_toBooleanObject_String_String_String_String_noMatch": {
      "name": "test_toBooleanObject_String_String_String_String_noMatch",
      "mvn_run": "org.apache.commons.lang3.BooleanUtilsTest#test_toBooleanObject_String_String_String_String_noMatch",
      "smells": {
        "Lazy Test": 1
      }
    },
    "test_toBooleanObject_String_String_String_String": {
      "name": "test_toBooleanObject_String_String_String_String",
      "mvn_run": "org.apache.commons.lang3.BooleanUtilsTest#test_toBooleanObject_String_String_String_String",
      "smells": {
        "Lazy Test": 1,
        "Assertion Roulette": 6
      }
    },
    "test_toBooleanObject_Integer_Integer_Integer_Integer_nullValue": {
      "name": "test_toBooleanObject_Integer_Integer_Integer_Integer_nullValue",
      "mvn_run": "org.apache.commons.lang3.BooleanUtilsTest#test_toBooleanObject_Integer_Integer_Integer_Integer_nullValue",
      "smells": {
        "Lazy Test": 1
      }
    },
    "test_toBooleanObject_Integer_Integer_Integer_Integer_noMatch": {
      "name": "test_toBooleanObject_Integer_Integer_Integer_Integer_noMatch",
      "mvn_run": "org.apache.commons.lang3.BooleanUtilsTest#test_toBooleanObject_Integer_Integer_Integer_Integer_noMatch",
      "smells": {
        "Lazy Test": 1
      }
    },
    "test_toBooleanObject_Integer_Integer_Integer_Integer": {
      "name": "test_toBooleanObject_Integer_Integer_Integer_Integer",
      "mvn_run": "org.apache.commons.lang3.BooleanUtilsTest#test_toBooleanObject_Integer_Integer_Integer_Integer",
      "smells": {
        "Lazy Test": 1,
        "Assertion Roulette": 6
      }
    },
    "test_toBooleanObject_Integer": {
      "name": "test_toBooleanObject_Integer",
      "mvn_run": "org.apache.commons.lang3.BooleanUtilsTest#test_toBooleanObject_Integer",
      "smells": {
        "Lazy Test": 1,
        "Assertion Roulette": 4
      }
    },
    "test_toBooleanObject_int_int_int_noMatch": {
      "name": "test_toBooleanObject_int_int_int_noMatch",
      "mvn_run": "org.apache.commons.lang3.BooleanUtilsTest#test_toBooleanObject_int_int_int_noMatch",
      "smells": {
        "Lazy Test": 1
      }
    },
    "testOr_primitive_validInput_2items": {
      "name": "testOr_primitive_validInput_2items",
      "mvn_run": "org.apache.commons.lang3.BooleanUtilsTest#testOr_primitive_validInput_2items",
      "smells": {
        "Lazy Test": 1
      }
    },
    "testOr_primitive_nullInput": {
      "name": "testOr_primitive_nullInput",
      "mvn_run": "org.apache.commons.lang3.BooleanUtilsTest#testOr_primitive_nullInput",
      "smells": {
        "Lazy Test": 1
      }
    },
    "testOr_primitive_emptyInput": {
      "name": "testOr_primitive_emptyInput",
      "mvn_run": "org.apache.commons.lang3.BooleanUtilsTest#testOr_primitive_emptyInput",
      "smells": {
        "Lazy Test": 1
      }
    },
    "testOr_object_validInput_2items": {
      "name": "testOr_object_validInput_2items",
      "mvn_run": "org.apache.commons.lang3.BooleanUtilsTest#testOr_object_validInput_2items",
      "smells": {
        "Lazy Test": 1,
        "Eager Test": 1
      }
    },
    "testOr_object_nullInput": {
      "name": "testOr_object_nullInput",
      "mvn_run": "org.apache.commons.lang3.BooleanUtilsTest#testOr_object_nullInput",
      "smells": {
        "Lazy Test": 1
      }
    },
    "testOr_object_nullElementInput": {
      "name": "testOr_object_nullElementInput",
      "mvn_run": "org.apache.commons.lang3.BooleanUtilsTest#testOr_object_nullElementInput",
      "smells": {
        "Lazy Test": 1,
        "Assertion Roulette": 1
      }
    },
    "testOr_object_emptyInput": {
      "name": "testOr_object_emptyInput",
      "mvn_run": "org.apache.commons.lang3.BooleanUtilsTest#testOr_object_emptyInput",
      "smells": {
        "Lazy Test": 1
      }
    },
    "test_toIntegerObject_Boolean_Integer_Integer_Integer": {
      "name": "test_toIntegerObject_Boolean_Integer_Integer_Integer",
      "mvn_run": "org.apache.commons.lang3.BooleanUtilsTest#test_toIntegerObject_Boolean_Integer_Integer_Integer",
      "smells": {
        "Lazy Test": 1,
        "Assertion Roulette": 4
      }
    },
    "test_toIntegerObject_boolean_Integer_Integer": {
      "name": "test_toIntegerObject_boolean_Integer_Integer",
      "mvn_run": "org.apache.commons.lang3.BooleanUtilsTest#test_toIntegerObject_boolean_Integer_Integer",
      "smells": {
        "Lazy Test": 1,
        "Assertion Roulette": 2
      }
    },
    "test_toBoolean_String_String_String_nullValue": {
      "name": "test_toBoolean_String_String_String_nullValue",
      "mvn_run": "org.apache.commons.lang3.BooleanUtilsTest#test_toBoolean_String_String_String_nullValue",
      "smells": {
        "Lazy Test": 1
      }
    },
    "test_toBoolean_String_String_String_noMatch": {
      "name": "test_toBoolean_String_String_String_noMatch",
      "mvn_run": "org.apache.commons.lang3.BooleanUtilsTest#test_toBoolean_String_String_String_noMatch",
      "smells": {
        "Lazy Test": 1
      }
    },
    "test_toBoolean_String_String_String": {
      "name": "test_toBoolean_String_String_String",
      "mvn_run": "org.apache.commons.lang3.BooleanUtilsTest#test_toBoolean_String_String_String",
      "smells": {
        "Lazy Test": 1,
        "Duplicate Assert": 3,
        "Assertion Roulette": 9
      }
    },
    "test_toBoolean_Integer_Integer_Integer_nullValue": {
      "name": "test_toBoolean_Integer_Integer_Integer_nullValue",
      "mvn_run": "org.apache.commons.lang3.BooleanUtilsTest#test_toBoolean_Integer_Integer_Integer_nullValue",
      "smells": {
        "Lazy Test": 1
      }
    },
    "test_toBoolean_Integer_Integer_Integer_noMatch": {
      "name": "test_toBoolean_Integer_Integer_Integer_noMatch",
      "mvn_run": "org.apache.commons.lang3.BooleanUtilsTest#test_toBoolean_Integer_Integer_Integer_noMatch",
      "smells": {
        "Lazy Test": 1
      }
    },
    "test_toBoolean_Integer_Integer_Integer": {
      "name": "test_toBoolean_Integer_Integer_Integer",
      "mvn_run": "org.apache.commons.lang3.BooleanUtilsTest#test_toBoolean_Integer_Integer_Integer",
      "smells": {
        "Lazy Test": 1,
        "Assertion Roulette": 4
      }
    },
    "test_toBoolean_int_int_int_noMatch": {
      "name": "test_toBoolean_int_int_int_noMatch",
      "mvn_run": "org.apache.commons.lang3.BooleanUtilsTest#test_toBoolean_int_int_int_noMatch",
      "smells": {
        "Lazy Test": 1
      }
    },
    "test_toBoolean_Boolean": {
      "name": "test_toBoolean_Boolean",
      "mvn_run": "org.apache.commons.lang3.BooleanUtilsTest#test_toBoolean_Boolean",
      "smells": {
        "Lazy Test": 1,
        "Assertion Roulette": 3
      }
    },
    "testAnd_primitive_validInput_2items": {
      "name": "testAnd_primitive_validInput_2items",
      "mvn_run": "org.apache.commons.lang3.BooleanUtilsTest#testAnd_primitive_validInput_2items",
      "smells": {
        "Lazy Test": 1
      }
    },
    "testAnd_primitive_nullInput": {
      "name": "testAnd_primitive_nullInput",
      "mvn_run": "org.apache.commons.lang3.BooleanUtilsTest#testAnd_primitive_nullInput",
      "smells": {
        "Lazy Test": 1
      }
    },
    "testAnd_primitive_emptyInput": {
      "name": "testAnd_primitive_emptyInput",
      "mvn_run": "org.apache.commons.lang3.BooleanUtilsTest#testAnd_primitive_emptyInput",
      "smells": {
        "Lazy Test": 1
      }
    },
    "testAnd_object_validInput_2items": {
      "name": "testAnd_object_validInput_2items",
      "mvn_run": "org.apache.commons.lang3.BooleanUtilsTest#testAnd_object_validInput_2items",
      "smells": {
        "Lazy Test": 1,
        "Eager Test": 1
      }
    },
    "testAnd_object_nullInput": {
      "name": "testAnd_object_nullInput",
      "mvn_run": "org.apache.commons.lang3.BooleanUtilsTest#testAnd_object_nullInput",
      "smells": {
        "Lazy Test": 1
      }
    },
    "testAnd_object_nullElementInput": {
      "name": "testAnd_object_nullElementInput",
      "mvn_run": "org.apache.commons.lang3.BooleanUtilsTest#testAnd_object_nullElementInput",
      "smells": {
        "Lazy Test": 1,
        "Assertion Roulette": 1
      }
    },
    "testAnd_object_emptyInput": {
      "name": "testAnd_object_emptyInput",
      "mvn_run": "org.apache.commons.lang3.BooleanUtilsTest#testAnd_object_emptyInput",
      "smells": {
        "Lazy Test": 1
      }
    },
    "testXor_primitive_validInput_2items": {
      "name": "testXor_primitive_validInput_2items",
      "mvn_run": "org.apache.commons.lang3.BooleanUtilsTest#testXor_primitive_validInput_2items",
      "smells": {
        "Lazy Test": 1,
        "Assertion Roulette": 4
      }
    },
    "testXor_primitive_validInput_1items": {
      "name": "testXor_primitive_validInput_1items",
      "mvn_run": "org.apache.commons.lang3.BooleanUtilsTest#testXor_primitive_validInput_1items",
      "smells": {
        "Lazy Test": 1,
        "Assertion Roulette": 2
      }
    },
    "testXor_primitive_nullInput": {
      "name": "testXor_primitive_nullInput",
      "mvn_run": "org.apache.commons.lang3.BooleanUtilsTest#testXor_primitive_nullInput",
      "smells": {
        "Lazy Test": 1
      }
    },
    "testXor_primitive_emptyInput": {
      "name": "testXor_primitive_emptyInput",
      "mvn_run": "org.apache.commons.lang3.BooleanUtilsTest#testXor_primitive_emptyInput",
      "smells": {
        "Lazy Test": 1
      }
    },
    "testXor_object_validInput_2items": {
      "name": "testXor_object_validInput_2items",
      "mvn_run": "org.apache.commons.lang3.BooleanUtilsTest#testXor_object_validInput_2items",
      "smells": {
        "Lazy Test": 1,
        "Eager Test": 1,
        "Assertion Roulette": 4
      }
    },
    "testXor_object_validInput_1items": {
      "name": "testXor_object_validInput_1items",
      "mvn_run": "org.apache.commons.lang3.BooleanUtilsTest#testXor_object_validInput_1items",
      "smells": {
        "Lazy Test": 1,
        "Eager Test": 1,
        "Assertion Roulette": 2
      }
    },
    "testXor_object_nullInput": {
      "name": "testXor_object_nullInput",
      "mvn_run": "org.apache.commons.lang3.BooleanUtilsTest#testXor_object_nullInput",
      "smells": {
        "Lazy Test": 1
      }
    },
    "testXor_object_nullElementInput": {
      "name": "testXor_object_nullElementInput",
      "mvn_run": "org.apache.commons.lang3.BooleanUtilsTest#testXor_object_nullElementInput",
      "smells": {
        "Lazy Test": 1,
        "Assertion Roulette": 1
      }
    },
    "testXor_object_emptyInput": {
      "name": "testXor_object_emptyInput",
      "mvn_run": "org.apache.commons.lang3.BooleanUtilsTest#testXor_object_emptyInput",
      "smells": {
        "Lazy Test": 1
      }
    },
    "test_booleanValues": {
      "name": "test_booleanValues",
      "mvn_run": "org.apache.commons.lang3.BooleanUtilsTest#test_booleanValues",
      "smells": {
        "Assertion Roulette": 1
      }
    },
    "test_values": {
      "name": "test_values",
      "mvn_run": "org.apache.commons.lang3.BooleanUtilsTest#test_values",
      "smells": {
        "Assertion Roulette": 1
      }
    },
    "test_forEach": {
      "name": "test_forEach",
      "mvn_run": "org.apache.commons.lang3.BooleanUtilsTest#test_forEach",
      "smells": {
        "Assertion Roulette": 1
      }
    },
    "test_isFalse_Boolean": {
      "name": "test_isFalse_Boolean",
      "mvn_run": "org.apache.commons.lang3.BooleanUtilsTest#test_isFalse_Boolean",
      "smells": {
        "Assertion Roulette": 3
      }
    },
    "test_isNotFalse_Boolean": {
      "name": "test_isNotFalse_Boolean",
      "mvn_run": "org.apache.commons.lang3.BooleanUtilsTest#test_isNotFalse_Boolean",
      "smells": {
        "Assertion Roulette": 3
      }
    },
    "test_isNotTrue_Boolean": {
      "name": "test_isNotTrue_Boolean",
      "mvn_run": "org.apache.commons.lang3.BooleanUtilsTest#test_isNotTrue_Boolean",
      "smells": {
        "Assertion Roulette": 3
      }
    },
    "test_isTrue_Boolean": {
      "name": "test_isTrue_Boolean",
      "mvn_run": "org.apache.commons.lang3.BooleanUtilsTest#test_isTrue_Boolean",
      "smells": {
        "Assertion Roulette": 3
      }
    },
    "test_negate_Boolean": {
      "name": "test_negate_Boolean",
      "mvn_run": "org.apache.commons.lang3.BooleanUtilsTest#test_negate_Boolean",
      "smells": {
        "Assertion Roulette": 3
      }
    },
    "test_primitiveValues": {
      "name": "test_primitiveValues",
      "mvn_run": "org.apache.commons.lang3.BooleanUtilsTest#test_primitiveValues",
      "smells": {
        "Assertion Roulette": 1
      }
    },
    "test_toBooleanDefaultIfNull_Boolean_boolean": {
      "name": "test_toBooleanDefaultIfNull_Boolean_boolean",
      "mvn_run": "org.apache.commons.lang3.BooleanUtilsTest#test_toBooleanDefaultIfNull_Boolean_boolean",
      "smells": {
        "Assertion Roulette": 6
      }
    }
  },
  "org.apache.commons.lang3.ClassPathUtilsTest": {
    "testConstructor": {
      "name": "testConstructor",
      "mvn_run": "org.apache.commons.lang3.ClassPathUtilsTest#testConstructor",
      "smells": {
        "Magic Number Test": 1,
        "Assertion Roulette": 5
      }
    },
    "testToFullyQualifiedNamePackageString": {
      "name": "testToFullyQualifiedNamePackageString",
      "mvn_run": "org.apache.commons.lang3.ClassPathUtilsTest#testToFullyQualifiedNamePackageString",
      "smells": {
        "Lazy Test": 1,
        "Assertion Roulette": 1
      }
    },
    "testToFullyQualifiedNamePackageNull": {
      "name": "testToFullyQualifiedNamePackageNull",
      "mvn_run": "org.apache.commons.lang3.ClassPathUtilsTest#testToFullyQualifiedNamePackageNull",
      "smells": {
        "Lazy Test": 1
      }
    },
    "testToFullyQualifiedNameNullPackageString": {
      "name": "testToFullyQualifiedNameNullPackageString",
      "mvn_run": "org.apache.commons.lang3.ClassPathUtilsTest#testToFullyQualifiedNameNullPackageString",
      "smells": {
        "Lazy Test": 1
      }
    },
    "testToFullyQualifiedNameClassString": {
      "name": "testToFullyQualifiedNameClassString",
      "mvn_run": "org.apache.commons.lang3.ClassPathUtilsTest#testToFullyQualifiedNameClassString",
      "smells": {
        "Lazy Test": 1,
        "Assertion Roulette": 1
      }
    },
    "testToFullyQualifiedNameClassNull": {
      "name": "testToFullyQualifiedNameClassNull",
      "mvn_run": "org.apache.commons.lang3.ClassPathUtilsTest#testToFullyQualifiedNameClassNull",
      "smells": {
        "Lazy Test": 1
      }
    },
    "testToFullyQualifiedNameNullClassString": {
      "name": "testToFullyQualifiedNameNullClassString",
      "mvn_run": "org.apache.commons.lang3.ClassPathUtilsTest#testToFullyQualifiedNameNullClassString",
      "smells": {
        "Lazy Test": 1
      }
    },
    "testToFullyQualifiedPathPackage": {
      "name": "testToFullyQualifiedPathPackage",
      "mvn_run": "org.apache.commons.lang3.ClassPathUtilsTest#testToFullyQualifiedPathPackage",
      "smells": {
        "Lazy Test": 1,
        "Assertion Roulette": 1
      }
    },
    "testToFullyQualifiedPathPackageNull": {
      "name": "testToFullyQualifiedPathPackageNull",
      "mvn_run": "org.apache.commons.lang3.ClassPathUtilsTest#testToFullyQualifiedPathPackageNull",
      "smells": {
        "Lazy Test": 1
      }
    },
    "testToFullyQualifiedPathPackageNullString": {
      "name": "testToFullyQualifiedPathPackageNullString",
      "mvn_run": "org.apache.commons.lang3.ClassPathUtilsTest#testToFullyQualifiedPathPackageNullString",
      "smells": {
        "Lazy Test": 1
      }
    },
    "testToFullyQualifiedPathClass": {
      "name": "testToFullyQualifiedPathClass",
      "mvn_run": "org.apache.commons.lang3.ClassPathUtilsTest#testToFullyQualifiedPathClass",
      "smells": {
        "Lazy Test": 1,
        "Assertion Roulette": 1
      }
    },
    "testToFullyQualifiedPathClassNull": {
      "name": "testToFullyQualifiedPathClassNull",
      "mvn_run": "org.apache.commons.lang3.ClassPathUtilsTest#testToFullyQualifiedPathClassNull",
      "smells": {
        "Lazy Test": 1
      }
    },
    "testToFullyQualifiedPathClassNullString": {
      "name": "testToFullyQualifiedPathClassNullString",
      "mvn_run": "org.apache.commons.lang3.ClassPathUtilsTest#testToFullyQualifiedPathClassNullString",
      "smells": {
        "Lazy Test": 1
      }
    },
    "testPackageToPath": {
      "name": "testPackageToPath",
      "mvn_run": "org.apache.commons.lang3.ClassPathUtilsTest#testPackageToPath",
      "smells": {
        "Assertion Roulette": 3
      }
    },
    "testPathToPackage": {
      "name": "testPathToPackage",
      "mvn_run": "org.apache.commons.lang3.ClassPathUtilsTest#testPathToPackage",
      "smells": {
        "Assertion Roulette": 3
      }
    }
  },
  "org.apache.commons.lang3.CharSetUtilsTest": {
    "testConstructor": {
      "name": "testConstructor",
      "mvn_run": "org.apache.commons.lang3.CharSetUtilsTest#testConstructor",
      "smells": {
        "Magic Number Test": 1,
        "Assertion Roulette": 5
      }
    },
    "testCount_StringString": {
      "name": "testCount_StringString",
      "mvn_run": "org.apache.commons.lang3.CharSetUtilsTest#testCount_StringString",
      "smells": {
        "Magic Number Test": 9,
        "Lazy Test": 1,
        "Assertion Roulette": 9
      }
    },
    "testCount_StringStringarray": {
      "name": "testCount_StringStringarray",
      "mvn_run": "org.apache.commons.lang3.CharSetUtilsTest#testCount_StringStringarray",
      "smells": {
        "Magic Number Test": 17,
        "Lazy Test": 1,
        "Assertion Roulette": 17
      }
    },
    "testSqueeze_StringStringarray": {
      "name": "testSqueeze_StringStringarray",
      "mvn_run": "org.apache.commons.lang3.CharSetUtilsTest#testSqueeze_StringStringarray",
      "smells": {
        "Lazy Test": 1,
        "Assertion Roulette": 16
      }
    },
    "testSqueeze_StringString": {
      "name": "testSqueeze_StringString",
      "mvn_run": "org.apache.commons.lang3.CharSetUtilsTest#testSqueeze_StringString",
      "smells": {
        "Lazy Test": 1,
        "Assertion Roulette": 11
      }
    },
    "testKeep_StringStringarray": {
      "name": "testKeep_StringStringarray",
      "mvn_run": "org.apache.commons.lang3.CharSetUtilsTest#testKeep_StringStringarray",
      "smells": {
        "Lazy Test": 1,
        "Duplicate Assert": 1,
        "Assertion Roulette": 18
      }
    },
    "testKeep_StringString": {
      "name": "testKeep_StringString",
      "mvn_run": "org.apache.commons.lang3.CharSetUtilsTest#testKeep_StringString",
      "smells": {
        "Lazy Test": 1,
        "Assertion Roulette": 11
      }
    },
    "testContainsAny_StringStringarray": {
      "name": "testContainsAny_StringStringarray",
      "mvn_run": "org.apache.commons.lang3.CharSetUtilsTest#testContainsAny_StringStringarray",
      "smells": {
        "Lazy Test": 1,
        "Assertion Roulette": 17
      }
    },
    "testContainsAny_StringString": {
      "name": "testContainsAny_StringString",
      "mvn_run": "org.apache.commons.lang3.CharSetUtilsTest#testContainsAny_StringString",
      "smells": {
        "Lazy Test": 1,
        "Assertion Roulette": 9
      }
    },
    "testDelete_StringStringarray": {
      "name": "testDelete_StringStringarray",
      "mvn_run": "org.apache.commons.lang3.CharSetUtilsTest#testDelete_StringStringarray",
      "smells": {
        "Lazy Test": 1,
        "Duplicate Assert": 1,
        "Assertion Roulette": 19
      }
    },
    "testDelete_StringString": {
      "name": "testDelete_StringString",
      "mvn_run": "org.apache.commons.lang3.CharSetUtilsTest#testDelete_StringString",
      "smells": {
        "Lazy Test": 1,
        "Assertion Roulette": 10
      }
    }
  },
  "org.apache.commons.lang3.RandomStringUtilsTest": {
    "testConstructor": {
      "name": "testConstructor",
      "mvn_run": "org.apache.commons.lang3.RandomStringUtilsTest#testConstructor",
      "smells": {
        "Magic Number Test": 1,
        "Assertion Roulette": 5
      }
    },
    "testRandomStringUtils": {
      "name": "testRandomStringUtils",
      "mvn_run": "org.apache.commons.lang3.RandomStringUtilsTest#testRandomStringUtils",
      "smells": {
        "Magic Number Test": 19,
        "Verbose Test": 1,
        "Lazy Test": 7,
        "Duplicate Assert": 4,
        "Eager Test": 1,
        "Assertion Roulette": 16,
        "Conditional Test Logic": 8
      }
    },
    "testLANG805": {
      "name": "testLANG805",
      "mvn_run": "org.apache.commons.lang3.RandomStringUtilsTest#testLANG805",
      "smells": {
        "Magic Number Test": 1,
        "Lazy Test": 1,
        "Assertion Roulette": 1
      }
    },
    "testRandomStringUtilsHomog": {
      "name": "testRandomStringUtilsHomog",
      "mvn_run": "org.apache.commons.lang3.RandomStringUtilsTest#testRandomStringUtilsHomog",
      "smells": {
        "Magic Number Test": 1,
        "Verbose Test": 1,
        "Lazy Test": 1,
        "Conditional Test Logic": 3
      }
    },
    "testCharOverflow": {
      "name": "testCharOverflow",
      "mvn_run": "org.apache.commons.lang3.RandomStringUtilsTest#testCharOverflow",
      "smells": {
        "Lazy Test": 1
      }
    },
    "testLang100": {
      "name": "testLang100",
      "mvn_run": "org.apache.commons.lang3.RandomStringUtilsTest#testLang100",
      "smells": {
        "Lazy Test": 1,
        "Assertion Roulette": 3,
        "Conditional Test Logic": 1
      }
    },
    "testExceptions": {
      "name": "testExceptions",
      "mvn_run": "org.apache.commons.lang3.RandomStringUtilsTest#testExceptions",
      "smells": {
        "Lazy Test": 1
      }
    },
    "testLANG807": {
      "name": "testLANG807",
      "mvn_run": "org.apache.commons.lang3.RandomStringUtilsTest#testLANG807",
      "smells": {
        "Lazy Test": 1
      }
    },
    "testRandomGraphRange": {
      "name": "testRandomGraphRange",
      "mvn_run": "org.apache.commons.lang3.RandomStringUtilsTest#testRandomGraphRange",
      "smells": {
        "Lazy Test": 1,
        "Conditional Test Logic": 3
      }
    },
    "testRandomPrintRange": {
      "name": "testRandomPrintRange",
      "mvn_run": "org.apache.commons.lang3.RandomStringUtilsTest#testRandomPrintRange",
      "smells": {
        "Lazy Test": 1,
        "Conditional Test Logic": 3
      }
    },
    "testRandomAlphabeticRange": {
      "name": "testRandomAlphabeticRange",
      "mvn_run": "org.apache.commons.lang3.RandomStringUtilsTest#testRandomAlphabeticRange",
      "smells": {
        "Lazy Test": 1,
        "Conditional Test Logic": 3
      }
    },
    "testRandomAlphabetic": {
      "name": "testRandomAlphabetic",
      "mvn_run": "org.apache.commons.lang3.RandomStringUtilsTest#testRandomAlphabetic",
      "smells": {
        "Lazy Test": 1,
        "Conditional Test Logic": 4
      }
    },
    "testRandomAlphanumericRange": {
      "name": "testRandomAlphanumericRange",
      "mvn_run": "org.apache.commons.lang3.RandomStringUtilsTest#testRandomAlphanumericRange",
      "smells": {
        "Lazy Test": 1,
        "Conditional Test Logic": 3
      }
    },
    "testRandomAlphaNumeric": {
      "name": "testRandomAlphaNumeric",
      "mvn_run": "org.apache.commons.lang3.RandomStringUtilsTest#testRandomAlphaNumeric",
      "smells": {
        "Lazy Test": 1,
        "Conditional Test Logic": 4
      }
    },
    "testRandomAsciiRange": {
      "name": "testRandomAsciiRange",
      "mvn_run": "org.apache.commons.lang3.RandomStringUtilsTest#testRandomAsciiRange",
      "smells": {
        "Lazy Test": 1,
        "Conditional Test Logic": 3
      }
    },
    "testRandomAscii": {
      "name": "testRandomAscii",
      "mvn_run": "org.apache.commons.lang3.RandomStringUtilsTest#testRandomAscii",
      "smells": {
        "Lazy Test": 1,
        "Conditional Test Logic": 4
      }
    },
    "testRandomNumericRange": {
      "name": "testRandomNumericRange",
      "mvn_run": "org.apache.commons.lang3.RandomStringUtilsTest#testRandomNumericRange",
      "smells": {
        "Lazy Test": 1,
        "Conditional Test Logic": 3
      }
    },
    "testRandomNumeric": {
      "name": "testRandomNumeric",
      "mvn_run": "org.apache.commons.lang3.RandomStringUtilsTest#testRandomNumeric",
      "smells": {
        "Lazy Test": 1,
        "Conditional Test Logic": 4
      }
    }
  },
  "org.apache.commons.lang3.ArchUtilsTest": {
    "testGetProcessor": {
      "name": "testGetProcessor",
      "mvn_run": "org.apache.commons.lang3.ArchUtilsTest#testGetProcessor",
      "smells": {
        "Sensitive Equality": 1,
        "Lazy Test": 1,
        "Assertion Roulette": 5
      }
    },
    "testArch": {
      "name": "testArch",
      "mvn_run": "org.apache.commons.lang3.ArchUtilsTest#testArch",
      "smells": {
        "Verbose Test": 1,
        "Lazy Test": 1,
        "Duplicate Assert": 6,
        "Assertion Roulette": 10
      }
    },
    "testIs64BitJVM": {
      "name": "testIs64BitJVM",
      "mvn_run": "org.apache.commons.lang3.ArchUtilsTest#testIs64BitJVM",
      "smells": {
        "Verbose Test": 1,
        "Lazy Test": 1,
        "Duplicate Assert": 4,
        "Assertion Roulette": 8
      }
    },
    "testIs32BitJVM": {
      "name": "testIs32BitJVM",
      "mvn_run": "org.apache.commons.lang3.ArchUtilsTest#testIs32BitJVM",
      "smells": {
        "Lazy Test": 1,
        "Duplicate Assert": 4,
        "Assertion Roulette": 5
      }
    },
    "testArchLabels": {
      "name": "testArchLabels",
      "mvn_run": "org.apache.commons.lang3.ArchUtilsTest#testArchLabels",
      "smells": {
        "Assertion Roulette": 1,
        "Conditional Test Logic": 1
      }
    },
    "testTypeLabels": {
      "name": "testTypeLabels",
      "mvn_run": "org.apache.commons.lang3.ArchUtilsTest#testTypeLabels",
      "smells": {
        "Assertion Roulette": 1,
        "Conditional Test Logic": 1
      }
    }
  },
  "org.apache.commons.lang3.concurrent.ConcurrentUtilsTest": {
    "testHandleCauseNull": {
      "name": "testHandleCauseNull",
      "mvn_run": "org.apache.commons.lang3.concurrent.ConcurrentUtilsTest#testHandleCauseNull",
      "smells": {
        "Unknown Test": 1,
        "Lazy Test": 1
      }
    },
    "testHandleCauseUncheckedNull": {
      "name": "testHandleCauseUncheckedNull",
      "mvn_run": "org.apache.commons.lang3.concurrent.ConcurrentUtilsTest#testHandleCauseUncheckedNull",
      "smells": {
        "Unknown Test": 1,
        "Lazy Test": 1
      }
    },
    "testConstantFuture_Integer": {
      "name": "testConstantFuture_Integer",
      "mvn_run": "org.apache.commons.lang3.concurrent.ConcurrentUtilsTest#testConstantFuture_Integer",
      "smells": {
        "Magic Number Test": 2,
        "Lazy Test": 5,
        "Eager Test": 1,
        "Assertion Roulette": 7
      }
    },
    "testConstantFuture_null": {
      "name": "testConstantFuture_null",
      "mvn_run": "org.apache.commons.lang3.concurrent.ConcurrentUtilsTest#testConstantFuture_null",
      "smells": {
        "Magic Number Test": 2,
        "Lazy Test": 5,
        "Eager Test": 1,
        "Assertion Roulette": 7
      }
    },
    "testPutIfAbsentKeyPresent": {
      "name": "testPutIfAbsentKeyPresent",
      "mvn_run": "org.apache.commons.lang3.concurrent.ConcurrentUtilsTest#testPutIfAbsentKeyPresent",
      "smells": {
        "Magic Number Test": 1,
        "Lazy Test": 1,
        "Assertion Roulette": 2
      }
    },
    "testPutIfAbsentNullMap": {
      "name": "testPutIfAbsentNullMap",
      "mvn_run": "org.apache.commons.lang3.concurrent.ConcurrentUtilsTest#testPutIfAbsentNullMap",
      "smells": {
        "Magic Number Test": 1,
        "Lazy Test": 1
      }
    },
    "testExtractCauseUncheckedChecked": {
      "name": "testExtractCauseUncheckedChecked",
      "mvn_run": "org.apache.commons.lang3.concurrent.ConcurrentUtilsTest#testExtractCauseUncheckedChecked",
      "smells": {
        "Lazy Test": 1,
        "Assertion Roulette": 1
      }
    },
    "testExtractCauseUncheckedUncheckedException": {
      "name": "testExtractCauseUncheckedUncheckedException",
      "mvn_run": "org.apache.commons.lang3.concurrent.ConcurrentUtilsTest#testExtractCauseUncheckedUncheckedException",
      "smells": {
        "Lazy Test": 1,
        "Assertion Roulette": 1
      }
    },
    "testExtractCauseUncheckedError": {
      "name": "testExtractCauseUncheckedError",
      "mvn_run": "org.apache.commons.lang3.concurrent.ConcurrentUtilsTest#testExtractCauseUncheckedError",
      "smells": {
        "Lazy Test": 1,
        "Assertion Roulette": 1
      }
    },
    "testExtractCauseUncheckedNullCause": {
      "name": "testExtractCauseUncheckedNullCause",
      "mvn_run": "org.apache.commons.lang3.concurrent.ConcurrentUtilsTest#testExtractCauseUncheckedNullCause",
      "smells": {
        "Lazy Test": 1
      }
    },
    "testExtractCauseUncheckedNull": {
      "name": "testExtractCauseUncheckedNull",
      "mvn_run": "org.apache.commons.lang3.concurrent.ConcurrentUtilsTest#testExtractCauseUncheckedNull",
      "smells": {
        "Lazy Test": 1
      }
    },
    "testCreateIfAbsentNullInit": {
      "name": "testCreateIfAbsentNullInit",
      "mvn_run": "org.apache.commons.lang3.concurrent.ConcurrentUtilsTest#testCreateIfAbsentNullInit",
      "smells": {
        "Lazy Test": 1,
        "Assertion Roulette": 1
      }
    },
    "testCreateIfAbsentNullMap": {
      "name": "testCreateIfAbsentNullMap",
      "mvn_run": "org.apache.commons.lang3.concurrent.ConcurrentUtilsTest#testCreateIfAbsentNullMap",
      "smells": {
        "Lazy Test": 1
      }
    },
    "testCreateIfAbsentKeyNotPresent": {
      "name": "testCreateIfAbsentKeyNotPresent",
      "mvn_run": "org.apache.commons.lang3.concurrent.ConcurrentUtilsTest#testCreateIfAbsentKeyNotPresent",
      "smells": {
        "Lazy Test": 2,
        "Eager Test": 1,
        "Assertion Roulette": 2
      }
    },
    "testCreateIfAbsentKeyPresent": {
      "name": "testCreateIfAbsentKeyPresent",
      "mvn_run": "org.apache.commons.lang3.concurrent.ConcurrentUtilsTest#testCreateIfAbsentKeyPresent",
      "smells": {
        "Lazy Test": 1,
        "Assertion Roulette": 2
      }
    },
    "testHandleCauseUncheckedChecked": {
      "name": "testHandleCauseUncheckedChecked",
      "mvn_run": "org.apache.commons.lang3.concurrent.ConcurrentUtilsTest#testHandleCauseUncheckedChecked",
      "smells": {
        "Lazy Test": 1,
        "Assertion Roulette": 1
      }
    },
    "testHandleCauseUncheckedUncheckedException": {
      "name": "testHandleCauseUncheckedUncheckedException",
      "mvn_run": "org.apache.commons.lang3.concurrent.ConcurrentUtilsTest#testHandleCauseUncheckedUncheckedException",
      "smells": {
        "Lazy Test": 1,
        "Assertion Roulette": 1
      }
    },
    "testHandleCauseUncheckedError": {
      "name": "testHandleCauseUncheckedError",
      "mvn_run": "org.apache.commons.lang3.concurrent.ConcurrentUtilsTest#testHandleCauseUncheckedError",
      "smells": {
        "Lazy Test": 1,
        "Assertion Roulette": 1
      }
    },
    "testInitializeUncheckedEx": {
      "name": "testInitializeUncheckedEx",
      "mvn_run": "org.apache.commons.lang3.concurrent.ConcurrentUtilsTest#testInitializeUncheckedEx",
      "smells": {
        "Lazy Test": 2,
        "Eager Test": 1,
        "Assertion Roulette": 1
      }
    },
    "testInitializeUnchecked": {
      "name": "testInitializeUnchecked",
      "mvn_run": "org.apache.commons.lang3.concurrent.ConcurrentUtilsTest#testInitializeUnchecked",
      "smells": {
        "Lazy Test": 2,
        "Eager Test": 1,
        "Assertion Roulette": 1
      }
    },
    "testInitializeUncheckedNull": {
      "name": "testInitializeUncheckedNull",
      "mvn_run": "org.apache.commons.lang3.concurrent.ConcurrentUtilsTest#testInitializeUncheckedNull",
      "smells": {
        "Lazy Test": 1
      }
    },
    "testCreateIfAbsentUncheckedException": {
      "name": "testCreateIfAbsentUncheckedException",
      "mvn_run": "org.apache.commons.lang3.concurrent.ConcurrentUtilsTest#testCreateIfAbsentUncheckedException",
      "smells": {
        "Lazy Test": 2,
        "Eager Test": 1,
        "Assertion Roulette": 1
      }
    },
    "testCreateIfAbsentUncheckedSuccess": {
      "name": "testCreateIfAbsentUncheckedSuccess",
      "mvn_run": "org.apache.commons.lang3.concurrent.ConcurrentUtilsTest#testCreateIfAbsentUncheckedSuccess",
      "smells": {
        "Lazy Test": 1,
        "Assertion Roulette": 2
      }
    },
    "testHandleCauseChecked": {
      "name": "testHandleCauseChecked",
      "mvn_run": "org.apache.commons.lang3.concurrent.ConcurrentUtilsTest#testHandleCauseChecked",
      "smells": {
        "Lazy Test": 1,
        "Assertion Roulette": 1
      }
    },
    "testHandleCauseUncheckedException": {
      "name": "testHandleCauseUncheckedException",
      "mvn_run": "org.apache.commons.lang3.concurrent.ConcurrentUtilsTest#testHandleCauseUncheckedException",
      "smells": {
        "Lazy Test": 1,
        "Assertion Roulette": 1
      }
    },
    "testHandleCauseError": {
      "name": "testHandleCauseError",
      "mvn_run": "org.apache.commons.lang3.concurrent.ConcurrentUtilsTest#testHandleCauseError",
      "smells": {
        "Lazy Test": 1,
        "Assertion Roulette": 1
      }
    },
    "testInitialize": {
      "name": "testInitialize",
      "mvn_run": "org.apache.commons.lang3.concurrent.ConcurrentUtilsTest#testInitialize",
      "smells": {
        "Lazy Test": 2,
        "Eager Test": 1,
        "Assertion Roulette": 1
      }
    },
    "testInitializeNull": {
      "name": "testInitializeNull",
      "mvn_run": "org.apache.commons.lang3.concurrent.ConcurrentUtilsTest#testInitializeNull",
      "smells": {
        "Lazy Test": 1
      }
    },
    "testExtractCauseChecked": {
      "name": "testExtractCauseChecked",
      "mvn_run": "org.apache.commons.lang3.concurrent.ConcurrentUtilsTest#testExtractCauseChecked",
      "smells": {
        "Lazy Test": 1,
        "Assertion Roulette": 1
      }
    },
    "testExtractCauseUncheckedException": {
      "name": "testExtractCauseUncheckedException",
      "mvn_run": "org.apache.commons.lang3.concurrent.ConcurrentUtilsTest#testExtractCauseUncheckedException",
      "smells": {
        "Lazy Test": 1
      }
    },
    "testExtractCauseError": {
      "name": "testExtractCauseError",
      "mvn_run": "org.apache.commons.lang3.concurrent.ConcurrentUtilsTest#testExtractCauseError",
      "smells": {
        "Lazy Test": 1,
        "Assertion Roulette": 1
      }
    },
    "testExtractCauseNullCause": {
      "name": "testExtractCauseNullCause",
      "mvn_run": "org.apache.commons.lang3.concurrent.ConcurrentUtilsTest#testExtractCauseNullCause",
      "smells": {
        "Lazy Test": 1
      }
    },
    "testExtractCauseNull": {
      "name": "testExtractCauseNull",
      "mvn_run": "org.apache.commons.lang3.concurrent.ConcurrentUtilsTest#testExtractCauseNull",
      "smells": {
        "Lazy Test": 1
      }
    },
    "testPutIfAbsentKeyNotPresent": {
      "name": "testPutIfAbsentKeyNotPresent",
      "mvn_run": "org.apache.commons.lang3.concurrent.ConcurrentUtilsTest#testPutIfAbsentKeyNotPresent",
      "smells": {
        "Lazy Test": 1,
        "Assertion Roulette": 2
      }
    }
  },
  "org.apache.commons.lang3.concurrent.UncheckedExecutionExceptionTest": {
    "testConstructWithCause": {
      "name": "testConstructWithCause",
      "mvn_run": "org.apache.commons.lang3.concurrent.UncheckedExecutionExceptionTest#testConstructWithCause",
      "smells": {
        "Assertion Roulette": 1
      }
    }
  },
  "org.apache.commons.lang3.concurrent.locks.LockingVisitorsTest": {
    "testReentrantReadWriteLockNotExclusive": {
      "name": "testReentrantReadWriteLockNotExclusive",
      "mvn_run": "org.apache.commons.lang3.concurrent.locks.LockingVisitorsTest#testReentrantReadWriteLockNotExclusive",
      "smells": {
        "Lazy Test": 1,
        "Assertion Roulette": 1
      }
    },
    "testReentrantReadWriteLockExclusive": {
      "name": "testReentrantReadWriteLockExclusive",
      "mvn_run": "org.apache.commons.lang3.concurrent.locks.LockingVisitorsTest#testReentrantReadWriteLockExclusive",
      "smells": {
        "Lazy Test": 1,
        "Assertion Roulette": 1
      }
    },
    "testStampedLockNotExclusive": {
      "name": "testStampedLockNotExclusive",
      "mvn_run": "org.apache.commons.lang3.concurrent.locks.LockingVisitorsTest#testStampedLockNotExclusive",
      "smells": {
        "Lazy Test": 1,
        "Assertion Roulette": 1
      }
    },
    "testStampedLockExclusive": {
      "name": "testStampedLockExclusive",
      "mvn_run": "org.apache.commons.lang3.concurrent.locks.LockingVisitorsTest#testStampedLockExclusive",
      "smells": {
        "Lazy Test": 1,
        "Assertion Roulette": 1
      }
    },
    "testResultValidation": {
      "name": "testResultValidation",
      "mvn_run": "org.apache.commons.lang3.concurrent.locks.LockingVisitorsTest#testResultValidation",
      "smells": {
        "Lazy Test": 1,
        "Eager Test": 1,
        "Assertion Roulette": 4
      }
    }
  },
  "org.apache.commons.lang3.concurrent.AtomicSafeInitializerTest": {
    "testNumberOfInitializeInvocations": {
      "name": "testNumberOfInitializeInvocations",
      "mvn_run": "org.apache.commons.lang3.concurrent.AtomicSafeInitializerTest#testNumberOfInitializeInvocations",
      "smells": {
        "Magic Number Test": 1,
        "Assertion Roulette": 1
      }
    }
  },
  "org.apache.commons.lang3.concurrent.BackgroundInitializerTest": {
    "testInitialize": {
      "name": "testInitialize",
      "mvn_run": "org.apache.commons.lang3.concurrent.BackgroundInitializerTest#testInitialize",
      "smells": {
        "Unknown Test": 1,
        "Lazy Test": 2
      }
    },
    "testGetInterruptedException": {
      "name": "testGetInterruptedException",
      "mvn_run": "org.apache.commons.lang3.concurrent.BackgroundInitializerTest#testGetInterruptedException",
      "smells": {
        "Lazy Test": 4,
        "Eager Test": 1
      }
    },
    "testSetExternalExecutorAfterStart": {
      "name": "testSetExternalExecutorAfterStart",
      "mvn_run": "org.apache.commons.lang3.concurrent.BackgroundInitializerTest#testSetExternalExecutorAfterStart",
      "smells": {
        "Lazy Test": 6,
        "Eager Test": 1,
        "Exception Catching Throwing": 1
      }
    },
    "testIsStartedAfterGet": {
      "name": "testIsStartedAfterGet",
      "mvn_run": "org.apache.commons.lang3.concurrent.BackgroundInitializerTest#testIsStartedAfterGet",
      "smells": {
        "Lazy Test": 4,
        "Eager Test": 1
      }
    },
    "testIsStartedTrue": {
      "name": "testIsStartedTrue",
      "mvn_run": "org.apache.commons.lang3.concurrent.BackgroundInitializerTest#testIsStartedTrue",
      "smells": {
        "Lazy Test": 4,
        "Eager Test": 1
      }
    },
    "testGetCheckedException": {
      "name": "testGetCheckedException",
      "mvn_run": "org.apache.commons.lang3.concurrent.BackgroundInitializerTest#testGetCheckedException",
      "smells": {
        "Lazy Test": 2,
        "Assertion Roulette": 1
      }
    },
    "testGetRuntimeException": {
      "name": "testGetRuntimeException",
      "mvn_run": "org.apache.commons.lang3.concurrent.BackgroundInitializerTest#testGetRuntimeException",
      "smells": {
        "Lazy Test": 2,
        "Assertion Roulette": 1
      }
    },
    "testStartMultipleTimes": {
      "name": "testStartMultipleTimes",
      "mvn_run": "org.apache.commons.lang3.concurrent.BackgroundInitializerTest#testStartMultipleTimes",
      "smells": {
        "Lazy Test": 2,
        "Conditional Test Logic": 1
      }
    },
    "testSetExternalExecutor": {
      "name": "testSetExternalExecutor",
      "mvn_run": "org.apache.commons.lang3.concurrent.BackgroundInitializerTest#testSetExternalExecutor",
      "smells": {
        "Lazy Test": 6,
        "Eager Test": 1,
        "Assertion Roulette": 2,
        "Exception Catching Throwing": 1
      }
    },
    "testInitializeTempExecutor": {
      "name": "testInitializeTempExecutor",
      "mvn_run": "org.apache.commons.lang3.concurrent.BackgroundInitializerTest#testInitializeTempExecutor",
      "smells": {
        "Lazy Test": 4,
        "Eager Test": 1
      }
    },
    "testGetActiveExecutorTemp": {
      "name": "testGetActiveExecutorTemp",
      "mvn_run": "org.apache.commons.lang3.concurrent.BackgroundInitializerTest#testGetActiveExecutorTemp",
      "smells": {
        "Lazy Test": 4,
        "Eager Test": 1
      }
    },
    "testGetActiveExecutorExternal": {
      "name": "testGetActiveExecutorExternal",
      "mvn_run": "org.apache.commons.lang3.concurrent.BackgroundInitializerTest#testGetActiveExecutorExternal",
      "smells": {
        "Lazy Test": 4,
        "Eager Test": 1,
        "Assertion Roulette": 1,
        "Exception Catching Throwing": 1
      }
    },
    "testIsStartedFalse": {
      "name": "testIsStartedFalse",
      "mvn_run": "org.apache.commons.lang3.concurrent.BackgroundInitializerTest#testIsStartedFalse",
      "smells": {
        "Lazy Test": 2
      }
    },
    "testGetActiveExecutorBeforeStart": {
      "name": "testGetActiveExecutorBeforeStart",
      "mvn_run": "org.apache.commons.lang3.concurrent.BackgroundInitializerTest#testGetActiveExecutorBeforeStart",
      "smells": {
        "Lazy Test": 2
      }
    }
  },
  "org.apache.commons.lang3.concurrent.MultiBackgroundInitializerTest": {
    "testInitializeChildWithExecutor": {
      "name": "testInitializeChildWithExecutor",
      "mvn_run": "org.apache.commons.lang3.concurrent.MultiBackgroundInitializerTest#testInitializeChildWithExecutor",
      "smells": {
        "Unknown Test": 1,
        "Lazy Test": 2,
        "Exception Catching Throwing": 1
      }
    },
    "testInitializeNested": {
      "name": "testInitializeNested",
      "mvn_run": "org.apache.commons.lang3.concurrent.MultiBackgroundInitializerTest#testInitializeNested",
      "smells": {
        "Lazy Test": 10,
        "Eager Test": 1,
        "Assertion Roulette": 1,
        "Conditional Test Logic": 2
      }
    },
    "testInitializeResultsIsSuccessfulFalse": {
      "name": "testInitializeResultsIsSuccessfulFalse",
      "mvn_run": "org.apache.commons.lang3.concurrent.MultiBackgroundInitializerTest#testInitializeResultsIsSuccessfulFalse",
      "smells": {
        "Lazy Test": 4,
        "Eager Test": 1
      }
    },
    "testInitializeResultsIsSuccessfulTrue": {
      "name": "testInitializeResultsIsSuccessfulTrue",
      "mvn_run": "org.apache.commons.lang3.concurrent.MultiBackgroundInitializerTest#testInitializeResultsIsSuccessfulTrue",
      "smells": {
        "Lazy Test": 4,
        "Eager Test": 1
      }
    },
    "testInitializeEx": {
      "name": "testInitializeEx",
      "mvn_run": "org.apache.commons.lang3.concurrent.MultiBackgroundInitializerTest#testInitializeEx",
      "smells": {
        "Lazy Test": 8,
        "Eager Test": 1,
        "Assertion Roulette": 1
      }
    },
    "testInitializeRuntimeEx": {
      "name": "testInitializeRuntimeEx",
      "mvn_run": "org.apache.commons.lang3.concurrent.MultiBackgroundInitializerTest#testInitializeRuntimeEx",
      "smells": {
        "Lazy Test": 2,
        "Assertion Roulette": 1
      }
    },
    "testAddInitializerAfterStart": {
      "name": "testAddInitializerAfterStart",
      "mvn_run": "org.apache.commons.lang3.concurrent.MultiBackgroundInitializerTest#testAddInitializerAfterStart",
      "smells": {
        "Lazy Test": 2
      }
    },
    "testAddInitializerNullInit": {
      "name": "testAddInitializerNullInit",
      "mvn_run": "org.apache.commons.lang3.concurrent.MultiBackgroundInitializerTest#testAddInitializerNullInit",
      "smells": {
        "Lazy Test": 2
      }
    },
    "testAddInitializerNullName": {
      "name": "testAddInitializerNullName",
      "mvn_run": "org.apache.commons.lang3.concurrent.MultiBackgroundInitializerTest#testAddInitializerNullName",
      "smells": {
        "Lazy Test": 2
      }
    },
    "testResultGetExceptionUnknown": {
      "name": "testResultGetExceptionUnknown",
      "mvn_run": "org.apache.commons.lang3.concurrent.MultiBackgroundInitializerTest#testResultGetExceptionUnknown",
      "smells": {
        "Lazy Test": 2
      }
    },
    "testResultGetResultObjectUnknown": {
      "name": "testResultGetResultObjectUnknown",
      "mvn_run": "org.apache.commons.lang3.concurrent.MultiBackgroundInitializerTest#testResultGetResultObjectUnknown",
      "smells": {
        "Lazy Test": 2
      }
    },
    "testResultIsExceptionUnknown": {
      "name": "testResultIsExceptionUnknown",
      "mvn_run": "org.apache.commons.lang3.concurrent.MultiBackgroundInitializerTest#testResultIsExceptionUnknown",
      "smells": {
        "Lazy Test": 2
      }
    },
    "testInitializeExternalExec": {
      "name": "testInitializeExternalExec",
      "mvn_run": "org.apache.commons.lang3.concurrent.MultiBackgroundInitializerTest#testInitializeExternalExec",
      "smells": {
        "Lazy Test": 2,
        "Assertion Roulette": 1,
        "Exception Catching Throwing": 1
      }
    },
    "testResultInitializerNamesModify": {
      "name": "testResultInitializerNamesModify",
      "mvn_run": "org.apache.commons.lang3.concurrent.MultiBackgroundInitializerTest#testResultInitializerNamesModify",
      "smells": {
        "Lazy Test": 2
      }
    },
    "testInitializeNoChildren": {
      "name": "testInitializeNoChildren",
      "mvn_run": "org.apache.commons.lang3.concurrent.MultiBackgroundInitializerTest#testInitializeNoChildren",
      "smells": {
        "Lazy Test": 2
      }
    },
    "testResultGetInitializerUnknown": {
      "name": "testResultGetInitializerUnknown",
      "mvn_run": "org.apache.commons.lang3.concurrent.MultiBackgroundInitializerTest#testResultGetInitializerUnknown",
      "smells": {
        "Lazy Test": 2
      }
    },
    "setUp": {
      "name": "setUp",
      "mvn_run": "org.apache.commons.lang3.concurrent.MultiBackgroundInitializerTest#setUp",
      "smells": {
        "General Fixture": 1
      }
    }
  },
  "org.apache.commons.lang3.concurrent.FutureTasksTest": {
    "testRun": {
      "name": "testRun",
      "mvn_run": "org.apache.commons.lang3.concurrent.FutureTasksTest#testRun",
      "smells": {
        "Assertion Roulette": 2
      }
    }
  },
  "org.apache.commons.lang3.concurrent.CircuitBreakingExceptionTest": {
    "testWithoutMessage": {
      "name": "testWithoutMessage",
      "mvn_run": "org.apache.commons.lang3.concurrent.CircuitBreakingExceptionTest#testWithoutMessage",
      "smells": {
        "Lazy Test": 1,
        "Assertion Roulette": 4
      }
    },
    "testWithoutCause": {
      "name": "testWithoutCause",
      "mvn_run": "org.apache.commons.lang3.concurrent.CircuitBreakingExceptionTest#testWithoutCause",
      "smells": {
        "Lazy Test": 1,
        "Assertion Roulette": 3
      }
    },
    "testWithCauseAndMessage": {
      "name": "testWithCauseAndMessage",
      "mvn_run": "org.apache.commons.lang3.concurrent.CircuitBreakingExceptionTest#testWithCauseAndMessage",
      "smells": {
        "Lazy Test": 1,
        "Assertion Roulette": 4
      }
    },
    "testThrowingEmptyException": {
      "name": "testThrowingEmptyException",
      "mvn_run": "org.apache.commons.lang3.concurrent.CircuitBreakingExceptionTest#testThrowingEmptyException",
      "smells": {
        "Lazy Test": 1
      }
    },
    "testThrowingExceptionWithCause": {
      "name": "testThrowingExceptionWithCause",
      "mvn_run": "org.apache.commons.lang3.concurrent.CircuitBreakingExceptionTest#testThrowingExceptionWithCause",
      "smells": {
        "Lazy Test": 1
      }
    },
    "testThrowingExceptionWithMessage": {
      "name": "testThrowingExceptionWithMessage",
      "mvn_run": "org.apache.commons.lang3.concurrent.CircuitBreakingExceptionTest#testThrowingExceptionWithMessage",
      "smells": {
        "Lazy Test": 1
      }
    },
    "testThrowingInformativeException": {
      "name": "testThrowingInformativeException",
      "mvn_run": "org.apache.commons.lang3.concurrent.CircuitBreakingExceptionTest#testThrowingInformativeException",
      "smells": {
        "Lazy Test": 1
      }
    }
  },
  "org.apache.commons.lang3.concurrent.EventCountCircuitBreakerTest": {
    "testChangeEvents": {
      "name": "testChangeEvents",
      "mvn_run": "org.apache.commons.lang3.concurrent.EventCountCircuitBreakerTest#testChangeEvents",
      "smells": {
        "Unknown Test": 1,
        "Lazy Test": 9,
        "Eager Test": 1
      }
    },
    "testRemoveChangeListener": {
      "name": "testRemoveChangeListener",
      "mvn_run": "org.apache.commons.lang3.concurrent.EventCountCircuitBreakerTest#testRemoveChangeListener",
      "smells": {
        "Unknown Test": 1,
        "Lazy Test": 9,
        "Eager Test": 1
      }
    },
    "testStateTransitionGuarded": {
      "name": "testStateTransitionGuarded",
      "mvn_run": "org.apache.commons.lang3.concurrent.EventCountCircuitBreakerTest#testStateTransitionGuarded",
      "smells": {
        "Unknown Test": 1,
        "Lazy Test": 3,
        "Conditional Test Logic": 2
      }
    },
    "testChangeEventsGeneratedByAutomaticTransitions": {
      "name": "testChangeEventsGeneratedByAutomaticTransitions",
      "mvn_run": "org.apache.commons.lang3.concurrent.EventCountCircuitBreakerTest#testChangeEventsGeneratedByAutomaticTransitions",
      "smells": {
        "Unknown Test": 1,
        "Lazy Test": 6,
        "Eager Test": 1,
        "Conditional Test Logic": 1
      }
    },
    "testIntervalCalculation": {
      "name": "testIntervalCalculation",
      "mvn_run": "org.apache.commons.lang3.concurrent.EventCountCircuitBreakerTest#testIntervalCalculation",
      "smells": {
        "Magic Number Test": 1,
        "Lazy Test": 6,
        "Eager Test": 1,
        "Assertion Roulette": 2
      }
    },
    "testClose": {
      "name": "testClose",
      "mvn_run": "org.apache.commons.lang3.concurrent.EventCountCircuitBreakerTest#testClose",
      "smells": {
        "Lazy Test": 6,
        "Eager Test": 1,
        "Conditional Test Logic": 1
      }
    },
    "testAutomaticOpenStartsNewCheckInterval": {
      "name": "testAutomaticOpenStartsNewCheckInterval",
      "mvn_run": "org.apache.commons.lang3.concurrent.EventCountCircuitBreakerTest#testAutomaticOpenStartsNewCheckInterval",
      "smells": {
        "Lazy Test": 6,
        "Eager Test": 1,
        "Conditional Test Logic": 1
      }
    },
    "testClosingWhenThresholdReached": {
      "name": "testClosingWhenThresholdReached",
      "mvn_run": "org.apache.commons.lang3.concurrent.EventCountCircuitBreakerTest#testClosingWhenThresholdReached",
      "smells": {
        "Lazy Test": 9,
        "Eager Test": 1
      }
    },
    "testNotClosingOverThreshold": {
      "name": "testNotClosingOverThreshold",
      "mvn_run": "org.apache.commons.lang3.concurrent.EventCountCircuitBreakerTest#testNotClosingOverThreshold",
      "smells": {
        "Lazy Test": 6,
        "Eager Test": 1,
        "Conditional Test Logic": 1
      }
    },
    "testOpeningWhenThresholdReachedThroughBatch": {
      "name": "testOpeningWhenThresholdReachedThroughBatch",
      "mvn_run": "org.apache.commons.lang3.concurrent.EventCountCircuitBreakerTest#testOpeningWhenThresholdReachedThroughBatch",
      "smells": {
        "Lazy Test": 3
      }
    },
    "testOpeningWhenThresholdReached": {
      "name": "testOpeningWhenThresholdReached",
      "mvn_run": "org.apache.commons.lang3.concurrent.EventCountCircuitBreakerTest#testOpeningWhenThresholdReached",
      "smells": {
        "Lazy Test": 3,
        "Conditional Test Logic": 1
      }
    },
    "testNotOpeningCheckIntervalExceeded": {
      "name": "testNotOpeningCheckIntervalExceeded",
      "mvn_run": "org.apache.commons.lang3.concurrent.EventCountCircuitBreakerTest#testNotOpeningCheckIntervalExceeded",
      "smells": {
        "Lazy Test": 3,
        "Conditional Test Logic": 1
      }
    },
    "testNotOpeningUnderThreshold": {
      "name": "testNotOpeningUnderThreshold",
      "mvn_run": "org.apache.commons.lang3.concurrent.EventCountCircuitBreakerTest#testNotOpeningUnderThreshold",
      "smells": {
        "Lazy Test": 3,
        "Conditional Test Logic": 1
      }
    },
    "testNow": {
      "name": "testNow",
      "mvn_run": "org.apache.commons.lang3.concurrent.EventCountCircuitBreakerTest#testNow",
      "smells": {
        "Lazy Test": 3
      }
    },
    "testInitiallyClosed": {
      "name": "testInitiallyClosed",
      "mvn_run": "org.apache.commons.lang3.concurrent.EventCountCircuitBreakerTest#testInitiallyClosed",
      "smells": {
        "Lazy Test": 3
      }
    },
    "testDefaultClosingThreshold": {
      "name": "testDefaultClosingThreshold",
      "mvn_run": "org.apache.commons.lang3.concurrent.EventCountCircuitBreakerTest#testDefaultClosingThreshold",
      "smells": {
        "Lazy Test": 6,
        "Eager Test": 1,
        "Assertion Roulette": 2
      }
    },
    "testDefaultClosingInterval": {
      "name": "testDefaultClosingInterval",
      "mvn_run": "org.apache.commons.lang3.concurrent.EventCountCircuitBreakerTest#testDefaultClosingInterval",
      "smells": {
        "Lazy Test": 6,
        "Eager Test": 1,
        "Assertion Roulette": 1
      }
    },
    "testOpenStartsNewCheckInterval": {
      "name": "testOpenStartsNewCheckInterval",
      "mvn_run": "org.apache.commons.lang3.concurrent.EventCountCircuitBreakerTest#testOpenStartsNewCheckInterval",
      "smells": {
        "Lazy Test": 6,
        "Eager Test": 1
      }
    }
  },
  "org.apache.commons.lang3.concurrent.UncheckedTimeoutExceptionTest": {
    "testConstructWithCause": {
      "name": "testConstructWithCause",
      "mvn_run": "org.apache.commons.lang3.concurrent.UncheckedTimeoutExceptionTest#testConstructWithCause",
      "smells": {
        "Assertion Roulette": 1
      }
    }
  },
  "org.apache.commons.lang3.concurrent.ConstantInitializerTest": {
    "testEqualsTrue": {
      "name": "testEqualsTrue",
      "mvn_run": "org.apache.commons.lang3.concurrent.ConstantInitializerTest#testEqualsTrue",
      "smells": {
        "Unknown Test": 1
      }
    },
    "testEqualsFalse": {
      "name": "testEqualsFalse",
      "mvn_run": "org.apache.commons.lang3.concurrent.ConstantInitializerTest#testEqualsFalse",
      "smells": {
        "Unknown Test": 1
      }
    },
    "testEqualsWithOtherObjects": {
      "name": "testEqualsWithOtherObjects",
      "mvn_run": "org.apache.commons.lang3.concurrent.ConstantInitializerTest#testEqualsWithOtherObjects",
      "smells": {
        "Unknown Test": 1
      }
    },
    "testToStringNull": {
      "name": "testToStringNull",
      "mvn_run": "org.apache.commons.lang3.concurrent.ConstantInitializerTest#testToStringNull",
      "smells": {
        "Magic Number Test": 1,
        "Lazy Test": 1
      }
    },
    "testToString": {
      "name": "testToString",
      "mvn_run": "org.apache.commons.lang3.concurrent.ConstantInitializerTest#testToString",
      "smells": {
        "Lazy Test": 1
      }
    },
    "testGetObject": {
      "name": "testGetObject",
      "mvn_run": "org.apache.commons.lang3.concurrent.ConstantInitializerTest#testGetObject",
      "smells": {
        "Assertion Roulette": 1
      }
    },
    "testGet": {
      "name": "testGet",
      "mvn_run": "org.apache.commons.lang3.concurrent.ConstantInitializerTest#testGet",
      "smells": {
        "Assertion Roulette": 1
      }
    },
    "setUp": {
      "name": "setUp",
      "mvn_run": "org.apache.commons.lang3.concurrent.ConstantInitializerTest#setUp",
      "smells": {
        "General Fixture": 1
      }
    }
  },
  "org.apache.commons.lang3.concurrent.CallableBackgroundInitializerTest": {
    "testInitialize": {
      "name": "testInitialize",
      "mvn_run": "org.apache.commons.lang3.concurrent.CallableBackgroundInitializerTest#testInitialize",
      "smells": {
        "Magic Number Test": 1,
        "Assertion Roulette": 2
      }
    },
    "testInitExecutor": {
      "name": "testInitExecutor",
      "mvn_run": "org.apache.commons.lang3.concurrent.CallableBackgroundInitializerTest#testInitExecutor",
      "smells": {
        "Assertion Roulette": 1
      }
    },
    "testInitExecutorNullCallable": {
      "name": "testInitExecutorNullCallable",
      "mvn_run": "org.apache.commons.lang3.concurrent.CallableBackgroundInitializerTest#testInitExecutorNullCallable",
      "smells": {
        "Exception Catching Throwing": 1
      }
    }
  },
  "org.apache.commons.lang3.concurrent.BasicThreadFactoryTest": {
    "testBuildDefaults": {
      "name": "testBuildDefaults",
      "mvn_run": "org.apache.commons.lang3.concurrent.BasicThreadFactoryTest#testBuildDefaults",
      "smells": {
        "Unknown Test": 1,
        "Lazy Test": 1
      }
    },
    "testBuilderResetAfterBuild": {
      "name": "testBuilderResetAfterBuild",
      "mvn_run": "org.apache.commons.lang3.concurrent.BasicThreadFactoryTest#testBuilderResetAfterBuild",
      "smells": {
        "Unknown Test": 1,
        "Lazy Test": 4,
        "Eager Test": 1
      }
    },
    "testNewThreadDaemonTrue": {
      "name": "testNewThreadDaemonTrue",
      "mvn_run": "org.apache.commons.lang3.concurrent.BasicThreadFactoryTest#testNewThreadDaemonTrue",
      "smells": {
        "Unknown Test": 1
      }
    },
    "testNewThreadDaemonFalse": {
      "name": "testNewThreadDaemonFalse",
      "mvn_run": "org.apache.commons.lang3.concurrent.BasicThreadFactoryTest#testNewThreadDaemonFalse",
      "smells": {
        "Unknown Test": 1
      }
    },
    "testNewThreadNamingPattern": {
      "name": "testNewThreadNamingPattern",
      "mvn_run": "org.apache.commons.lang3.concurrent.BasicThreadFactoryTest#testNewThreadNamingPattern",
      "smells": {
        "Magic Number Test": 1,
        "Lazy Test": 4,
        "Eager Test": 1,
        "Assertion Roulette": 2,
        "Conditional Test Logic": 2
      }
    },
    "testNewThreadNoExHandler": {
      "name": "testNewThreadNoExHandler",
      "mvn_run": "org.apache.commons.lang3.concurrent.BasicThreadFactoryTest#testNewThreadNoExHandler",
      "smells": {
        "Lazy Test": 4,
        "Eager Test": 1,
        "Assertion Roulette": 2
      }
    },
    "testNewThreadExHandler": {
      "name": "testNewThreadExHandler",
      "mvn_run": "org.apache.commons.lang3.concurrent.BasicThreadFactoryTest#testNewThreadExHandler",
      "smells": {
        "Lazy Test": 5,
        "Eager Test": 1,
        "Assertion Roulette": 2
      }
    },
    "testNewThreadNoPriority": {
      "name": "testNewThreadNoPriority",
      "mvn_run": "org.apache.commons.lang3.concurrent.BasicThreadFactoryTest#testNewThreadNoPriority",
      "smells": {
        "Lazy Test": 4,
        "Eager Test": 1,
        "Assertion Roulette": 2
      }
    },
    "testNewThreadPriority": {
      "name": "testNewThreadPriority",
      "mvn_run": "org.apache.commons.lang3.concurrent.BasicThreadFactoryTest#testNewThreadPriority",
      "smells": {
        "Lazy Test": 5,
        "Eager Test": 1,
        "Assertion Roulette": 2
      }
    },
    "testNewThreadNoDaemonFlag": {
      "name": "testNewThreadNoDaemonFlag",
      "mvn_run": "org.apache.commons.lang3.concurrent.BasicThreadFactoryTest#testNewThreadNoDaemonFlag",
      "smells": {
        "Lazy Test": 3,
        "Eager Test": 1,
        "Assertion Roulette": 2
      }
    },
    "testNewThreadNoNamingPattern": {
      "name": "testNewThreadNoNamingPattern",
      "mvn_run": "org.apache.commons.lang3.concurrent.BasicThreadFactoryTest#testNewThreadNoNamingPattern",
      "smells": {
        "Lazy Test": 3,
        "Eager Test": 1,
        "Assertion Roulette": 2
      }
    },
    "testBuilderReset": {
      "name": "testBuilderReset",
      "mvn_run": "org.apache.commons.lang3.concurrent.BasicThreadFactoryTest#testBuilderReset",
      "smells": {
        "Lazy Test": 6,
        "Eager Test": 1,
        "Assertion Roulette": 1
      }
    },
    "testBuildNamingPatternNull": {
      "name": "testBuildNamingPatternNull",
      "mvn_run": "org.apache.commons.lang3.concurrent.BasicThreadFactoryTest#testBuildNamingPatternNull",
      "smells": {
        "Lazy Test": 1
      }
    },
    "testBuildUncaughtExceptionHandlerNull": {
      "name": "testBuildUncaughtExceptionHandlerNull",
      "mvn_run": "org.apache.commons.lang3.concurrent.BasicThreadFactoryTest#testBuildUncaughtExceptionHandlerNull",
      "smells": {
        "Lazy Test": 1
      }
    },
    "testBuildWrappedFactoryNull": {
      "name": "testBuildWrappedFactoryNull",
      "mvn_run": "org.apache.commons.lang3.concurrent.BasicThreadFactoryTest#testBuildWrappedFactoryNull",
      "smells": {
        "Lazy Test": 1
      }
    },
    "setUp": {
      "name": "setUp",
      "mvn_run": "org.apache.commons.lang3.concurrent.BasicThreadFactoryTest#setUp",
      "smells": {
        "General Fixture": 1
      }
    }
  },
  "org.apache.commons.lang3.concurrent.TimedSemaphoreTest": {
    "testShutdownMultipleTimes": {
      "name": "testShutdownMultipleTimes",
      "mvn_run": "org.apache.commons.lang3.concurrent.TimedSemaphoreTest#testShutdownMultipleTimes",
      "smells": {
        "Unknown Test": 1,
        "Lazy Test": 8,
        "Eager Test": 1,
        "Conditional Test Logic": 1
      }
    },
    "testAcquireNoLimit": {
      "name": "testAcquireNoLimit",
      "mvn_run": "org.apache.commons.lang3.concurrent.TimedSemaphoreTest#testAcquireNoLimit",
      "smells": {
        "Unknown Test": 1
      }
    },
    "testInit": {
      "name": "testInit",
      "mvn_run": "org.apache.commons.lang3.concurrent.TimedSemaphoreTest#testInit",
      "smells": {
        "Magic Number Test": 2,
        "Lazy Test": 20,
        "Eager Test": 1,
        "Assertion Roulette": 6
      }
    },
    "testAcquireLimit": {
      "name": "testAcquireLimit",
      "mvn_run": "org.apache.commons.lang3.concurrent.TimedSemaphoreTest#testAcquireLimit",
      "smells": {
        "Magic Number Test": 3,
        "Lazy Test": 20,
        "Eager Test": 1,
        "Assertion Roulette": 3
      }
    },
    "testAcquireMultipleThreads": {
      "name": "testAcquireMultipleThreads",
      "mvn_run": "org.apache.commons.lang3.concurrent.TimedSemaphoreTest#testAcquireMultipleThreads",
      "smells": {
        "Magic Number Test": 2,
        "Lazy Test": 8,
        "Eager Test": 1,
        "Assertion Roulette": 2,
        "Conditional Test Logic": 3
      }
    },
    "testAcquireMultiplePeriods": {
      "name": "testAcquireMultiplePeriods",
      "mvn_run": "org.apache.commons.lang3.concurrent.TimedSemaphoreTest#testAcquireMultiplePeriods",
      "smells": {
        "Magic Number Test": 1,
        "Lazy Test": 8,
        "Eager Test": 1
      }
    },
    "testGetAverageCallsPerPeriod": {
      "name": "testGetAverageCallsPerPeriod",
      "mvn_run": "org.apache.commons.lang3.concurrent.TimedSemaphoreTest#testGetAverageCallsPerPeriod",
      "smells": {
        "Magic Number Test": 2,
        "Lazy Test": 16,
        "Eager Test": 1,
        "Assertion Roulette": 2
      }
    },
    "testStartTimer": {
      "name": "testStartTimer",
      "mvn_run": "org.apache.commons.lang3.concurrent.TimedSemaphoreTest#testStartTimer",
      "smells": {
        "Sleepy Test": 1,
        "Lazy Test": 4,
        "Eager Test": 1,
        "Conditional Test Logic": 1
      }
    },
    "testShutdownOwnExecutor": {
      "name": "testShutdownOwnExecutor",
      "mvn_run": "org.apache.commons.lang3.concurrent.TimedSemaphoreTest#testShutdownOwnExecutor",
      "smells": {
        "Lazy Test": 16,
        "Eager Test": 1
      }
    },
    "testInitDefaultService": {
      "name": "testInitDefaultService",
      "mvn_run": "org.apache.commons.lang3.concurrent.TimedSemaphoreTest#testInitDefaultService",
      "smells": {
        "Lazy Test": 16,
        "Eager Test": 1
      }
    },
    "testTryAcquireAfterShutdown": {
      "name": "testTryAcquireAfterShutdown",
      "mvn_run": "org.apache.commons.lang3.concurrent.TimedSemaphoreTest#testTryAcquireAfterShutdown",
      "smells": {
        "Lazy Test": 8,
        "Eager Test": 1
      }
    },
    "testTryAcquire": {
      "name": "testTryAcquire",
      "mvn_run": "org.apache.commons.lang3.concurrent.TimedSemaphoreTest#testTryAcquire",
      "smells": {
        "Lazy Test": 4,
        "Assertion Roulette": 1,
        "Conditional Test Logic": 3
      }
    },
    "testGetAvailablePermits": {
      "name": "testGetAvailablePermits",
      "mvn_run": "org.apache.commons.lang3.concurrent.TimedSemaphoreTest#testGetAvailablePermits",
      "smells": {
        "Lazy Test": 12,
        "Eager Test": 1,
        "Assertion Roulette": 2,
        "Conditional Test Logic": 1
      }
    },
    "testPassAfterShutdown": {
      "name": "testPassAfterShutdown",
      "mvn_run": "org.apache.commons.lang3.concurrent.TimedSemaphoreTest#testPassAfterShutdown",
      "smells": {
        "Lazy Test": 8,
        "Eager Test": 1
      }
    },
    "testShutdownSharedExecutorNoTask": {
      "name": "testShutdownSharedExecutorNoTask",
      "mvn_run": "org.apache.commons.lang3.concurrent.TimedSemaphoreTest#testShutdownSharedExecutorNoTask",
      "smells": {
        "Lazy Test": 12,
        "Eager Test": 1
      }
    },
    "testInitInvalidPeriod": {
      "name": "testInitInvalidPeriod",
      "mvn_run": "org.apache.commons.lang3.concurrent.TimedSemaphoreTest#testInitInvalidPeriod",
      "smells": {
        "Lazy Test": 4
      }
    },
    "testShutdownSharedExecutorTask": {
      "name": "testShutdownSharedExecutorTask",
      "mvn_run": "org.apache.commons.lang3.concurrent.TimedSemaphoreTest#testShutdownSharedExecutorTask",
      "smells": {
        "Lazy Test": 12,
        "Eager Test": 1
      }
    }
  },
  "org.apache.commons.lang3.concurrent.ThresholdCircuitBreakerTest": {
    "testClosingThresholdCircuitBreaker": {
      "name": "testClosingThresholdCircuitBreaker",
      "mvn_run": "org.apache.commons.lang3.concurrent.ThresholdCircuitBreakerTest#testClosingThresholdCircuitBreaker",
      "smells": {
        "Lazy Test": 2,
        "Eager Test": 1
      }
    },
    "testThresholdEqualsZero": {
      "name": "testThresholdEqualsZero",
      "mvn_run": "org.apache.commons.lang3.concurrent.ThresholdCircuitBreakerTest#testThresholdEqualsZero",
      "smells": {
        "Lazy Test": 2,
        "Eager Test": 1
      }
    },
    "testThresholdCircuitBreakingException": {
      "name": "testThresholdCircuitBreakingException",
      "mvn_run": "org.apache.commons.lang3.concurrent.ThresholdCircuitBreakerTest#testThresholdCircuitBreakingException",
      "smells": {
        "Lazy Test": 2,
        "Eager Test": 1
      }
    },
    "testThreshold": {
      "name": "testThreshold",
      "mvn_run": "org.apache.commons.lang3.concurrent.ThresholdCircuitBreakerTest#testThreshold",
      "smells": {
        "Lazy Test": 2,
        "Eager Test": 1
      }
    },
    "testGettingThreshold": {
      "name": "testGettingThreshold",
      "mvn_run": "org.apache.commons.lang3.concurrent.ThresholdCircuitBreakerTest#testGettingThreshold",
      "smells": {
        "Lazy Test": 1,
        "Eager Test": 1,
        "Assertion Roulette": 1
      }
    }
  },
  "org.apache.commons.lang3.EnumUtilsTest": {
    "testConstructable": {
      "name": "testConstructable",
      "mvn_run": "org.apache.commons.lang3.EnumUtilsTest#testConstructable",
      "smells": {
        "Unknown Test": 1
      }
    },
    "test_getEnumList": {
      "name": "test_getEnumList",
      "mvn_run": "org.apache.commons.lang3.EnumUtilsTest#test_getEnumList",
      "smells": {
        "Magic Number Test": 4,
        "Assertion Roulette": 4
      }
    },
    "test_getEnumMap": {
      "name": "test_getEnumMap",
      "mvn_run": "org.apache.commons.lang3.EnumUtilsTest#test_getEnumMap",
      "smells": {
        "Magic Number Test": 1,
        "Sensitive Equality": 1,
        "Lazy Test": 1,
        "Assertion Roulette": 8
      }
    },
    "test_getEnumMap_keyFunction": {
      "name": "test_getEnumMap_keyFunction",
      "mvn_run": "org.apache.commons.lang3.EnumUtilsTest#test_getEnumMap_keyFunction",
      "smells": {
        "Magic Number Test": 27,
        "Sensitive Equality": 1,
        "Verbose Test": 1,
        "Lazy Test": 1,
        "Assertion Roulette": 27
      }
    },
    "test_processBitVectors": {
      "name": "test_processBitVectors",
      "mvn_run": "org.apache.commons.lang3.EnumUtilsTest#test_processBitVectors",
      "smells": {
        "Verbose Test": 1,
        "Lazy Test": 1,
        "Assertion Roulette": 28
      }
    },
    "test_processBitVectors_longClass": {
      "name": "test_processBitVectors_longClass",
      "mvn_run": "org.apache.commons.lang3.EnumUtilsTest#test_processBitVectors_longClass",
      "smells": {
        "Verbose Test": 1,
        "Lazy Test": 1,
        "Duplicate Assert": 3,
        "Assertion Roulette": 35
      }
    },
    "test_generateBitVectorsFromArray": {
      "name": "test_generateBitVectorsFromArray",
      "mvn_run": "org.apache.commons.lang3.EnumUtilsTest#test_generateBitVectorsFromArray",
      "smells": {
        "Lazy Test": 1,
        "Eager Test": 1,
        "Assertion Roulette": 15
      }
    },
    "test_generateBitVectors_nullIterable": {
      "name": "test_generateBitVectors_nullIterable",
      "mvn_run": "org.apache.commons.lang3.EnumUtilsTest#test_generateBitVectors_nullIterable",
      "smells": {
        "Lazy Test": 1
      }
    },
    "test_generateBitVectors_nullElement": {
      "name": "test_generateBitVectors_nullElement",
      "mvn_run": "org.apache.commons.lang3.EnumUtilsTest#test_generateBitVectors_nullElement",
      "smells": {
        "Lazy Test": 1
      }
    },
    "test_generateBitVectors_nullClassWithArray": {
      "name": "test_generateBitVectors_nullClassWithArray",
      "mvn_run": "org.apache.commons.lang3.EnumUtilsTest#test_generateBitVectors_nullClassWithArray",
      "smells": {
        "Lazy Test": 1
      }
    },
    "test_generateBitVectors_nullClass": {
      "name": "test_generateBitVectors_nullClass",
      "mvn_run": "org.apache.commons.lang3.EnumUtilsTest#test_generateBitVectors_nullClass",
      "smells": {
        "Lazy Test": 1
      }
    },
    "test_generateBitVectors_nullArrayElement": {
      "name": "test_generateBitVectors_nullArrayElement",
      "mvn_run": "org.apache.commons.lang3.EnumUtilsTest#test_generateBitVectors_nullArrayElement",
      "smells": {
        "Lazy Test": 1
      }
    },
    "test_generateBitVectors_nullArray": {
      "name": "test_generateBitVectors_nullArray",
      "mvn_run": "org.apache.commons.lang3.EnumUtilsTest#test_generateBitVectors_nullArray",
      "smells": {
        "Lazy Test": 1
      }
    },
    "test_generateBitVectors_nonEnumClassWithArray": {
      "name": "test_generateBitVectors_nonEnumClassWithArray",
      "mvn_run": "org.apache.commons.lang3.EnumUtilsTest#test_generateBitVectors_nonEnumClassWithArray",
      "smells": {
        "Lazy Test": 1
      }
    },
    "test_generateBitVectors_nonEnumClass": {
      "name": "test_generateBitVectors_nonEnumClass",
      "mvn_run": "org.apache.commons.lang3.EnumUtilsTest#test_generateBitVectors_nonEnumClass",
      "smells": {
        "Lazy Test": 1
      }
    },
    "test_generateBitVectors": {
      "name": "test_generateBitVectors",
      "mvn_run": "org.apache.commons.lang3.EnumUtilsTest#test_generateBitVectors",
      "smells": {
        "Lazy Test": 1,
        "Assertion Roulette": 14
      }
    },
    "test_getEnumIgnoreCase_nullClass": {
      "name": "test_getEnumIgnoreCase_nullClass",
      "mvn_run": "org.apache.commons.lang3.EnumUtilsTest#test_getEnumIgnoreCase_nullClass",
      "smells": {
        "Lazy Test": 1
      }
    },
    "test_getEnumIgnoreCase_nonEnumClass": {
      "name": "test_getEnumIgnoreCase_nonEnumClass",
      "mvn_run": "org.apache.commons.lang3.EnumUtilsTest#test_getEnumIgnoreCase_nonEnumClass",
      "smells": {
        "Lazy Test": 1,
        "Assertion Roulette": 1
      }
    },
    "test_getEnumIgnoreCase_defaultEnum": {
      "name": "test_getEnumIgnoreCase_defaultEnum",
      "mvn_run": "org.apache.commons.lang3.EnumUtilsTest#test_getEnumIgnoreCase_defaultEnum",
      "smells": {
        "Lazy Test": 1,
        "Assertion Roulette": 10
      }
    },
    "test_getEnumIgnoreCase": {
      "name": "test_getEnumIgnoreCase",
      "mvn_run": "org.apache.commons.lang3.EnumUtilsTest#test_getEnumIgnoreCase",
      "smells": {
        "Lazy Test": 1,
        "Assertion Roulette": 5
      }
    },
    "test_isValidEnumIgnoreCase_nullClass": {
      "name": "test_isValidEnumIgnoreCase_nullClass",
      "mvn_run": "org.apache.commons.lang3.EnumUtilsTest#test_isValidEnumIgnoreCase_nullClass",
      "smells": {
        "Lazy Test": 1
      }
    },
    "test_isValidEnumIgnoreCase": {
      "name": "test_isValidEnumIgnoreCase",
      "mvn_run": "org.apache.commons.lang3.EnumUtilsTest#test_isValidEnumIgnoreCase",
      "smells": {
        "Lazy Test": 1,
        "Assertion Roulette": 5
      }
    },
    "test_getEnum_nullClass": {
      "name": "test_getEnum_nullClass",
      "mvn_run": "org.apache.commons.lang3.EnumUtilsTest#test_getEnum_nullClass",
      "smells": {
        "Lazy Test": 1
      }
    },
    "test_getEnum_nonEnumClass": {
      "name": "test_getEnum_nonEnumClass",
      "mvn_run": "org.apache.commons.lang3.EnumUtilsTest#test_getEnum_nonEnumClass",
      "smells": {
        "Lazy Test": 1,
        "Assertion Roulette": 1
      }
    },
    "test_getEnum_defaultEnum": {
      "name": "test_getEnum_defaultEnum",
      "mvn_run": "org.apache.commons.lang3.EnumUtilsTest#test_getEnum_defaultEnum",
      "smells": {
        "Lazy Test": 1,
        "Assertion Roulette": 10
      }
    },
    "test_getEnum": {
      "name": "test_getEnum",
      "mvn_run": "org.apache.commons.lang3.EnumUtilsTest#test_getEnum",
      "smells": {
        "Lazy Test": 1,
        "Assertion Roulette": 5
      }
    },
    "test_isValidEnum_nullClass": {
      "name": "test_isValidEnum_nullClass",
      "mvn_run": "org.apache.commons.lang3.EnumUtilsTest#test_isValidEnum_nullClass",
      "smells": {
        "Lazy Test": 1
      }
    },
    "test_isValidEnum": {
      "name": "test_isValidEnum",
      "mvn_run": "org.apache.commons.lang3.EnumUtilsTest#test_isValidEnum",
      "smells": {
        "Lazy Test": 1,
        "Assertion Roulette": 5
      }
    },
    "test_generateBitVectorFromArray": {
      "name": "test_generateBitVectorFromArray",
      "mvn_run": "org.apache.commons.lang3.EnumUtilsTest#test_generateBitVectorFromArray",
      "smells": {
        "Lazy Test": 1,
        "Eager Test": 1,
        "Assertion Roulette": 13
      }
    },
    "test_generateBitVector_nullIterable": {
      "name": "test_generateBitVector_nullIterable",
      "mvn_run": "org.apache.commons.lang3.EnumUtilsTest#test_generateBitVector_nullIterable",
      "smells": {
        "Lazy Test": 1
      }
    },
    "test_generateBitVector_nullElement": {
      "name": "test_generateBitVector_nullElement",
      "mvn_run": "org.apache.commons.lang3.EnumUtilsTest#test_generateBitVector_nullElement",
      "smells": {
        "Lazy Test": 1
      }
    },
    "test_generateBitVector_nullClassWithArray": {
      "name": "test_generateBitVector_nullClassWithArray",
      "mvn_run": "org.apache.commons.lang3.EnumUtilsTest#test_generateBitVector_nullClassWithArray",
      "smells": {
        "Lazy Test": 1
      }
    },
    "test_generateBitVector_nullClass": {
      "name": "test_generateBitVector_nullClass",
      "mvn_run": "org.apache.commons.lang3.EnumUtilsTest#test_generateBitVector_nullClass",
      "smells": {
        "Lazy Test": 1
      }
    },
    "test_generateBitVector_nullArrayElement": {
      "name": "test_generateBitVector_nullArrayElement",
      "mvn_run": "org.apache.commons.lang3.EnumUtilsTest#test_generateBitVector_nullArrayElement",
      "smells": {
        "Lazy Test": 1
      }
    },
    "test_generateBitVector_nullArray": {
      "name": "test_generateBitVector_nullArray",
      "mvn_run": "org.apache.commons.lang3.EnumUtilsTest#test_generateBitVector_nullArray",
      "smells": {
        "Lazy Test": 1
      }
    },
    "test_generateBitVector_nonEnumClassWithArray": {
      "name": "test_generateBitVector_nonEnumClassWithArray",
      "mvn_run": "org.apache.commons.lang3.EnumUtilsTest#test_generateBitVector_nonEnumClassWithArray",
      "smells": {
        "Lazy Test": 1
      }
    },
    "test_generateBitVector_nonEnumClass": {
      "name": "test_generateBitVector_nonEnumClass",
      "mvn_run": "org.apache.commons.lang3.EnumUtilsTest#test_generateBitVector_nonEnumClass",
      "smells": {
        "Lazy Test": 1
      }
    },
    "test_generateBitVector_longClassWithArray": {
      "name": "test_generateBitVector_longClassWithArray",
      "mvn_run": "org.apache.commons.lang3.EnumUtilsTest#test_generateBitVector_longClassWithArray",
      "smells": {
        "Lazy Test": 1
      }
    },
    "test_generateBitVector_longClass": {
      "name": "test_generateBitVector_longClass",
      "mvn_run": "org.apache.commons.lang3.EnumUtilsTest#test_generateBitVector_longClass",
      "smells": {
        "Lazy Test": 1
      }
    },
    "test_generateBitVector": {
      "name": "test_generateBitVector",
      "mvn_run": "org.apache.commons.lang3.EnumUtilsTest#test_generateBitVector",
      "smells": {
        "Lazy Test": 1,
        "Assertion Roulette": 12
      }
    },
    "test_processBitVector_nullClass": {
      "name": "test_processBitVector_nullClass",
      "mvn_run": "org.apache.commons.lang3.EnumUtilsTest#test_processBitVector_nullClass",
      "smells": {
        "Lazy Test": 1
      }
    },
    "test_processBitVector_longClass": {
      "name": "test_processBitVector_longClass",
      "mvn_run": "org.apache.commons.lang3.EnumUtilsTest#test_processBitVector_longClass",
      "smells": {
        "Lazy Test": 1
      }
    },
    "test_processBitVector": {
      "name": "test_processBitVector",
      "mvn_run": "org.apache.commons.lang3.EnumUtilsTest#test_processBitVector",
      "smells": {
        "Lazy Test": 1,
        "Assertion Roulette": 12
      }
    },
    "test_processBitVectors_nullClass": {
      "name": "test_processBitVectors_nullClass",
      "mvn_run": "org.apache.commons.lang3.EnumUtilsTest#test_processBitVectors_nullClass",
      "smells": {
        "Lazy Test": 1
      }
    },
    "test_getEnumSystemProperty": {
      "name": "test_getEnumSystemProperty",
      "mvn_run": "org.apache.commons.lang3.EnumUtilsTest#test_getEnumSystemProperty",
      "smells": {
        "Assertion Roulette": 5,
        "Exception Catching Throwing": 1
      }
    },
    "test_getFirstEnumIgnoreCase_defaultEnum": {
      "name": "test_getFirstEnumIgnoreCase_defaultEnum",
      "mvn_run": "org.apache.commons.lang3.EnumUtilsTest#test_getFirstEnumIgnoreCase_defaultEnum",
      "smells": {
        "Assertion Roulette": 10
      }
    }
  },
  "org.apache.commons.lang3.CharEncodingTest": {
    "testConstructor": {
      "name": "testConstructor",
      "mvn_run": "org.apache.commons.lang3.CharEncodingTest#testConstructor",
      "smells": {
        "Unknown Test": 1
      }
    },
    "testNotSupported": {
      "name": "testNotSupported",
      "mvn_run": "org.apache.commons.lang3.CharEncodingTest#testNotSupported",
      "smells": {
        "Lazy Test": 1,
        "Assertion Roulette": 6
      }
    },
    "testSupported": {
      "name": "testSupported",
      "mvn_run": "org.apache.commons.lang3.CharEncodingTest#testSupported",
      "smells": {
        "Lazy Test": 1,
        "Assertion Roulette": 3
      }
    },
    "testStandardCharsetsEquality": {
      "name": "testStandardCharsetsEquality",
      "mvn_run": "org.apache.commons.lang3.CharEncodingTest#testStandardCharsetsEquality",
      "smells": {
        "Assertion Roulette": 6
      }
    }
  },
  "org.apache.commons.lang3.RandomUtilsTest": {
    "testConstructor": {
      "name": "testConstructor",
      "mvn_run": "org.apache.commons.lang3.RandomUtilsTest#testConstructor",
      "smells": {
        "Magic Number Test": 1,
        "Assertion Roulette": 5
      }
    },
    "testZeroLengthNextBytes": {
      "name": "testZeroLengthNextBytes",
      "mvn_run": "org.apache.commons.lang3.RandomUtilsTest#testZeroLengthNextBytes",
      "smells": {
        "Magic Number Test": 1,
        "Lazy Test": 1,
        "Assertion Roulette": 1
      }
    },
    "testNextBytes": {
      "name": "testNextBytes",
      "mvn_run": "org.apache.commons.lang3.RandomUtilsTest#testNextBytes",
      "smells": {
        "Magic Number Test": 1,
        "Lazy Test": 1,
        "Assertion Roulette": 1
      }
    },
    "testNextIntMinimalRange": {
      "name": "testNextIntMinimalRange",
      "mvn_run": "org.apache.commons.lang3.RandomUtilsTest#testNextIntMinimalRange",
      "smells": {
        "Magic Number Test": 1,
        "Lazy Test": 1,
        "Assertion Roulette": 1
      }
    },
    "testNextInt": {
      "name": "testNextInt",
      "mvn_run": "org.apache.commons.lang3.RandomUtilsTest#testNextInt",
      "smells": {
        "Magic Number Test": 1,
        "Lazy Test": 1,
        "Assertion Roulette": 1
      }
    },
    "testNextIntRandomResult": {
      "name": "testNextIntRandomResult",
      "mvn_run": "org.apache.commons.lang3.RandomUtilsTest#testNextIntRandomResult",
      "smells": {
        "Magic Number Test": 1,
        "Lazy Test": 1,
        "Assertion Roulette": 2
      }
    },
    "testNextDoubleMinimalRange": {
      "name": "testNextDoubleMinimalRange",
      "mvn_run": "org.apache.commons.lang3.RandomUtilsTest#testNextDoubleMinimalRange",
      "smells": {
        "Magic Number Test": 1,
        "Lazy Test": 1,
        "Assertion Roulette": 1
      }
    },
    "testNextFloatMinimalRange": {
      "name": "testNextFloatMinimalRange",
      "mvn_run": "org.apache.commons.lang3.RandomUtilsTest#testNextFloatMinimalRange",
      "smells": {
        "Magic Number Test": 1,
        "Lazy Test": 1,
        "Assertion Roulette": 1
      }
    },
    "testNextDouble": {
      "name": "testNextDouble",
      "mvn_run": "org.apache.commons.lang3.RandomUtilsTest#testNextDouble",
      "smells": {
        "Magic Number Test": 1,
        "Lazy Test": 1,
        "Assertion Roulette": 1
      }
    },
    "testNextDoubleRandomResult": {
      "name": "testNextDoubleRandomResult",
      "mvn_run": "org.apache.commons.lang3.RandomUtilsTest#testNextDoubleRandomResult",
      "smells": {
        "Magic Number Test": 1,
        "Lazy Test": 1,
        "Assertion Roulette": 2
      }
    },
    "testNextFloat": {
      "name": "testNextFloat",
      "mvn_run": "org.apache.commons.lang3.RandomUtilsTest#testNextFloat",
      "smells": {
        "Magic Number Test": 1,
        "Lazy Test": 1,
        "Assertion Roulette": 1
      }
    },
    "testNextFloatRandomResult": {
      "name": "testNextFloatRandomResult",
      "mvn_run": "org.apache.commons.lang3.RandomUtilsTest#testNextFloatRandomResult",
      "smells": {
        "Magic Number Test": 1,
        "Lazy Test": 1,
        "Assertion Roulette": 2
      }
    },
    "testNextLongRandomResult": {
      "name": "testNextLongRandomResult",
      "mvn_run": "org.apache.commons.lang3.RandomUtilsTest#testNextLongRandomResult",
      "smells": {
        "Magic Number Test": 1,
        "Lazy Test": 1,
        "Assertion Roulette": 2
      }
    },
    "testExtremeRangeInt": {
      "name": "testExtremeRangeInt",
      "mvn_run": "org.apache.commons.lang3.RandomUtilsTest#testExtremeRangeInt",
      "smells": {
        "Magic Number Test": 1,
        "Lazy Test": 1,
        "Assertion Roulette": 1
      }
    },
    "testExtremeRangeLong": {
      "name": "testExtremeRangeLong",
      "mvn_run": "org.apache.commons.lang3.RandomUtilsTest#testExtremeRangeLong",
      "smells": {
        "Magic Number Test": 1,
        "Lazy Test": 1,
        "Assertion Roulette": 1
      }
    },
    "testExtremeRangeFloat": {
      "name": "testExtremeRangeFloat",
      "mvn_run": "org.apache.commons.lang3.RandomUtilsTest#testExtremeRangeFloat",
      "smells": {
        "Magic Number Test": 1,
        "Lazy Test": 1,
        "Assertion Roulette": 1
      }
    },
    "testExtremeRangeDouble": {
      "name": "testExtremeRangeDouble",
      "mvn_run": "org.apache.commons.lang3.RandomUtilsTest#testExtremeRangeDouble",
      "smells": {
        "Magic Number Test": 1,
        "Lazy Test": 1,
        "Assertion Roulette": 1
      }
    },
    "testNextFloatLowerGreaterUpper": {
      "name": "testNextFloatLowerGreaterUpper",
      "mvn_run": "org.apache.commons.lang3.RandomUtilsTest#testNextFloatLowerGreaterUpper",
      "smells": {
        "Lazy Test": 1
      }
    },
    "testNextFloatNegative": {
      "name": "testNextFloatNegative",
      "mvn_run": "org.apache.commons.lang3.RandomUtilsTest#testNextFloatNegative",
      "smells": {
        "Lazy Test": 1
      }
    },
    "testNextIntLowerGreaterUpper": {
      "name": "testNextIntLowerGreaterUpper",
      "mvn_run": "org.apache.commons.lang3.RandomUtilsTest#testNextIntLowerGreaterUpper",
      "smells": {
        "Lazy Test": 1
      }
    },
    "testNextIntNegative": {
      "name": "testNextIntNegative",
      "mvn_run": "org.apache.commons.lang3.RandomUtilsTest#testNextIntNegative",
      "smells": {
        "Lazy Test": 1
      }
    },
    "testLargeValueRangeLong": {
      "name": "testLargeValueRangeLong",
      "mvn_run": "org.apache.commons.lang3.RandomUtilsTest#testLargeValueRangeLong",
      "smells": {
        "Lazy Test": 1,
        "Assertion Roulette": 1,
        "Conditional Test Logic": 1
      }
    },
    "testNextLong": {
      "name": "testNextLong",
      "mvn_run": "org.apache.commons.lang3.RandomUtilsTest#testNextLong",
      "smells": {
        "Lazy Test": 1,
        "Assertion Roulette": 1
      }
    },
    "testNextLongMinimalRange": {
      "name": "testNextLongMinimalRange",
      "mvn_run": "org.apache.commons.lang3.RandomUtilsTest#testNextLongMinimalRange",
      "smells": {
        "Lazy Test": 1,
        "Assertion Roulette": 1
      }
    },
    "testNextLongLowerGreaterUpper": {
      "name": "testNextLongLowerGreaterUpper",
      "mvn_run": "org.apache.commons.lang3.RandomUtilsTest#testNextLongLowerGreaterUpper",
      "smells": {
        "Lazy Test": 1
      }
    },
    "testNextLongNegative": {
      "name": "testNextLongNegative",
      "mvn_run": "org.apache.commons.lang3.RandomUtilsTest#testNextLongNegative",
      "smells": {
        "Lazy Test": 1
      }
    },
    "testNextDoubleLowerGreaterUpper": {
      "name": "testNextDoubleLowerGreaterUpper",
      "mvn_run": "org.apache.commons.lang3.RandomUtilsTest#testNextDoubleLowerGreaterUpper",
      "smells": {
        "Lazy Test": 1
      }
    },
    "testNextDoubleNegative": {
      "name": "testNextDoubleNegative",
      "mvn_run": "org.apache.commons.lang3.RandomUtilsTest#testNextDoubleNegative",
      "smells": {
        "Lazy Test": 1
      }
    },
    "testNextBytesNegative": {
      "name": "testNextBytesNegative",
      "mvn_run": "org.apache.commons.lang3.RandomUtilsTest#testNextBytesNegative",
      "smells": {
        "Lazy Test": 1
      }
    },
    "testBoolean": {
      "name": "testBoolean",
      "mvn_run": "org.apache.commons.lang3.RandomUtilsTest#testBoolean",
      "smells": {
        "Assertion Roulette": 1
      }
    }
  },
  "org.apache.commons.lang3.StringUtilsTest": {
    "testAbbreviateMarkerWithEmptyString": {
      "name": "testAbbreviateMarkerWithEmptyString",
      "mvn_run": "org.apache.commons.lang3.StringUtilsTest#testAbbreviateMarkerWithEmptyString",
      "smells": {
        "Magic Number Test": 1,
        "Lazy Test": 1,
        "Assertion Roulette": 1
      }
    },
    "testAbbreviate_StringInt": {
      "name": "testAbbreviate_StringInt",
      "mvn_run": "org.apache.commons.lang3.StringUtilsTest#testAbbreviate_StringInt",
      "smells": {
        "Magic Number Test": 12,
        "Lazy Test": 1,
        "Assertion Roulette": 12
      }
    },
    "testAbbreviate_StringIntInt": {
      "name": "testAbbreviate_StringIntInt",
      "mvn_run": "org.apache.commons.lang3.StringUtilsTest#testAbbreviate_StringIntInt",
      "smells": {
        "Magic Number Test": 24,
        "Redundant Assertion": 1,
        "Verbose Test": 1,
        "Lazy Test": 1,
        "Assertion Roulette": 5
      }
    },
    "testAbbreviate_StringStringInt": {
      "name": "testAbbreviate_StringStringInt",
      "mvn_run": "org.apache.commons.lang3.StringUtilsTest#testAbbreviate_StringStringInt",
      "smells": {
        "Magic Number Test": 14,
        "Lazy Test": 1,
        "Assertion Roulette": 14
      }
    },
    "testAbbreviate_StringStringIntInt": {
      "name": "testAbbreviate_StringStringIntInt",
      "mvn_run": "org.apache.commons.lang3.StringUtilsTest#testAbbreviate_StringStringIntInt",
      "smells": {
        "Magic Number Test": 26,
        "Verbose Test": 1,
        "Lazy Test": 1,
        "Assertion Roulette": 6
      }
    },
    "testAbbreviateMiddle": {
      "name": "testAbbreviateMiddle",
      "mvn_run": "org.apache.commons.lang3.StringUtilsTest#testAbbreviateMiddle",
      "smells": {
        "Magic Number Test": 14,
        "Verbose Test": 1,
        "Lazy Test": 1,
        "Eager Test": 1,
        "Assertion Roulette": 14
      }
    },
    "testCenter_StringInt": {
      "name": "testCenter_StringInt",
      "mvn_run": "org.apache.commons.lang3.StringUtilsTest#testCenter_StringInt",
      "smells": {
        "Magic Number Test": 11,
        "Lazy Test": 1,
        "Duplicate Assert": 1,
        "Assertion Roulette": 11
      }
    },
    "testCenter_StringIntChar": {
      "name": "testCenter_StringIntChar",
      "mvn_run": "org.apache.commons.lang3.StringUtilsTest#testCenter_StringIntChar",
      "smells": {
        "Magic Number Test": 12,
        "Lazy Test": 1,
        "Duplicate Assert": 1,
        "Assertion Roulette": 12
      }
    },
    "testCenter_StringIntString": {
      "name": "testCenter_StringIntString",
      "mvn_run": "org.apache.commons.lang3.StringUtilsTest#testCenter_StringIntString",
      "smells": {
        "Magic Number Test": 15,
        "Lazy Test": 1,
        "Duplicate Assert": 1,
        "Assertion Roulette": 15
      }
    },
    "testConstructor": {
      "name": "testConstructor",
      "mvn_run": "org.apache.commons.lang3.StringUtilsTest#testConstructor",
      "smells": {
        "Magic Number Test": 1,
        "Assertion Roulette": 5
      }
    },
    "testGetIfBlank_StringStringSupplier": {
      "name": "testGetIfBlank_StringStringSupplier",
      "mvn_run": "org.apache.commons.lang3.StringUtilsTest#testGetIfBlank_StringStringSupplier",
      "smells": {
        "Magic Number Test": 4,
        "Lazy Test": 1,
        "Eager Test": 1,
        "Assertion Roulette": 11
      }
    },
    "testGetIfEmpty_StringStringSupplier": {
      "name": "testGetIfEmpty_StringStringSupplier",
      "mvn_run": "org.apache.commons.lang3.StringUtilsTest#testGetIfEmpty_StringStringSupplier",
      "smells": {
        "Magic Number Test": 3,
        "Lazy Test": 2,
        "Eager Test": 1,
        "Assertion Roulette": 9
      }
    },
    "testDifferenceAt_StringArray": {
      "name": "testDifferenceAt_StringArray",
      "mvn_run": "org.apache.commons.lang3.StringUtilsTest#testDifferenceAt_StringArray",
      "smells": {
        "Magic Number Test": 17,
        "Lazy Test": 1,
        "Assertion Roulette": 17
      }
    },
    "testDifferenceAt_StringString": {
      "name": "testDifferenceAt_StringString",
      "mvn_run": "org.apache.commons.lang3.StringUtilsTest#testDifferenceAt_StringString",
      "smells": {
        "Magic Number Test": 9,
        "Lazy Test": 1,
        "Assertion Roulette": 9
      }
    },
    "testEMPTY": {
      "name": "testEMPTY",
      "mvn_run": "org.apache.commons.lang3.StringUtilsTest#testEMPTY",
      "smells": {
        "Magic Number Test": 1,
        "Assertion Roulette": 3
      }
    },
    "testGetFuzzyDistance": {
      "name": "testGetFuzzyDistance",
      "mvn_run": "org.apache.commons.lang3.StringUtilsTest#testGetFuzzyDistance",
      "smells": {
        "Magic Number Test": 7,
        "Lazy Test": 1,
        "Assertion Roulette": 7
      }
    },
    "testGetJaroWinklerDistance_StringString": {
      "name": "testGetJaroWinklerDistance_StringString",
      "mvn_run": "org.apache.commons.lang3.StringUtilsTest#testGetJaroWinklerDistance_StringString",
      "smells": {
        "Magic Number Test": 9,
        "Lazy Test": 1,
        "Assertion Roulette": 9
      }
    },
    "testGetLevenshteinDistance_StringString": {
      "name": "testGetLevenshteinDistance_StringString",
      "mvn_run": "org.apache.commons.lang3.StringUtilsTest#testGetLevenshteinDistance_StringString",
      "smells": {
        "Magic Number Test": 10,
        "Lazy Test": 1,
        "Assertion Roulette": 10
      }
    },
    "testGetLevenshteinDistance_StringStringInt": {
      "name": "testGetLevenshteinDistance_StringStringInt",
      "mvn_run": "org.apache.commons.lang3.StringUtilsTest#testGetLevenshteinDistance_StringStringInt",
      "smells": {
        "Magic Number Test": 38,
        "Verbose Test": 1,
        "Lazy Test": 1,
        "Assertion Roulette": 38
      }
    },
    "testJoin_ArrayCharSeparator": {
      "name": "testJoin_ArrayCharSeparator",
      "mvn_run": "org.apache.commons.lang3.StringUtilsTest#testJoin_ArrayCharSeparator",
      "smells": {
        "Magic Number Test": 7,
        "Lazy Test": 1,
        "Assertion Roulette": 12
      }
    },
    "testJoin_ArrayOfBytes": {
      "name": "testJoin_ArrayOfBytes",
      "mvn_run": "org.apache.commons.lang3.StringUtilsTest#testJoin_ArrayOfBytes",
      "smells": {
        "Magic Number Test": 4,
        "Lazy Test": 1,
        "Assertion Roulette": 6
      }
    },
    "testJoin_ArrayOfBooleans": {
      "name": "testJoin_ArrayOfBooleans",
      "mvn_run": "org.apache.commons.lang3.StringUtilsTest#testJoin_ArrayOfBooleans",
      "smells": {
        "Magic Number Test": 4,
        "Lazy Test": 1,
        "Assertion Roulette": 8
      }
    },
    "testJoin_ArrayOfChars": {
      "name": "testJoin_ArrayOfChars",
      "mvn_run": "org.apache.commons.lang3.StringUtilsTest#testJoin_ArrayOfChars",
      "smells": {
        "Magic Number Test": 4,
        "Lazy Test": 1,
        "Assertion Roulette": 6
      }
    },
    "testJoin_ArrayOfDoubles": {
      "name": "testJoin_ArrayOfDoubles",
      "mvn_run": "org.apache.commons.lang3.StringUtilsTest#testJoin_ArrayOfDoubles",
      "smells": {
        "Magic Number Test": 4,
        "Lazy Test": 1,
        "Assertion Roulette": 6
      }
    },
    "testJoin_ArrayOfFloats": {
      "name": "testJoin_ArrayOfFloats",
      "mvn_run": "org.apache.commons.lang3.StringUtilsTest#testJoin_ArrayOfFloats",
      "smells": {
        "Magic Number Test": 4,
        "Lazy Test": 1,
        "Assertion Roulette": 6
      }
    },
    "testJoin_ArrayOfInts": {
      "name": "testJoin_ArrayOfInts",
      "mvn_run": "org.apache.commons.lang3.StringUtilsTest#testJoin_ArrayOfInts",
      "smells": {
        "Magic Number Test": 4,
        "Lazy Test": 1,
        "Assertion Roulette": 6
      }
    },
    "testJoin_ArrayOfLongs": {
      "name": "testJoin_ArrayOfLongs",
      "mvn_run": "org.apache.commons.lang3.StringUtilsTest#testJoin_ArrayOfLongs",
      "smells": {
        "Magic Number Test": 4,
        "Lazy Test": 1,
        "Assertion Roulette": 6
      }
    },
    "testJoin_ArrayOfShorts": {
      "name": "testJoin_ArrayOfShorts",
      "mvn_run": "org.apache.commons.lang3.StringUtilsTest#testJoin_ArrayOfShorts",
      "smells": {
        "Magic Number Test": 4,
        "Lazy Test": 1,
        "Assertion Roulette": 6
      }
    },
    "testJoin_ArrayString_EmptyDelimiter": {
      "name": "testJoin_ArrayString_EmptyDelimiter",
      "mvn_run": "org.apache.commons.lang3.StringUtilsTest#testJoin_ArrayString_EmptyDelimiter",
      "smells": {
        "Magic Number Test": 1,
        "Lazy Test": 1,
        "Assertion Roulette": 7
      }
    },
    "testJoin_ArrayString_NonEmptyDelimiter": {
      "name": "testJoin_ArrayString_NonEmptyDelimiter",
      "mvn_run": "org.apache.commons.lang3.StringUtilsTest#testJoin_ArrayString_NonEmptyDelimiter",
      "smells": {
        "Magic Number Test": 5,
        "Lazy Test": 1,
        "Assertion Roulette": 9
      }
    },
    "testJoin_List_EmptyDelimiter": {
      "name": "testJoin_List_EmptyDelimiter",
      "mvn_run": "org.apache.commons.lang3.StringUtilsTest#testJoin_List_EmptyDelimiter",
      "smells": {
        "Magic Number Test": 1,
        "Lazy Test": 1,
        "Assertion Roulette": 7
      }
    },
    "testJoin_List_CharDelimiter": {
      "name": "testJoin_List_CharDelimiter",
      "mvn_run": "org.apache.commons.lang3.StringUtilsTest#testJoin_List_CharDelimiter",
      "smells": {
        "Magic Number Test": 6,
        "Lazy Test": 1,
        "Assertion Roulette": 5
      }
    },
    "testJoin_List_NonEmptyDelimiter": {
      "name": "testJoin_List_NonEmptyDelimiter",
      "mvn_run": "org.apache.commons.lang3.StringUtilsTest#testJoin_List_NonEmptyDelimiter",
      "smells": {
        "Magic Number Test": 6,
        "Lazy Test": 1,
        "Assertion Roulette": 9
      }
    },
    "testLeftPad_StringInt": {
      "name": "testLeftPad_StringInt",
      "mvn_run": "org.apache.commons.lang3.StringUtilsTest#testLeftPad_StringInt",
      "smells": {
        "Magic Number Test": 4,
        "Lazy Test": 1,
        "Assertion Roulette": 4
      }
    },
    "testLeftPad_StringIntChar": {
      "name": "testLeftPad_StringIntChar",
      "mvn_run": "org.apache.commons.lang3.StringUtilsTest#testLeftPad_StringIntChar",
      "smells": {
        "Magic Number Test": 7,
        "Lazy Test": 2,
        "Eager Test": 1,
        "Assertion Roulette": 8
      }
    },
    "testLeftPad_StringIntString": {
      "name": "testLeftPad_StringIntString",
      "mvn_run": "org.apache.commons.lang3.StringUtilsTest#testLeftPad_StringIntString",
      "smells": {
        "Magic Number Test": 10,
        "Lazy Test": 1,
        "Assertion Roulette": 10
      }
    },
    "testLength_CharBuffer": {
      "name": "testLength_CharBuffer",
      "mvn_run": "org.apache.commons.lang3.StringUtilsTest#testLength_CharBuffer",
      "smells": {
        "Magic Number Test": 4,
        "Lazy Test": 1,
        "Assertion Roulette": 4
      }
    },
    "testLengthString": {
      "name": "testLengthString",
      "mvn_run": "org.apache.commons.lang3.StringUtilsTest#testLengthString",
      "smells": {
        "Magic Number Test": 6,
        "Lazy Test": 1,
        "Assertion Roulette": 6
      }
    },
    "testLengthStringBuffer": {
      "name": "testLengthStringBuffer",
      "mvn_run": "org.apache.commons.lang3.StringUtilsTest#testLengthStringBuffer",
      "smells": {
        "Magic Number Test": 5,
        "Lazy Test": 1,
        "Assertion Roulette": 5
      }
    },
    "testLengthStringBuilder": {
      "name": "testLengthStringBuilder",
      "mvn_run": "org.apache.commons.lang3.StringUtilsTest#testLengthStringBuilder",
      "smells": {
        "Magic Number Test": 5,
        "Lazy Test": 1,
        "Assertion Roulette": 5
      }
    },
    "testOverlay_StringStringIntInt": {
      "name": "testOverlay_StringStringIntInt",
      "mvn_run": "org.apache.commons.lang3.StringUtilsTest#testOverlay_StringStringIntInt",
      "smells": {
        "Magic Number Test": 21,
        "Assertion Roulette": 21
      }
    },
    "testRepeat_CharInt": {
      "name": "testRepeat_CharInt",
      "mvn_run": "org.apache.commons.lang3.StringUtilsTest#testRepeat_CharInt",
      "smells": {
        "Magic Number Test": 3,
        "Lazy Test": 1,
        "Assertion Roulette": 3
      }
    },
    "testRepeat_StringInt": {
      "name": "testRepeat_StringInt",
      "mvn_run": "org.apache.commons.lang3.StringUtilsTest#testRepeat_StringInt",
      "smells": {
        "Magic Number Test": 8,
        "Lazy Test": 2,
        "Eager Test": 1,
        "Assertion Roulette": 9
      }
    },
    "testRepeat_StringStringInt": {
      "name": "testRepeat_StringStringInt",
      "mvn_run": "org.apache.commons.lang3.StringUtilsTest#testRepeat_StringStringInt",
      "smells": {
        "Magic Number Test": 7,
        "Lazy Test": 1,
        "Assertion Roulette": 7
      }
    },
    "testReplace_StringStringStringInt": {
      "name": "testReplace_StringStringStringInt",
      "mvn_run": "org.apache.commons.lang3.StringUtilsTest#testReplace_StringStringStringInt",
      "smells": {
        "Magic Number Test": 17,
        "Lazy Test": 1,
        "Assertion Roulette": 17
      }
    },
    "testReplaceIgnoreCase_StringStringStringInt": {
      "name": "testReplaceIgnoreCase_StringStringStringInt",
      "mvn_run": "org.apache.commons.lang3.StringUtilsTest#testReplaceIgnoreCase_StringStringStringInt",
      "smells": {
        "Magic Number Test": 25,
        "Verbose Test": 1,
        "Lazy Test": 1,
        "Assertion Roulette": 25
      }
    },
    "testRightPad_StringInt": {
      "name": "testRightPad_StringInt",
      "mvn_run": "org.apache.commons.lang3.StringUtilsTest#testRightPad_StringInt",
      "smells": {
        "Magic Number Test": 5,
        "Lazy Test": 1,
        "Assertion Roulette": 5
      }
    },
    "testRightPad_StringIntChar": {
      "name": "testRightPad_StringIntChar",
      "mvn_run": "org.apache.commons.lang3.StringUtilsTest#testRightPad_StringIntChar",
      "smells": {
        "Magic Number Test": 7,
        "Lazy Test": 2,
        "Eager Test": 1,
        "Assertion Roulette": 8
      }
    },
    "testRightPad_StringIntString": {
      "name": "testRightPad_StringIntString",
      "mvn_run": "org.apache.commons.lang3.StringUtilsTest#testRightPad_StringIntString",
      "smells": {
        "Magic Number Test": 10,
        "Lazy Test": 1,
        "Assertion Roulette": 10
      }
    },
    "testRotate_StringInt": {
      "name": "testRotate_StringInt",
      "mvn_run": "org.apache.commons.lang3.StringUtilsTest#testRotate_StringInt",
      "smells": {
        "Magic Number Test": 11,
        "Assertion Roulette": 11
      }
    },
    "testSplit_String": {
      "name": "testSplit_String",
      "mvn_run": "org.apache.commons.lang3.StringUtilsTest#testSplit_String",
      "smells": {
        "Magic Number Test": 4,
        "Lazy Test": 1,
        "Duplicate Assert": 1,
        "Assertion Roulette": 11
      }
    },
    "testSplit_StringChar": {
      "name": "testSplit_StringChar",
      "mvn_run": "org.apache.commons.lang3.StringUtilsTest#testSplit_StringChar",
      "smells": {
        "Magic Number Test": 4,
        "Lazy Test": 1,
        "Duplicate Assert": 3,
        "Assertion Roulette": 12
      }
    },
    "testSplit_StringString_StringStringInt": {
      "name": "testSplit_StringString_StringStringInt",
      "mvn_run": "org.apache.commons.lang3.StringUtilsTest#testSplit_StringString_StringStringInt",
      "smells": {
        "Magic Number Test": 3,
        "Verbose Test": 1,
        "Lazy Test": 2,
        "Eager Test": 1,
        "Assertion Roulette": 8,
        "Conditional Test Logic": 4
      }
    },
    "testSplitByCharacterType": {
      "name": "testSplitByCharacterType",
      "mvn_run": "org.apache.commons.lang3.StringUtilsTest#testSplitByCharacterType",
      "smells": {
        "Magic Number Test": 1,
        "Assertion Roulette": 9
      }
    },
    "testSplitByCharacterTypeCamelCase": {
      "name": "testSplitByCharacterTypeCamelCase",
      "mvn_run": "org.apache.commons.lang3.StringUtilsTest#testSplitByCharacterTypeCamelCase",
      "smells": {
        "Magic Number Test": 1,
        "Assertion Roulette": 9
      }
    },
    "testSplitByWholeSeparatorPreserveAllTokens_StringString": {
      "name": "testSplitByWholeSeparatorPreserveAllTokens_StringString",
      "mvn_run": "org.apache.commons.lang3.StringUtilsTest#testSplitByWholeSeparatorPreserveAllTokens_StringString",
      "smells": {
        "Magic Number Test": 1,
        "Verbose Test": 1,
        "Lazy Test": 1,
        "Duplicate Assert": 2,
        "Assertion Roulette": 8,
        "Conditional Test Logic": 3
      }
    },
    "testSplitByWholeSeparatorPreserveAllTokens_StringStringInt": {
      "name": "testSplitByWholeSeparatorPreserveAllTokens_StringStringInt",
      "mvn_run": "org.apache.commons.lang3.StringUtilsTest#testSplitByWholeSeparatorPreserveAllTokens_StringStringInt",
      "smells": {
        "Magic Number Test": 2,
        "Verbose Test": 1,
        "Lazy Test": 1,
        "Duplicate Assert": 2,
        "Assertion Roulette": 10,
        "Conditional Test Logic": 4
      }
    },
    "testSplitByWholeString_StringStringBoolean": {
      "name": "testSplitByWholeString_StringStringBoolean",
      "mvn_run": "org.apache.commons.lang3.StringUtilsTest#testSplitByWholeString_StringStringBoolean",
      "smells": {
        "Magic Number Test": 1,
        "Lazy Test": 1,
        "Assertion Roulette": 8,
        "Conditional Test Logic": 3
      }
    },
    "testSplitByWholeString_StringStringBooleanInt": {
      "name": "testSplitByWholeString_StringStringBooleanInt",
      "mvn_run": "org.apache.commons.lang3.StringUtilsTest#testSplitByWholeString_StringStringBooleanInt",
      "smells": {
        "Magic Number Test": 2,
        "Lazy Test": 1,
        "Assertion Roulette": 6,
        "Conditional Test Logic": 2
      }
    },
    "testSplitPreserveAllTokens_String": {
      "name": "testSplitPreserveAllTokens_String",
      "mvn_run": "org.apache.commons.lang3.StringUtilsTest#testSplitPreserveAllTokens_String",
      "smells": {
        "Magic Number Test": 10,
        "Verbose Test": 1,
        "Lazy Test": 1,
        "Duplicate Assert": 10,
        "Assertion Roulette": 42,
        "Conditional Test Logic": 1
      }
    },
    "testSplitPreserveAllTokens_StringChar": {
      "name": "testSplitPreserveAllTokens_StringChar",
      "mvn_run": "org.apache.commons.lang3.StringUtilsTest#testSplitPreserveAllTokens_StringChar",
      "smells": {
        "Magic Number Test": 13,
        "Verbose Test": 1,
        "Lazy Test": 1,
        "Duplicate Assert": 14,
        "Assertion Roulette": 63,
        "Conditional Test Logic": 1
      }
    },
    "testSplitPreserveAllTokens_StringString_StringStringInt": {
      "name": "testSplitPreserveAllTokens_StringString_StringStringInt",
      "mvn_run": "org.apache.commons.lang3.StringUtilsTest#testSplitPreserveAllTokens_StringString_StringStringInt",
      "smells": {
        "Magic Number Test": 3,
        "Verbose Test": 1,
        "Lazy Test": 2,
        "Duplicate Assert": 2,
        "Eager Test": 1,
        "Assertion Roulette": 26,
        "Conditional Test Logic": 13
      }
    },
    "testTruncate_StringInt": {
      "name": "testTruncate_StringInt",
      "mvn_run": "org.apache.commons.lang3.StringUtilsTest#testTruncate_StringInt",
      "smells": {
        "Magic Number Test": 8,
        "Verbose Test": 1,
        "Lazy Test": 1,
        "Assertion Roulette": 9
      }
    },
    "testTruncate_StringIntInt": {
      "name": "testTruncate_StringIntInt",
      "mvn_run": "org.apache.commons.lang3.StringUtilsTest#testTruncate_StringIntInt",
      "smells": {
        "Magic Number Test": 25,
        "Verbose Test": 1,
        "Lazy Test": 1,
        "Assertion Roulette": 26
      }
    },
    "testDefaultIfBlank_CharBuffers": {
      "name": "testDefaultIfBlank_CharBuffers",
      "mvn_run": "org.apache.commons.lang3.StringUtilsTest#testDefaultIfBlank_CharBuffers",
      "smells": {
        "Sensitive Equality": 4,
        "Lazy Test": 1,
        "Eager Test": 1,
        "Assertion Roulette": 5
      }
    },
    "testDefaultIfBlank_StringBuffers": {
      "name": "testDefaultIfBlank_StringBuffers",
      "mvn_run": "org.apache.commons.lang3.StringUtilsTest#testDefaultIfBlank_StringBuffers",
      "smells": {
        "Sensitive Equality": 4,
        "Lazy Test": 1,
        "Eager Test": 1,
        "Assertion Roulette": 5
      }
    },
    "testDefaultIfBlank_StringBuilders": {
      "name": "testDefaultIfBlank_StringBuilders",
      "mvn_run": "org.apache.commons.lang3.StringUtilsTest#testDefaultIfBlank_StringBuilders",
      "smells": {
        "Sensitive Equality": 4,
        "Lazy Test": 1,
        "Eager Test": 1,
        "Assertion Roulette": 5
      }
    },
    "testDefaultIfEmpty_CharBuffers": {
      "name": "testDefaultIfEmpty_CharBuffers",
      "mvn_run": "org.apache.commons.lang3.StringUtilsTest#testDefaultIfEmpty_CharBuffers",
      "smells": {
        "Sensitive Equality": 3,
        "Lazy Test": 1,
        "Eager Test": 1,
        "Assertion Roulette": 4
      }
    },
    "testDefaultIfEmpty_StringBuffers": {
      "name": "testDefaultIfEmpty_StringBuffers",
      "mvn_run": "org.apache.commons.lang3.StringUtilsTest#testDefaultIfEmpty_StringBuffers",
      "smells": {
        "Sensitive Equality": 3,
        "Lazy Test": 1,
        "Eager Test": 1,
        "Assertion Roulette": 4
      }
    },
    "testDefaultIfEmpty_StringBuilders": {
      "name": "testDefaultIfEmpty_StringBuilders",
      "mvn_run": "org.apache.commons.lang3.StringUtilsTest#testDefaultIfEmpty_StringBuilders",
      "smells": {
        "Sensitive Equality": 3,
        "Lazy Test": 1,
        "Eager Test": 1,
        "Assertion Roulette": 4
      }
    },
    "testToString": {
      "name": "testToString",
      "mvn_run": "org.apache.commons.lang3.StringUtilsTest#testToString",
      "smells": {
        "Sensitive Equality": 3,
        "Assertion Roulette": 4
      }
    },
    "testChomp": {
      "name": "testChomp",
      "mvn_run": "org.apache.commons.lang3.StringUtilsTest#testChomp",
      "smells": {
        "Verbose Test": 1,
        "Assertion Roulette": 6,
        "Conditional Test Logic": 1
      }
    },
    "testRemoveIgnoreCase_String": {
      "name": "testRemoveIgnoreCase_String",
      "mvn_run": "org.apache.commons.lang3.StringUtilsTest#testRemoveIgnoreCase_String",
      "smells": {
        "Verbose Test": 1,
        "Duplicate Assert": 4,
        "Assertion Roulette": 17
      }
    },
    "testReplace_StringStringArrayStringArray": {
      "name": "testReplace_StringStringArrayStringArray",
      "mvn_run": "org.apache.commons.lang3.StringUtilsTest#testReplace_StringStringArrayStringArray",
      "smells": {
        "Verbose Test": 1,
        "Assertion Roulette": 14
      }
    },
    "testReplaceChars_StringStringString": {
      "name": "testReplaceChars_StringStringString",
      "mvn_run": "org.apache.commons.lang3.StringUtilsTest#testReplaceChars_StringStringString",
      "smells": {
        "Verbose Test": 1,
        "Lazy Test": 1,
        "Duplicate Assert": 3,
        "Assertion Roulette": 30
      }
    },
    "testStringUtilsCharSequenceContract": {
      "name": "testStringUtilsCharSequenceContract",
      "mvn_run": "org.apache.commons.lang3.StringUtilsTest#testStringUtilsCharSequenceContract",
      "smells": {
        "Verbose Test": 1,
        "Conditional Test Logic": 4
      }
    },
    "testGeorgianSample": {
      "name": "testGeorgianSample",
      "mvn_run": "org.apache.commons.lang3.StringUtilsTest#testGeorgianSample",
      "smells": {
        "Verbose Test": 1,
        "Lazy Test": 1,
        "Duplicate Assert": 1,
        "Eager Test": 1,
        "Assertion Roulette": 5,
        "Conditional Test Logic": 2
      }
    },
    "testReplace_StringStringString": {
      "name": "testReplace_StringStringString",
      "mvn_run": "org.apache.commons.lang3.StringUtilsTest#testReplace_StringStringString",
      "smells": {
        "Lazy Test": 1,
        "Assertion Roulette": 15
      }
    },
    "testGetBytes_String": {
      "name": "testGetBytes_String",
      "mvn_run": "org.apache.commons.lang3.StringUtilsTest#testGetBytes_String",
      "smells": {
        "Lazy Test": 1,
        "Assertion Roulette": 3
      }
    },
    "testGetBytes_Charset": {
      "name": "testGetBytes_Charset",
      "mvn_run": "org.apache.commons.lang3.StringUtilsTest#testGetBytes_Charset",
      "smells": {
        "Lazy Test": 1,
        "Assertion Roulette": 3
      }
    },
    "testUnwrap_StringString": {
      "name": "testUnwrap_StringString",
      "mvn_run": "org.apache.commons.lang3.StringUtilsTest#testUnwrap_StringString",
      "smells": {
        "Lazy Test": 1,
        "Assertion Roulette": 18
      }
    },
    "testUnwrap_StringChar": {
      "name": "testUnwrap_StringChar",
      "mvn_run": "org.apache.commons.lang3.StringUtilsTest#testUnwrap_StringChar",
      "smells": {
        "Lazy Test": 1,
        "Assertion Roulette": 13
      }
    },
    "testJoinWith": {
      "name": "testJoinWith",
      "mvn_run": "org.apache.commons.lang3.StringUtilsTest#testJoinWith",
      "smells": {
        "Lazy Test": 2,
        "Eager Test": 1,
        "Assertion Roulette": 7
      }
    },
    "testJoin_Objects": {
      "name": "testJoin_Objects",
      "mvn_run": "org.apache.commons.lang3.StringUtilsTest#testJoin_Objects",
      "smells": {
        "Lazy Test": 1,
        "Eager Test": 1,
        "Assertion Roulette": 3
      }
    },
    "testLang1593": {
      "name": "testLang1593",
      "mvn_run": "org.apache.commons.lang3.StringUtilsTest#testLang1593",
      "smells": {
        "Lazy Test": 1,
        "Assertion Roulette": 1
      }
    },
    "testJoin_Objectarray": {
      "name": "testJoin_Objectarray",
      "mvn_run": "org.apache.commons.lang3.StringUtilsTest#testJoin_Objectarray",
      "smells": {
        "Lazy Test": 1,
        "Assertion Roulette": 10
      }
    },
    "testJoin_IteratorString": {
      "name": "testJoin_IteratorString",
      "mvn_run": "org.apache.commons.lang3.StringUtilsTest#testJoin_IteratorString",
      "smells": {
        "Lazy Test": 1,
        "Assertion Roulette": 11
      }
    },
    "testJoin_IteratorChar": {
      "name": "testJoin_IteratorChar",
      "mvn_run": "org.apache.commons.lang3.StringUtilsTest#testJoin_IteratorChar",
      "smells": {
        "Lazy Test": 1,
        "Assertion Roulette": 6
      }
    },
    "testJoin_IterableString": {
      "name": "testJoin_IterableString",
      "mvn_run": "org.apache.commons.lang3.StringUtilsTest#testJoin_IterableString",
      "smells": {
        "Lazy Test": 1,
        "Assertion Roulette": 10
      }
    },
    "testJoin_IterableChar": {
      "name": "testJoin_IterableChar",
      "mvn_run": "org.apache.commons.lang3.StringUtilsTest#testJoin_IterableChar",
      "smells": {
        "Lazy Test": 1,
        "Assertion Roulette": 5
      }
    },
    "testWrapIfMissing_StringString": {
      "name": "testWrapIfMissing_StringString",
      "mvn_run": "org.apache.commons.lang3.StringUtilsTest#testWrapIfMissing_StringString",
      "smells": {
        "Lazy Test": 1,
        "Assertion Roulette": 18
      }
    },
    "testWrapIfMissing_StringChar": {
      "name": "testWrapIfMissing_StringChar",
      "mvn_run": "org.apache.commons.lang3.StringUtilsTest#testWrapIfMissing_StringChar",
      "smells": {
        "Lazy Test": 1,
        "Assertion Roulette": 16
      }
    },
    "testReCapitalize": {
      "name": "testReCapitalize",
      "mvn_run": "org.apache.commons.lang3.StringUtilsTest#testReCapitalize",
      "smells": {
        "Lazy Test": 2,
        "Eager Test": 1,
        "Assertion Roulette": 4
      }
    },
    "testCapitalize": {
      "name": "testCapitalize",
      "mvn_run": "org.apache.commons.lang3.StringUtilsTest#testCapitalize",
      "smells": {
        "Lazy Test": 1,
        "Duplicate Assert": 1,
        "Assertion Roulette": 9
      }
    },
    "testDefaultIfEmpty_StringString": {
      "name": "testDefaultIfEmpty_StringString",
      "mvn_run": "org.apache.commons.lang3.StringUtilsTest#testDefaultIfEmpty_StringString",
      "smells": {
        "Lazy Test": 2,
        "Eager Test": 1,
        "Assertion Roulette": 5
      }
    },
    "testDefault_StringString": {
      "name": "testDefault_StringString",
      "mvn_run": "org.apache.commons.lang3.StringUtilsTest#testDefault_StringString",
      "smells": {
        "Lazy Test": 1,
        "Assertion Roulette": 3
      }
    },
    "testDefault_String": {
      "name": "testDefault_String",
      "mvn_run": "org.apache.commons.lang3.StringUtilsTest#testDefault_String",
      "smells": {
        "Lazy Test": 1,
        "Assertion Roulette": 3
      }
    },
    "testGetJaroWinklerDistance_StringNull": {
      "name": "testGetJaroWinklerDistance_StringNull",
      "mvn_run": "org.apache.commons.lang3.StringUtilsTest#testGetJaroWinklerDistance_StringNull",
      "smells": {
        "Lazy Test": 1
      }
    },
    "testGetJaroWinklerDistance_NullString": {
      "name": "testGetJaroWinklerDistance_NullString",
      "mvn_run": "org.apache.commons.lang3.StringUtilsTest#testGetJaroWinklerDistance_NullString",
      "smells": {
        "Lazy Test": 1
      }
    },
    "testGetJaroWinklerDistance_NullNull": {
      "name": "testGetJaroWinklerDistance_NullNull",
      "mvn_run": "org.apache.commons.lang3.StringUtilsTest#testGetJaroWinklerDistance_NullNull",
      "smells": {
        "Lazy Test": 1
      }
    },
    "testRemove_String": {
      "name": "testRemove_String",
      "mvn_run": "org.apache.commons.lang3.StringUtilsTest#testRemove_String",
      "smells": {
        "Lazy Test": 1,
        "Duplicate Assert": 4,
        "Assertion Roulette": 14
      }
    },
    "testRemove_char": {
      "name": "testRemove_char",
      "mvn_run": "org.apache.commons.lang3.StringUtilsTest#testRemove_char",
      "smells": {
        "Lazy Test": 1,
        "Assertion Roulette": 6
      }
    },
    "testGetFuzzyDistance_StringStringNull": {
      "name": "testGetFuzzyDistance_StringStringNull",
      "mvn_run": "org.apache.commons.lang3.StringUtilsTest#testGetFuzzyDistance_StringStringNull",
      "smells": {
        "Lazy Test": 1
      }
    },
    "testGetFuzzyDistance_StringNullLoclae": {
      "name": "testGetFuzzyDistance_StringNullLoclae",
      "mvn_run": "org.apache.commons.lang3.StringUtilsTest#testGetFuzzyDistance_StringNullLoclae",
      "smells": {
        "Lazy Test": 1
      }
    },
    "testGetFuzzyDistance_NullStringLocale": {
      "name": "testGetFuzzyDistance_NullStringLocale",
      "mvn_run": "org.apache.commons.lang3.StringUtilsTest#testGetFuzzyDistance_NullStringLocale",
      "smells": {
        "Lazy Test": 1
      }
    },
    "testGetFuzzyDistance_NullNullNull": {
      "name": "testGetFuzzyDistance_NullNullNull",
      "mvn_run": "org.apache.commons.lang3.StringUtilsTest#testGetFuzzyDistance_NullNullNull",
      "smells": {
        "Lazy Test": 1
      }
    },
    "testReplaceChars_StringCharChar": {
      "name": "testReplaceChars_StringCharChar",
      "mvn_run": "org.apache.commons.lang3.StringUtilsTest#testReplaceChars_StringCharChar",
      "smells": {
        "Lazy Test": 1,
        "Assertion Roulette": 4
      }
    },
    "testLang623": {
      "name": "testLang623",
      "mvn_run": "org.apache.commons.lang3.StringUtilsTest#testLang623",
      "smells": {
        "Lazy Test": 1,
        "Assertion Roulette": 2
      }
    },
    "testJoinWithThrowsException": {
      "name": "testJoinWithThrowsException",
      "mvn_run": "org.apache.commons.lang3.StringUtilsTest#testJoinWithThrowsException",
      "smells": {
        "Lazy Test": 1
      }
    },
    "testRemoveStartString": {
      "name": "testRemoveStartString",
      "mvn_run": "org.apache.commons.lang3.StringUtilsTest#testRemoveStartString",
      "smells": {
        "Lazy Test": 1,
        "Assertion Roulette": 10
      }
    },
    "testRemoveStartChar": {
      "name": "testRemoveStartChar",
      "mvn_run": "org.apache.commons.lang3.StringUtilsTest#testRemoveStartChar",
      "smells": {
        "Lazy Test": 1,
        "Assertion Roulette": 7
      }
    },
    "testReplaceIgnoreCase_StringStringString": {
      "name": "testReplaceIgnoreCase_StringStringString",
      "mvn_run": "org.apache.commons.lang3.StringUtilsTest#testReplaceIgnoreCase_StringStringString",
      "smells": {
        "Lazy Test": 1,
        "Assertion Roulette": 18
      }
    },
    "testUnCapitalize": {
      "name": "testUnCapitalize",
      "mvn_run": "org.apache.commons.lang3.StringUtilsTest#testUnCapitalize",
      "smells": {
        "Lazy Test": 1,
        "Assertion Roulette": 7
      }
    },
    "testDefaultIfBlank_StringString": {
      "name": "testDefaultIfBlank_StringString",
      "mvn_run": "org.apache.commons.lang3.StringUtilsTest#testDefaultIfBlank_StringString",
      "smells": {
        "Lazy Test": 1,
        "Assertion Roulette": 6
      }
    },
    "testGetLevenshteinDistance_StringStringNegativeInt": {
      "name": "testGetLevenshteinDistance_StringStringNegativeInt",
      "mvn_run": "org.apache.commons.lang3.StringUtilsTest#testGetLevenshteinDistance_StringStringNegativeInt",
      "smells": {
        "Lazy Test": 1
      }
    },
    "testGetLevenshteinDistance_StringNullInt": {
      "name": "testGetLevenshteinDistance_StringNullInt",
      "mvn_run": "org.apache.commons.lang3.StringUtilsTest#testGetLevenshteinDistance_StringNullInt",
      "smells": {
        "Lazy Test": 1
      }
    },
    "testGetLevenshteinDistance_StringNull": {
      "name": "testGetLevenshteinDistance_StringNull",
      "mvn_run": "org.apache.commons.lang3.StringUtilsTest#testGetLevenshteinDistance_StringNull",
      "smells": {
        "Lazy Test": 1
      }
    },
    "testGetLevenshteinDistance_NullStringInt": {
      "name": "testGetLevenshteinDistance_NullStringInt",
      "mvn_run": "org.apache.commons.lang3.StringUtilsTest#testGetLevenshteinDistance_NullStringInt",
      "smells": {
        "Lazy Test": 1
      }
    },
    "testGetLevenshteinDistance_NullString": {
      "name": "testGetLevenshteinDistance_NullString",
      "mvn_run": "org.apache.commons.lang3.StringUtilsTest#testGetLevenshteinDistance_NullString",
      "smells": {
        "Lazy Test": 1
      }
    },
    "testWrap_StringString": {
      "name": "testWrap_StringString",
      "mvn_run": "org.apache.commons.lang3.StringUtilsTest#testWrap_StringString",
      "smells": {
        "Lazy Test": 1,
        "Duplicate Assert": 1,
        "Assertion Roulette": 13
      }
    },
    "testWrap_StringChar": {
      "name": "testWrap_StringChar",
      "mvn_run": "org.apache.commons.lang3.StringUtilsTest#testWrap_StringChar",
      "smells": {
        "Lazy Test": 1,
        "Assertion Roulette": 10
      }
    },
    "testReplace_StringStringArrayStringArrayBoolean": {
      "name": "testReplace_StringStringArrayStringArrayBoolean",
      "mvn_run": "org.apache.commons.lang3.StringUtilsTest#testReplace_StringStringArrayStringArrayBoolean",
      "smells": {
        "Duplicate Assert": 1,
        "Assertion Roulette": 11
      }
    },
    "testReverseDelimited_StringChar": {
      "name": "testReverseDelimited_StringChar",
      "mvn_run": "org.apache.commons.lang3.StringUtilsTest#testReverseDelimited_StringChar",
      "smells": {
        "Duplicate Assert": 1,
        "Assertion Roulette": 5
      }
    },
    "testToEncodedString": {
      "name": "testToEncodedString",
      "mvn_run": "org.apache.commons.lang3.StringUtilsTest#testToEncodedString",
      "smells": {
        "Duplicate Assert": 1,
        "Assertion Roulette": 4
      }
    },
    "testToRootLowerCase": {
      "name": "testToRootLowerCase",
      "mvn_run": "org.apache.commons.lang3.StringUtilsTest#testToRootLowerCase",
      "smells": {
        "Duplicate Assert": 1,
        "Assertion Roulette": 7,
        "Exception Catching Throwing": 1
      }
    },
    "testToRootUpperCase": {
      "name": "testToRootUpperCase",
      "mvn_run": "org.apache.commons.lang3.StringUtilsTest#testToRootUpperCase",
      "smells": {
        "Duplicate Assert": 1,
        "Assertion Roulette": 7,
        "Exception Catching Throwing": 1
      }
    },
    "testAppendIfMissing": {
      "name": "testAppendIfMissing",
      "mvn_run": "org.apache.commons.lang3.StringUtilsTest#testAppendIfMissing",
      "smells": {
        "Eager Test": 1
      }
    },
    "testAppendIfMissingIgnoreCase": {
      "name": "testAppendIfMissingIgnoreCase",
      "mvn_run": "org.apache.commons.lang3.StringUtilsTest#testAppendIfMissingIgnoreCase",
      "smells": {
        "Eager Test": 1
      }
    },
    "testNormalizeSpace": {
      "name": "testNormalizeSpace",
      "mvn_run": "org.apache.commons.lang3.StringUtilsTest#testNormalizeSpace",
      "smells": {
        "Eager Test": 1,
        "Assertion Roulette": 21
      }
    },
    "testPrependIfMissing": {
      "name": "testPrependIfMissing",
      "mvn_run": "org.apache.commons.lang3.StringUtilsTest#testPrependIfMissing",
      "smells": {
        "Eager Test": 1
      }
    },
    "testPrependIfMissingIgnoreCase": {
      "name": "testPrependIfMissingIgnoreCase",
      "mvn_run": "org.apache.commons.lang3.StringUtilsTest#testPrependIfMissingIgnoreCase",
      "smells": {
        "Eager Test": 1
      }
    },
    "testChop": {
      "name": "testChop",
      "mvn_run": "org.apache.commons.lang3.StringUtilsTest#testChop",
      "smells": {
        "Assertion Roulette": 1,
        "Conditional Test Logic": 1
      }
    },
    "testDeleteWhitespace_String": {
      "name": "testDeleteWhitespace_String",
      "mvn_run": "org.apache.commons.lang3.StringUtilsTest#testDeleteWhitespace_String",
      "smells": {
        "Assertion Roulette": 8
      }
    },
    "testDifference_StringString": {
      "name": "testDifference_StringString",
      "mvn_run": "org.apache.commons.lang3.StringUtilsTest#testDifference_StringString",
      "smells": {
        "Assertion Roulette": 9
      }
    },
    "testEscapeSurrogatePairs": {
      "name": "testEscapeSurrogatePairs",
      "mvn_run": "org.apache.commons.lang3.StringUtilsTest#testEscapeSurrogatePairs",
      "smells": {
        "Assertion Roulette": 7
      }
    },
    "testEscapeSurrogatePairsLang858": {
      "name": "testEscapeSurrogatePairsLang858",
      "mvn_run": "org.apache.commons.lang3.StringUtilsTest#testEscapeSurrogatePairsLang858",
      "smells": {
        "Assertion Roulette": 2
      }
    },
    "testGetCommonPrefix_StringArray": {
      "name": "testGetCommonPrefix_StringArray",
      "mvn_run": "org.apache.commons.lang3.StringUtilsTest#testGetCommonPrefix_StringArray",
      "smells": {
        "Assertion Roulette": 17
      }
    },
    "testGetDigits": {
      "name": "testGetDigits",
      "mvn_run": "org.apache.commons.lang3.StringUtilsTest#testGetDigits",
      "smells": {
        "Assertion Roulette": 7
      }
    },
    "testIsAllLowerCase": {
      "name": "testIsAllLowerCase",
      "mvn_run": "org.apache.commons.lang3.StringUtilsTest#testIsAllLowerCase",
      "smells": {
        "Assertion Roulette": 10
      }
    },
    "testIsAllUpperCase": {
      "name": "testIsAllUpperCase",
      "mvn_run": "org.apache.commons.lang3.StringUtilsTest#testIsAllUpperCase",
      "smells": {
        "Assertion Roulette": 10
      }
    },
    "testIsMixedCase": {
      "name": "testIsMixedCase",
      "mvn_run": "org.apache.commons.lang3.StringUtilsTest#testIsMixedCase",
      "smells": {
        "Assertion Roulette": 16
      }
    },
    "testLANG666": {
      "name": "testLANG666",
      "mvn_run": "org.apache.commons.lang3.StringUtilsTest#testLANG666",
      "smells": {
        "Assertion Roulette": 2
      }
    },
    "testLowerCase": {
      "name": "testLowerCase",
      "mvn_run": "org.apache.commons.lang3.StringUtilsTest#testLowerCase",
      "smells": {
        "Assertion Roulette": 4
      }
    },
    "testRemoveAll_StringString": {
      "name": "testRemoveAll_StringString",
      "mvn_run": "org.apache.commons.lang3.StringUtilsTest#testRemoveAll_StringString",
      "smells": {
        "Assertion Roulette": 9
      }
    },
    "testRemoveEnd": {
      "name": "testRemoveEnd",
      "mvn_run": "org.apache.commons.lang3.StringUtilsTest#testRemoveEnd",
      "smells": {
        "Assertion Roulette": 11
      }
    },
    "testRemoveEndIgnoreCase": {
      "name": "testRemoveEndIgnoreCase",
      "mvn_run": "org.apache.commons.lang3.StringUtilsTest#testRemoveEndIgnoreCase",
      "smells": {
        "Assertion Roulette": 10
      }
    },
    "testRemoveFirst_StringString": {
      "name": "testRemoveFirst_StringString",
      "mvn_run": "org.apache.commons.lang3.StringUtilsTest#testRemoveFirst_StringString",
      "smells": {
        "Assertion Roulette": 10
      }
    },
    "testRemovePattern_StringString": {
      "name": "testRemovePattern_StringString",
      "mvn_run": "org.apache.commons.lang3.StringUtilsTest#testRemovePattern_StringString",
      "smells": {
        "Assertion Roulette": 10
      }
    },
    "testRemoveStartIgnoreCase": {
      "name": "testRemoveStartIgnoreCase",
      "mvn_run": "org.apache.commons.lang3.StringUtilsTest#testRemoveStartIgnoreCase",
      "smells": {
        "Assertion Roulette": 8
      }
    },
    "testReplaceAll_StringStringString": {
      "name": "testReplaceAll_StringStringString",
      "mvn_run": "org.apache.commons.lang3.StringUtilsTest#testReplaceAll_StringStringString",
      "smells": {
        "Assertion Roulette": 13
      }
    },
    "testReplaceFirst_StringStringString": {
      "name": "testReplaceFirst_StringStringString",
      "mvn_run": "org.apache.commons.lang3.StringUtilsTest#testReplaceFirst_StringStringString",
      "smells": {
        "Assertion Roulette": 13
      }
    },
    "testReplaceOnce_StringStringString": {
      "name": "testReplaceOnce_StringStringString",
      "mvn_run": "org.apache.commons.lang3.StringUtilsTest#testReplaceOnce_StringStringString",
      "smells": {
        "Assertion Roulette": 13
      }
    },
    "testReplaceOnceIgnoreCase_StringStringString": {
      "name": "testReplaceOnceIgnoreCase_StringStringString",
      "mvn_run": "org.apache.commons.lang3.StringUtilsTest#testReplaceOnceIgnoreCase_StringStringString",
      "smells": {
        "Assertion Roulette": 14
      }
    },
    "testReplacePattern_StringStringString": {
      "name": "testReplacePattern_StringStringString",
      "mvn_run": "org.apache.commons.lang3.StringUtilsTest#testReplacePattern_StringStringString",
      "smells": {
        "Assertion Roulette": 13
      }
    },
    "testReverse_String": {
      "name": "testReverse_String",
      "mvn_run": "org.apache.commons.lang3.StringUtilsTest#testReverse_String",
      "smells": {
        "Assertion Roulette": 3
      }
    },
    "testSwapCase_String": {
      "name": "testSwapCase_String",
      "mvn_run": "org.apache.commons.lang3.StringUtilsTest#testSwapCase_String",
      "smells": {
        "Assertion Roulette": 11
      }
    },
    "testToCodePoints": {
      "name": "testToCodePoints",
      "mvn_run": "org.apache.commons.lang3.StringUtilsTest#testToCodePoints",
      "smells": {
        "Assertion Roulette": 3
      }
    },
    "testUnescapeSurrogatePairs": {
      "name": "testUnescapeSurrogatePairs",
      "mvn_run": "org.apache.commons.lang3.StringUtilsTest#testUnescapeSurrogatePairs",
      "smells": {
        "Assertion Roulette": 6
      }
    },
    "testUpperCase": {
      "name": "testUpperCase",
      "mvn_run": "org.apache.commons.lang3.StringUtilsTest#testUpperCase",
      "smells": {
        "Assertion Roulette": 4
      }
    }
  },
  "org.apache.commons.lang3.SerializationUtilsTest": {
    "testConstructor": {
      "name": "testConstructor",
      "mvn_run": "org.apache.commons.lang3.SerializationUtilsTest#testConstructor",
      "smells": {
        "Magic Number Test": 1,
        "Assertion Roulette": 5
      }
    },
    "testSerializeBytesNull": {
      "name": "testSerializeBytesNull",
      "mvn_run": "org.apache.commons.lang3.SerializationUtilsTest#testSerializeBytesNull",
      "smells": {
        "Lazy Test": 2,
        "Assertion Roulette": 2,
        "Exception Catching Throwing": 1
      }
    },
    "testSerializeBytesUnserializable": {
      "name": "testSerializeBytesUnserializable",
      "mvn_run": "org.apache.commons.lang3.SerializationUtilsTest#testSerializeBytesUnserializable",
      "smells": {
        "Lazy Test": 2
      }
    },
    "testSerializeBytes": {
      "name": "testSerializeBytes",
      "mvn_run": "org.apache.commons.lang3.SerializationUtilsTest#testSerializeBytes",
      "smells": {
        "Lazy Test": 2,
        "Assertion Roulette": 2,
        "Exception Catching Throwing": 1
      }
    },
    "testDeserializeClassCastException": {
      "name": "testDeserializeClassCastException",
      "mvn_run": "org.apache.commons.lang3.SerializationUtilsTest#testDeserializeClassCastException",
      "smells": {
        "Lazy Test": 4,
        "Eager Test": 1,
        "Assertion Roulette": 1
      }
    },
    "testSerializeIOException": {
      "name": "testSerializeIOException",
      "mvn_run": "org.apache.commons.lang3.SerializationUtilsTest#testSerializeIOException",
      "smells": {
        "Lazy Test": 2,
        "Assertion Roulette": 1
      }
    },
    "testSerializeStreamNullNull": {
      "name": "testSerializeStreamNullNull",
      "mvn_run": "org.apache.commons.lang3.SerializationUtilsTest#testSerializeStreamNullNull",
      "smells": {
        "Lazy Test": 2
      }
    },
    "testSerializeStreamObjNull": {
      "name": "testSerializeStreamObjNull",
      "mvn_run": "org.apache.commons.lang3.SerializationUtilsTest#testSerializeStreamObjNull",
      "smells": {
        "Lazy Test": 2
      }
    },
    "testSerializeStreamNullObj": {
      "name": "testSerializeStreamNullObj",
      "mvn_run": "org.apache.commons.lang3.SerializationUtilsTest#testSerializeStreamNullObj",
      "smells": {
        "Lazy Test": 2,
        "Assertion Roulette": 2,
        "Exception Catching Throwing": 1
      }
    },
    "testSerializeStreamUnserializable": {
      "name": "testSerializeStreamUnserializable",
      "mvn_run": "org.apache.commons.lang3.SerializationUtilsTest#testSerializeStreamUnserializable",
      "smells": {
        "Lazy Test": 2
      }
    },
    "testSerializeStream": {
      "name": "testSerializeStream",
      "mvn_run": "org.apache.commons.lang3.SerializationUtilsTest#testSerializeStream",
      "smells": {
        "Lazy Test": 2,
        "Assertion Roulette": 2,
        "Exception Catching Throwing": 1
      }
    },
    "testPrimitiveTypeClassSerialization": {
      "name": "testPrimitiveTypeClassSerialization",
      "mvn_run": "org.apache.commons.lang3.SerializationUtilsTest#testPrimitiveTypeClassSerialization",
      "smells": {
        "Lazy Test": 2,
        "Assertion Roulette": 1,
        "Conditional Test Logic": 1
      }
    },
    "testCloneUnserializable": {
      "name": "testCloneUnserializable",
      "mvn_run": "org.apache.commons.lang3.SerializationUtilsTest#testCloneUnserializable",
      "smells": {
        "Lazy Test": 2
      }
    },
    "testCloneNull": {
      "name": "testCloneNull",
      "mvn_run": "org.apache.commons.lang3.SerializationUtilsTest#testCloneNull",
      "smells": {
        "Lazy Test": 2,
        "Assertion Roulette": 1
      }
    },
    "testClone": {
      "name": "testClone",
      "mvn_run": "org.apache.commons.lang3.SerializationUtilsTest#testClone",
      "smells": {
        "Lazy Test": 2,
        "Assertion Roulette": 8
      }
    },
    "testDeserializeBytesBadStream": {
      "name": "testDeserializeBytesBadStream",
      "mvn_run": "org.apache.commons.lang3.SerializationUtilsTest#testDeserializeBytesBadStream",
      "smells": {
        "Lazy Test": 2
      }
    },
    "testDeserializeBytesNull": {
      "name": "testDeserializeBytesNull",
      "mvn_run": "org.apache.commons.lang3.SerializationUtilsTest#testDeserializeBytesNull",
      "smells": {
        "Lazy Test": 2
      }
    },
    "testDeserializeBytesOfNull": {
      "name": "testDeserializeBytesOfNull",
      "mvn_run": "org.apache.commons.lang3.SerializationUtilsTest#testDeserializeBytesOfNull",
      "smells": {
        "Lazy Test": 2,
        "Assertion Roulette": 1,
        "Exception Catching Throwing": 1
      }
    },
    "testDeserializeBytes": {
      "name": "testDeserializeBytes",
      "mvn_run": "org.apache.commons.lang3.SerializationUtilsTest#testDeserializeBytes",
      "smells": {
        "Lazy Test": 2,
        "Assertion Roulette": 8,
        "Exception Catching Throwing": 1
      }
    },
    "testDeserializeStreamClassNotFound": {
      "name": "testDeserializeStreamClassNotFound",
      "mvn_run": "org.apache.commons.lang3.SerializationUtilsTest#testDeserializeStreamClassNotFound",
      "smells": {
        "Lazy Test": 2,
        "Assertion Roulette": 1,
        "Exception Catching Throwing": 1
      }
    },
    "testDeserializeStreamBadStream": {
      "name": "testDeserializeStreamBadStream",
      "mvn_run": "org.apache.commons.lang3.SerializationUtilsTest#testDeserializeStreamBadStream",
      "smells": {
        "Lazy Test": 2
      }
    },
    "testDeserializeStreamNull": {
      "name": "testDeserializeStreamNull",
      "mvn_run": "org.apache.commons.lang3.SerializationUtilsTest#testDeserializeStreamNull",
      "smells": {
        "Lazy Test": 2
      }
    },
    "testDeserializeStreamOfNull": {
      "name": "testDeserializeStreamOfNull",
      "mvn_run": "org.apache.commons.lang3.SerializationUtilsTest#testDeserializeStreamOfNull",
      "smells": {
        "Lazy Test": 2,
        "Assertion Roulette": 1,
        "Exception Catching Throwing": 1
      }
    },
    "testDeserializeStream": {
      "name": "testDeserializeStream",
      "mvn_run": "org.apache.commons.lang3.SerializationUtilsTest#testDeserializeStream",
      "smells": {
        "Lazy Test": 2,
        "Assertion Roulette": 8,
        "Exception Catching Throwing": 1
      }
    },
    "testException": {
      "name": "testException",
      "mvn_run": "org.apache.commons.lang3.SerializationUtilsTest#testException",
      "smells": {
        "Duplicate Assert": 3,
        "Assertion Roulette": 8
      }
    },
    "testRoundtrip": {
      "name": "testRoundtrip",
      "mvn_run": "org.apache.commons.lang3.SerializationUtilsTest#testRoundtrip",
      "smells": {
        "Assertion Roulette": 1
      }
    },
    "setUp": {
      "name": "setUp",
      "mvn_run": "org.apache.commons.lang3.SerializationUtilsTest#setUp",
      "smells": {
        "General Fixture": 3
      }
    }
  },
  "org.apache.commons.lang3.text.StrLookupTest": {
    "testMapLookup_nullMap": {
      "name": "testMapLookup_nullMap",
      "mvn_run": "org.apache.commons.lang3.text.StrLookupTest#testMapLookup_nullMap",
      "smells": {
        "Lazy Test": 2,
        "Eager Test": 1,
        "Assertion Roulette": 3
      }
    },
    "testMapLookup": {
      "name": "testMapLookup",
      "mvn_run": "org.apache.commons.lang3.text.StrLookupTest#testMapLookup",
      "smells": {
        "Lazy Test": 2,
        "Eager Test": 1,
        "Assertion Roulette": 5
      }
    },
    "testSystemPropertiesLookupUpdatedProperty": {
      "name": "testSystemPropertiesLookupUpdatedProperty",
      "mvn_run": "org.apache.commons.lang3.text.StrLookupTest#testSystemPropertiesLookupUpdatedProperty",
      "smells": {
        "Lazy Test": 2,
        "Eager Test": 1,
        "Assertion Roulette": 1,
        "Exception Catching Throwing": 1
      }
    },
    "testSystemPropertiesLookupReplacedProperties": {
      "name": "testSystemPropertiesLookupReplacedProperties",
      "mvn_run": "org.apache.commons.lang3.text.StrLookupTest#testSystemPropertiesLookupReplacedProperties",
      "smells": {
        "Lazy Test": 2,
        "Eager Test": 1,
        "Assertion Roulette": 1,
        "Exception Catching Throwing": 1
      }
    },
    "testSystemPropertiesLookup": {
      "name": "testSystemPropertiesLookup",
      "mvn_run": "org.apache.commons.lang3.text.StrLookupTest#testSystemPropertiesLookup",
      "smells": {
        "Lazy Test": 2,
        "Eager Test": 1,
        "Assertion Roulette": 3
      }
    },
    "testNoneLookup": {
      "name": "testNoneLookup",
      "mvn_run": "org.apache.commons.lang3.text.StrLookupTest#testNoneLookup",
      "smells": {
        "Lazy Test": 1,
        "Eager Test": 1,
        "Assertion Roulette": 3
      }
    }
  },
  "org.apache.commons.lang3.text.StrMatcherTest": {
    "testCommaMatcher": {
      "name": "testCommaMatcher",
      "mvn_run": "org.apache.commons.lang3.text.StrMatcherTest#testCommaMatcher",
      "smells": {
        "Magic Number Test": 3,
        "Lazy Test": 1,
        "Eager Test": 1,
        "Assertion Roulette": 4
      }
    },
    "testTabMatcher": {
      "name": "testTabMatcher",
      "mvn_run": "org.apache.commons.lang3.text.StrMatcherTest#testTabMatcher",
      "smells": {
        "Magic Number Test": 3,
        "Lazy Test": 1,
        "Eager Test": 1,
        "Assertion Roulette": 4
      }
    },
    "testSpaceMatcher": {
      "name": "testSpaceMatcher",
      "mvn_run": "org.apache.commons.lang3.text.StrMatcherTest#testSpaceMatcher",
      "smells": {
        "Magic Number Test": 3,
        "Lazy Test": 1,
        "Eager Test": 1,
        "Assertion Roulette": 4
      }
    },
    "testSplitMatcher": {
      "name": "testSplitMatcher",
      "mvn_run": "org.apache.commons.lang3.text.StrMatcherTest#testSplitMatcher",
      "smells": {
        "Magic Number Test": 9,
        "Lazy Test": 1,
        "Eager Test": 1,
        "Assertion Roulette": 10
      }
    },
    "testTrimMatcher": {
      "name": "testTrimMatcher",
      "mvn_run": "org.apache.commons.lang3.text.StrMatcherTest#testTrimMatcher",
      "smells": {
        "Magic Number Test": 9,
        "Lazy Test": 1,
        "Eager Test": 1,
        "Assertion Roulette": 10
      }
    },
    "testSingleQuoteMatcher": {
      "name": "testSingleQuoteMatcher",
      "mvn_run": "org.apache.commons.lang3.text.StrMatcherTest#testSingleQuoteMatcher",
      "smells": {
        "Magic Number Test": 3,
        "Lazy Test": 1,
        "Eager Test": 1,
        "Assertion Roulette": 4
      }
    },
    "testDoubleQuoteMatcher": {
      "name": "testDoubleQuoteMatcher",
      "mvn_run": "org.apache.commons.lang3.text.StrMatcherTest#testDoubleQuoteMatcher",
      "smells": {
        "Magic Number Test": 2,
        "Lazy Test": 1,
        "Eager Test": 1,
        "Assertion Roulette": 3
      }
    },
    "testQuoteMatcher": {
      "name": "testQuoteMatcher",
      "mvn_run": "org.apache.commons.lang3.text.StrMatcherTest#testQuoteMatcher",
      "smells": {
        "Magic Number Test": 3,
        "Lazy Test": 1,
        "Eager Test": 1,
        "Assertion Roulette": 4
      }
    },
    "testNoneMatcher": {
      "name": "testNoneMatcher",
      "mvn_run": "org.apache.commons.lang3.text.StrMatcherTest#testNoneMatcher",
      "smells": {
        "Magic Number Test": 13,
        "Lazy Test": 2,
        "Eager Test": 1,
        "Assertion Roulette": 14
      }
    },
    "testCharMatcher_char": {
      "name": "testCharMatcher_char",
      "mvn_run": "org.apache.commons.lang3.text.StrMatcherTest#testCharMatcher_char",
      "smells": {
        "Magic Number Test": 6,
        "Lazy Test": 1,
        "Eager Test": 1,
        "Assertion Roulette": 6
      }
    },
    "testCharSetMatcher_String": {
      "name": "testCharSetMatcher_String",
      "mvn_run": "org.apache.commons.lang3.text.StrMatcherTest#testCharSetMatcher_String",
      "smells": {
        "Magic Number Test": 6,
        "Lazy Test": 3,
        "Eager Test": 1,
        "Assertion Roulette": 9
      }
    },
    "testCharSetMatcher_charArray": {
      "name": "testCharSetMatcher_charArray",
      "mvn_run": "org.apache.commons.lang3.text.StrMatcherTest#testCharSetMatcher_charArray",
      "smells": {
        "Magic Number Test": 6,
        "Lazy Test": 3,
        "Eager Test": 1,
        "Assertion Roulette": 9
      }
    },
    "testStringMatcher_String": {
      "name": "testStringMatcher_String",
      "mvn_run": "org.apache.commons.lang3.text.StrMatcherTest#testStringMatcher_String",
      "smells": {
        "Magic Number Test": 6,
        "Lazy Test": 3,
        "Eager Test": 1,
        "Assertion Roulette": 8
      }
    },
    "testMatcherIndices": {
      "name": "testMatcherIndices",
      "mvn_run": "org.apache.commons.lang3.text.StrMatcherTest#testMatcherIndices",
      "smells": {
        "Magic Number Test": 3,
        "Lazy Test": 2,
        "Eager Test": 1,
        "Assertion Roulette": 3
      }
    }
  },
  "org.apache.commons.lang3.text.WordUtilsTest": {
    "testLANG1292": {
      "name": "testLANG1292",
      "mvn_run": "org.apache.commons.lang3.text.WordUtilsTest#testLANG1292",
      "smells": {
        "Unknown Test": 1,
        "Lazy Test": 1
      }
    },
    "testLANG1397": {
      "name": "testLANG1397",
      "mvn_run": "org.apache.commons.lang3.text.WordUtilsTest#testLANG1397",
      "smells": {
        "Unknown Test": 1,
        "Lazy Test": 1
      }
    },
    "testConstructor": {
      "name": "testConstructor",
      "mvn_run": "org.apache.commons.lang3.text.WordUtilsTest#testConstructor",
      "smells": {
        "Magic Number Test": 1,
        "Assertion Roulette": 5
      }
    },
    "testWrap_StringInt": {
      "name": "testWrap_StringInt",
      "mvn_run": "org.apache.commons.lang3.text.WordUtilsTest#testWrap_StringInt",
      "smells": {
        "Magic Number Test": 8,
        "Verbose Test": 1,
        "Lazy Test": 1,
        "Duplicate Assert": 1,
        "Assertion Roulette": 8
      }
    },
    "testWrap_StringIntStringBoolean": {
      "name": "testWrap_StringIntStringBoolean",
      "mvn_run": "org.apache.commons.lang3.text.WordUtilsTest#testWrap_StringIntStringBoolean",
      "smells": {
        "Magic Number Test": 31,
        "Verbose Test": 1,
        "Lazy Test": 1,
        "Duplicate Assert": 2,
        "Assertion Roulette": 31
      }
    },
    "testWrap_StringIntStringBooleanString": {
      "name": "testWrap_StringIntStringBooleanString",
      "mvn_run": "org.apache.commons.lang3.text.WordUtilsTest#testWrap_StringIntStringBooleanString",
      "smells": {
        "Magic Number Test": 5,
        "Lazy Test": 1,
        "Duplicate Assert": 1,
        "Assertion Roulette": 5
      }
    },
    "testInitials_String_charArray": {
      "name": "testInitials_String_charArray",
      "mvn_run": "org.apache.commons.lang3.text.WordUtilsTest#testInitials_String_charArray",
      "smells": {
        "Verbose Test": 1,
        "Lazy Test": 1,
        "Duplicate Assert": 14,
        "Assertion Roulette": 69
      }
    },
    "testUncapitalizeWithDelimiters_String": {
      "name": "testUncapitalizeWithDelimiters_String",
      "mvn_run": "org.apache.commons.lang3.text.WordUtilsTest#testUncapitalizeWithDelimiters_String",
      "smells": {
        "Lazy Test": 1,
        "Assertion Roulette": 11
      }
    },
    "testUncapitalize_String": {
      "name": "testUncapitalize_String",
      "mvn_run": "org.apache.commons.lang3.text.WordUtilsTest#testUncapitalize_String",
      "smells": {
        "Lazy Test": 1,
        "Assertion Roulette": 9
      }
    },
    "testInitials_String": {
      "name": "testInitials_String",
      "mvn_run": "org.apache.commons.lang3.text.WordUtilsTest#testInitials_String",
      "smells": {
        "Lazy Test": 1,
        "Assertion Roulette": 10
      }
    },
    "testCapitalizeFullyWithDelimiters_String": {
      "name": "testCapitalizeFullyWithDelimiters_String",
      "mvn_run": "org.apache.commons.lang3.text.WordUtilsTest#testCapitalizeFullyWithDelimiters_String",
      "smells": {
        "Lazy Test": 1,
        "Assertion Roulette": 11
      }
    },
    "testCapitalizeFully_String": {
      "name": "testCapitalizeFully_String",
      "mvn_run": "org.apache.commons.lang3.text.WordUtilsTest#testCapitalizeFully_String",
      "smells": {
        "Lazy Test": 1,
        "Assertion Roulette": 9
      }
    },
    "testCapitalizeWithDelimiters_String": {
      "name": "testCapitalizeWithDelimiters_String",
      "mvn_run": "org.apache.commons.lang3.text.WordUtilsTest#testCapitalizeWithDelimiters_String",
      "smells": {
        "Lazy Test": 1,
        "Assertion Roulette": 11
      }
    },
    "testCapitalize_String": {
      "name": "testCapitalize_String",
      "mvn_run": "org.apache.commons.lang3.text.WordUtilsTest#testCapitalize_String",
      "smells": {
        "Lazy Test": 1,
        "Assertion Roulette": 9
      }
    },
    "testContainsAllWords_StringString": {
      "name": "testContainsAllWords_StringString",
      "mvn_run": "org.apache.commons.lang3.text.WordUtilsTest#testContainsAllWords_StringString",
      "smells": {
        "Assertion Roulette": 14
      }
    },
    "testSwapCase_String": {
      "name": "testSwapCase_String",
      "mvn_run": "org.apache.commons.lang3.text.WordUtilsTest#testSwapCase_String",
      "smells": {
        "Assertion Roulette": 10
      }
    }
  },
  "org.apache.commons.lang3.text.translate.OctalUnescaperTest": {
    "testBetween": {
      "name": "testBetween",
      "mvn_run": "org.apache.commons.lang3.text.translate.OctalUnescaperTest#testBetween",
      "smells": {
        "Verbose Test": 1,
        "Assertion Roulette": 4
      }
    }
  },
  "org.apache.commons.lang3.text.translate.LookupTranslatorTest": {
    "testBasicLookup": {
      "name": "testBasicLookup",
      "mvn_run": "org.apache.commons.lang3.text.translate.LookupTranslatorTest#testBasicLookup",
      "smells": {
        "Magic Number Test": 1,
        "Sensitive Equality": 1,
        "Lazy Test": 2,
        "Eager Test": 1,
        "Assertion Roulette": 1
      }
    },
    "testLang882": {
      "name": "testLang882",
      "mvn_run": "org.apache.commons.lang3.text.translate.LookupTranslatorTest#testLang882",
      "smells": {
        "Magic Number Test": 1,
        "Sensitive Equality": 1,
        "Lazy Test": 2,
        "Eager Test": 1,
        "Assertion Roulette": 1
      }
    }
  },
  "org.apache.commons.lang3.text.translate.UnicodeEscaperTest": {
    "testAbove": {
      "name": "testAbove",
      "mvn_run": "org.apache.commons.lang3.text.translate.UnicodeEscaperTest#testAbove",
      "smells": {
        "Lazy Test": 1,
        "Eager Test": 1
      }
    },
    "testBetween": {
      "name": "testBetween",
      "mvn_run": "org.apache.commons.lang3.text.translate.UnicodeEscaperTest#testBetween",
      "smells": {
        "Lazy Test": 1,
        "Eager Test": 1
      }
    },
    "testBelow": {
      "name": "testBelow",
      "mvn_run": "org.apache.commons.lang3.text.translate.UnicodeEscaperTest#testBelow",
      "smells": {
        "Lazy Test": 1,
        "Eager Test": 1
      }
    }
  },
  "org.apache.commons.lang3.text.translate.UnicodeUnpairedSurrogateRemoverTest": {
    "testValidCharacters": {
      "name": "testValidCharacters",
      "mvn_run": "org.apache.commons.lang3.text.translate.UnicodeUnpairedSurrogateRemoverTest#testValidCharacters",
      "smells": {
        "Magic Number Test": 1,
        "Lazy Test": 1,
        "Assertion Roulette": 3
      }
    },
    "testInvalidCharacters": {
      "name": "testInvalidCharacters",
      "mvn_run": "org.apache.commons.lang3.text.translate.UnicodeUnpairedSurrogateRemoverTest#testInvalidCharacters",
      "smells": {
        "Magic Number Test": 1,
        "Lazy Test": 1,
        "Assertion Roulette": 3
      }
    }
  },
  "org.apache.commons.lang3.text.translate.NumericEntityEscaperTest": {
    "testSupplementary": {
      "name": "testSupplementary",
      "mvn_run": "org.apache.commons.lang3.text.translate.NumericEntityEscaperTest#testSupplementary",
      "smells": {
        "Lazy Test": 1,
        "Eager Test": 1,
        "Assertion Roulette": 1
      }
    },
    "testAbove": {
      "name": "testAbove",
      "mvn_run": "org.apache.commons.lang3.text.translate.NumericEntityEscaperTest#testAbove",
      "smells": {
        "Lazy Test": 1,
        "Eager Test": 1
      }
    },
    "testBetween": {
      "name": "testBetween",
      "mvn_run": "org.apache.commons.lang3.text.translate.NumericEntityEscaperTest#testBetween",
      "smells": {
        "Lazy Test": 1,
        "Eager Test": 1
      }
    },
    "testBelow": {
      "name": "testBelow",
      "mvn_run": "org.apache.commons.lang3.text.translate.NumericEntityEscaperTest#testBelow",
      "smells": {
        "Lazy Test": 1,
        "Eager Test": 1
      }
    }
  },
  "org.apache.commons.lang3.text.translate.UnicodeUnescaperTest": {
    "testLessThanFour": {
      "name": "testLessThanFour",
      "mvn_run": "org.apache.commons.lang3.text.translate.UnicodeUnescaperTest#testLessThanFour",
      "smells": {
        "Lazy Test": 1
      }
    },
    "testUuuuu": {
      "name": "testUuuuu",
      "mvn_run": "org.apache.commons.lang3.text.translate.UnicodeUnescaperTest#testUuuuu",
      "smells": {
        "Lazy Test": 1
      }
    },
    "testUPlus": {
      "name": "testUPlus",
      "mvn_run": "org.apache.commons.lang3.text.translate.UnicodeUnescaperTest#testUPlus",
      "smells": {
        "Lazy Test": 1
      }
    }
  },
  "org.apache.commons.lang3.text.translate.EntityArraysTest": {
    "testConstructorExists": {
      "name": "testConstructorExists",
      "mvn_run": "org.apache.commons.lang3.text.translate.EntityArraysTest#testConstructorExists",
      "smells": {
        "Unknown Test": 1
      }
    },
    "testHTML40_EXTENDED_ESCAPE": {
      "name": "testHTML40_EXTENDED_ESCAPE",
      "mvn_run": "org.apache.commons.lang3.text.translate.EntityArraysTest#testHTML40_EXTENDED_ESCAPE",
      "smells": {
        "Conditional Test Logic": 1
      }
    },
    "testISO8859_1_ESCAPE": {
      "name": "testISO8859_1_ESCAPE",
      "mvn_run": "org.apache.commons.lang3.text.translate.EntityArraysTest#testISO8859_1_ESCAPE",
      "smells": {
        "Conditional Test Logic": 3,
        "Print Statement": 2
      }
    }
  },
  "org.apache.commons.lang3.text.translate.NumericEntityUnescaperTest": {
    "testUnfinishedEntity": {
      "name": "testUnfinishedEntity",
      "mvn_run": "org.apache.commons.lang3.text.translate.NumericEntityUnescaperTest#testUnfinishedEntity",
      "smells": {
        "Lazy Test": 1,
        "Assertion Roulette": 2
      }
    },
    "testOutOfBounds": {
      "name": "testOutOfBounds",
      "mvn_run": "org.apache.commons.lang3.text.translate.NumericEntityUnescaperTest#testOutOfBounds",
      "smells": {
        "Lazy Test": 1
      }
    },
    "testSupplementaryUnescaping": {
      "name": "testSupplementaryUnescaping",
      "mvn_run": "org.apache.commons.lang3.text.translate.NumericEntityUnescaperTest#testSupplementaryUnescaping",
      "smells": {
        "Lazy Test": 1,
        "Assertion Roulette": 1
      }
    }
  },
  "org.apache.commons.lang3.text.StrTokenizerTest": {
    "testCSV": {
      "name": "testCSV",
      "mvn_run": "org.apache.commons.lang3.text.StrTokenizerTest#testCSV",
      "smells": {
        "Unknown Test": 1,
        "IgnoredTest": 1,
        "Lazy Test": 1
      }
    },
    "testCSVEmpty": {
      "name": "testCSVEmpty",
      "mvn_run": "org.apache.commons.lang3.text.StrTokenizerTest#testCSVEmpty",
      "smells": {
        "Unknown Test": 1,
        "Lazy Test": 1
      }
    },
    "testCSVSimple": {
      "name": "testCSVSimple",
      "mvn_run": "org.apache.commons.lang3.text.StrTokenizerTest#testCSVSimple",
      "smells": {
        "Unknown Test": 1
      }
    },
    "testCSVSimpleNeedsTrim": {
      "name": "testCSVSimpleNeedsTrim",
      "mvn_run": "org.apache.commons.lang3.text.StrTokenizerTest#testCSVSimpleNeedsTrim",
      "smells": {
        "Unknown Test": 1
      }
    },
    "testTSV": {
      "name": "testTSV",
      "mvn_run": "org.apache.commons.lang3.text.StrTokenizerTest#testTSV",
      "smells": {
        "Unknown Test": 1,
        "Lazy Test": 1
      }
    },
    "testTSVEmpty": {
      "name": "testTSVEmpty",
      "mvn_run": "org.apache.commons.lang3.text.StrTokenizerTest#testTSVEmpty",
      "smells": {
        "Unknown Test": 1,
        "Lazy Test": 1
      }
    },
    "testEmpty": {
      "name": "testEmpty",
      "mvn_run": "org.apache.commons.lang3.text.StrTokenizerTest#testEmpty",
      "smells": {
        "IgnoredTest": 1,
        "Magic Number Test": 1,
        "Lazy Test": 4,
        "Eager Test": 1,
        "Assertion Roulette": 4
      }
    },
    "testXSVAbc": {
      "name": "testXSVAbc",
      "mvn_run": "org.apache.commons.lang3.text.StrTokenizerTest#testXSVAbc",
      "smells": {
        "IgnoredTest": 1,
        "Magic Number Test": 12,
        "Lazy Test": 2,
        "Duplicate Assert": 6,
        "Eager Test": 1,
        "Assertion Roulette": 21
      }
    },
    "testListArray": {
      "name": "testListArray",
      "mvn_run": "org.apache.commons.lang3.text.StrTokenizerTest#testListArray",
      "smells": {
        "Magic Number Test": 1,
        "Lazy Test": 3,
        "Eager Test": 1,
        "Assertion Roulette": 2
      }
    },
    "testConstructor_String_char": {
      "name": "testConstructor_String_char",
      "mvn_run": "org.apache.commons.lang3.text.StrTokenizerTest#testConstructor_String_char",
      "smells": {
        "Magic Number Test": 1,
        "Lazy Test": 4,
        "Duplicate Assert": 1,
        "Eager Test": 1,
        "Assertion Roulette": 6
      }
    },
    "testConstructor_String_char_char": {
      "name": "testConstructor_String_char_char",
      "mvn_run": "org.apache.commons.lang3.text.StrTokenizerTest#testConstructor_String_char_char",
      "smells": {
        "Magic Number Test": 2,
        "Lazy Test": 5,
        "Duplicate Assert": 1,
        "Eager Test": 1,
        "Assertion Roulette": 7
      }
    },
    "testConstructor_charArray_char": {
      "name": "testConstructor_charArray_char",
      "mvn_run": "org.apache.commons.lang3.text.StrTokenizerTest#testConstructor_charArray_char",
      "smells": {
        "Magic Number Test": 1,
        "Lazy Test": 4,
        "Duplicate Assert": 1,
        "Eager Test": 1,
        "Assertion Roulette": 6
      }
    },
    "testConstructor_charArray_char_char": {
      "name": "testConstructor_charArray_char_char",
      "mvn_run": "org.apache.commons.lang3.text.StrTokenizerTest#testConstructor_charArray_char_char",
      "smells": {
        "Magic Number Test": 2,
        "Lazy Test": 5,
        "Duplicate Assert": 1,
        "Eager Test": 1,
        "Assertion Roulette": 7
      }
    },
    "test1": {
      "name": "test1",
      "mvn_run": "org.apache.commons.lang3.text.StrTokenizerTest#test1",
      "smells": {
        "Sensitive Equality": 1,
        "Lazy Test": 6,
        "Eager Test": 1,
        "Assertion Roulette": 2,
        "Conditional Test Logic": 1
      }
    },
    "test2": {
      "name": "test2",
      "mvn_run": "org.apache.commons.lang3.text.StrTokenizerTest#test2",
      "smells": {
        "Sensitive Equality": 1,
        "Lazy Test": 6,
        "Eager Test": 1,
        "Assertion Roulette": 2,
        "Conditional Test Logic": 1
      }
    },
    "test3": {
      "name": "test3",
      "mvn_run": "org.apache.commons.lang3.text.StrTokenizerTest#test3",
      "smells": {
        "Sensitive Equality": 1,
        "Lazy Test": 6,
        "Eager Test": 1,
        "Assertion Roulette": 2,
        "Conditional Test Logic": 1
      }
    },
    "test4": {
      "name": "test4",
      "mvn_run": "org.apache.commons.lang3.text.StrTokenizerTest#test4",
      "smells": {
        "Sensitive Equality": 1,
        "Lazy Test": 6,
        "Eager Test": 1,
        "Assertion Roulette": 2,
        "Conditional Test Logic": 1
      }
    },
    "test5": {
      "name": "test5",
      "mvn_run": "org.apache.commons.lang3.text.StrTokenizerTest#test5",
      "smells": {
        "Sensitive Equality": 1,
        "Lazy Test": 7,
        "Eager Test": 1,
        "Assertion Roulette": 2,
        "Conditional Test Logic": 1
      }
    },
    "test6": {
      "name": "test6",
      "mvn_run": "org.apache.commons.lang3.text.StrTokenizerTest#test6",
      "smells": {
        "Sensitive Equality": 1,
        "Verbose Test": 1,
        "Lazy Test": 9,
        "Eager Test": 1,
        "Assertion Roulette": 3,
        "Conditional Test Logic": 2
      }
    },
    "test7": {
      "name": "test7",
      "mvn_run": "org.apache.commons.lang3.text.StrTokenizerTest#test7",
      "smells": {
        "Sensitive Equality": 1,
        "Lazy Test": 6,
        "Eager Test": 1,
        "Assertion Roulette": 2,
        "Conditional Test Logic": 1
      }
    },
    "test8": {
      "name": "test8",
      "mvn_run": "org.apache.commons.lang3.text.StrTokenizerTest#test8",
      "smells": {
        "Sensitive Equality": 1,
        "Lazy Test": 6,
        "Eager Test": 1,
        "Assertion Roulette": 2,
        "Conditional Test Logic": 1
      }
    },
    "testToString": {
      "name": "testToString",
      "mvn_run": "org.apache.commons.lang3.text.StrTokenizerTest#testToString",
      "smells": {
        "Sensitive Equality": 2,
        "Lazy Test": 2,
        "Eager Test": 1,
        "Assertion Roulette": 2
      }
    },
    "testTokenizeSubclassOutputChange": {
      "name": "testTokenizeSubclassOutputChange",
      "mvn_run": "org.apache.commons.lang3.text.StrTokenizerTest#testTokenizeSubclassOutputChange",
      "smells": {
        "Lazy Test": 2,
        "Eager Test": 1,
        "Assertion Roulette": 3
      }
    },
    "testTokenizeSubclassInputChange": {
      "name": "testTokenizeSubclassInputChange",
      "mvn_run": "org.apache.commons.lang3.text.StrTokenizerTest#testTokenizeSubclassInputChange",
      "smells": {
        "Lazy Test": 2,
        "Eager Test": 1,
        "Assertion Roulette": 2
      }
    },
    "testIteration": {
      "name": "testIteration",
      "mvn_run": "org.apache.commons.lang3.text.StrTokenizerTest#testIteration",
      "smells": {
        "Lazy Test": 4,
        "Duplicate Assert": 3,
        "Eager Test": 1,
        "Assertion Roulette": 13
      }
    },
    "testReset_charArray": {
      "name": "testReset_charArray",
      "mvn_run": "org.apache.commons.lang3.text.StrTokenizerTest#testReset_charArray",
      "smells": {
        "Lazy Test": 4,
        "Duplicate Assert": 1,
        "Eager Test": 1,
        "Assertion Roulette": 3
      }
    },
    "testReset_String": {
      "name": "testReset_String",
      "mvn_run": "org.apache.commons.lang3.text.StrTokenizerTest#testReset_String",
      "smells": {
        "Lazy Test": 4,
        "Duplicate Assert": 1,
        "Eager Test": 1,
        "Assertion Roulette": 4
      }
    },
    "testReset": {
      "name": "testReset",
      "mvn_run": "org.apache.commons.lang3.text.StrTokenizerTest#testReset",
      "smells": {
        "Lazy Test": 4,
        "Duplicate Assert": 4,
        "Eager Test": 1,
        "Assertion Roulette": 8
      }
    },
    "testConstructor_charArray": {
      "name": "testConstructor_charArray",
      "mvn_run": "org.apache.commons.lang3.text.StrTokenizerTest#testConstructor_charArray",
      "smells": {
        "Lazy Test": 3,
        "Duplicate Assert": 1,
        "Eager Test": 1,
        "Assertion Roulette": 5
      }
    },
    "testConstructor_String": {
      "name": "testConstructor_String",
      "mvn_run": "org.apache.commons.lang3.text.StrTokenizerTest#testConstructor_String",
      "smells": {
        "Lazy Test": 3,
        "Duplicate Assert": 1,
        "Eager Test": 1,
        "Assertion Roulette": 5
      }
    },
    "testBasicIgnoreTrimmed4": {
      "name": "testBasicIgnoreTrimmed4",
      "mvn_run": "org.apache.commons.lang3.text.StrTokenizerTest#testBasicIgnoreTrimmed4",
      "smells": {
        "Lazy Test": 7,
        "Eager Test": 1,
        "Assertion Roulette": 4
      }
    },
    "testBasicIgnoreTrimmed3": {
      "name": "testBasicIgnoreTrimmed3",
      "mvn_run": "org.apache.commons.lang3.text.StrTokenizerTest#testBasicIgnoreTrimmed3",
      "smells": {
        "Lazy Test": 6,
        "Eager Test": 1,
        "Assertion Roulette": 4
      }
    },
    "testBasicIgnoreTrimmed2": {
      "name": "testBasicIgnoreTrimmed2",
      "mvn_run": "org.apache.commons.lang3.text.StrTokenizerTest#testBasicIgnoreTrimmed2",
      "smells": {
        "Lazy Test": 7,
        "Eager Test": 1,
        "Assertion Roulette": 4
      }
    },
    "testBasicIgnoreTrimmed1": {
      "name": "testBasicIgnoreTrimmed1",
      "mvn_run": "org.apache.commons.lang3.text.StrTokenizerTest#testBasicIgnoreTrimmed1",
      "smells": {
        "Lazy Test": 7,
        "Eager Test": 1,
        "Assertion Roulette": 4
      }
    },
    "testBasicTrimmed2": {
      "name": "testBasicTrimmed2",
      "mvn_run": "org.apache.commons.lang3.text.StrTokenizerTest#testBasicTrimmed2",
      "smells": {
        "Lazy Test": 6,
        "Eager Test": 1,
        "Assertion Roulette": 4
      }
    },
    "testBasicTrimmed1": {
      "name": "testBasicTrimmed1",
      "mvn_run": "org.apache.commons.lang3.text.StrTokenizerTest#testBasicTrimmed1",
      "smells": {
        "Lazy Test": 6,
        "Eager Test": 1,
        "Assertion Roulette": 4
      }
    },
    "testBasicQuotedTrimmed1": {
      "name": "testBasicQuotedTrimmed1",
      "mvn_run": "org.apache.commons.lang3.text.StrTokenizerTest#testBasicQuotedTrimmed1",
      "smells": {
        "Lazy Test": 6,
        "Eager Test": 1,
        "Assertion Roulette": 4
      }
    },
    "testBasicQuoted7": {
      "name": "testBasicQuoted7",
      "mvn_run": "org.apache.commons.lang3.text.StrTokenizerTest#testBasicQuoted7",
      "smells": {
        "Lazy Test": 4,
        "Eager Test": 1,
        "Assertion Roulette": 4
      }
    },
    "testBasicQuoted6": {
      "name": "testBasicQuoted6",
      "mvn_run": "org.apache.commons.lang3.text.StrTokenizerTest#testBasicQuoted6",
      "smells": {
        "Lazy Test": 4,
        "Eager Test": 1,
        "Assertion Roulette": 3
      }
    },
    "testBasicQuoted5": {
      "name": "testBasicQuoted5",
      "mvn_run": "org.apache.commons.lang3.text.StrTokenizerTest#testBasicQuoted5",
      "smells": {
        "Lazy Test": 6,
        "Eager Test": 1,
        "Assertion Roulette": 4
      }
    },
    "testBasicQuoted4": {
      "name": "testBasicQuoted4",
      "mvn_run": "org.apache.commons.lang3.text.StrTokenizerTest#testBasicQuoted4",
      "smells": {
        "Lazy Test": 6,
        "Eager Test": 1,
        "Assertion Roulette": 4
      }
    },
    "testBasicQuoted3": {
      "name": "testBasicQuoted3",
      "mvn_run": "org.apache.commons.lang3.text.StrTokenizerTest#testBasicQuoted3",
      "smells": {
        "Lazy Test": 5,
        "Eager Test": 1,
        "Assertion Roulette": 3
      }
    },
    "testBasicQuoted2": {
      "name": "testBasicQuoted2",
      "mvn_run": "org.apache.commons.lang3.text.StrTokenizerTest#testBasicQuoted2",
      "smells": {
        "Lazy Test": 5,
        "Eager Test": 1,
        "Assertion Roulette": 4
      }
    },
    "testBasicQuoted1": {
      "name": "testBasicQuoted1",
      "mvn_run": "org.apache.commons.lang3.text.StrTokenizerTest#testBasicQuoted1",
      "smells": {
        "Lazy Test": 3,
        "Eager Test": 1,
        "Assertion Roulette": 4
      }
    },
    "testBasicEmpty2": {
      "name": "testBasicEmpty2",
      "mvn_run": "org.apache.commons.lang3.text.StrTokenizerTest#testBasicEmpty2",
      "smells": {
        "Lazy Test": 5,
        "Eager Test": 1,
        "Assertion Roulette": 5
      }
    },
    "testBasicEmpty1": {
      "name": "testBasicEmpty1",
      "mvn_run": "org.apache.commons.lang3.text.StrTokenizerTest#testBasicEmpty1",
      "smells": {
        "Lazy Test": 4,
        "Eager Test": 1,
        "Assertion Roulette": 5
      }
    },
    "testBasicDelim2": {
      "name": "testBasicDelim2",
      "mvn_run": "org.apache.commons.lang3.text.StrTokenizerTest#testBasicDelim2",
      "smells": {
        "Lazy Test": 3,
        "Eager Test": 1,
        "Assertion Roulette": 2
      }
    },
    "testBasicDelim1": {
      "name": "testBasicDelim1",
      "mvn_run": "org.apache.commons.lang3.text.StrTokenizerTest#testBasicDelim1",
      "smells": {
        "Lazy Test": 3,
        "Eager Test": 1,
        "Assertion Roulette": 4
      }
    },
    "testBasic5": {
      "name": "testBasic5",
      "mvn_run": "org.apache.commons.lang3.text.StrTokenizerTest#testBasic5",
      "smells": {
        "Lazy Test": 3,
        "Eager Test": 1,
        "Assertion Roulette": 4
      }
    },
    "testBasic4": {
      "name": "testBasic4",
      "mvn_run": "org.apache.commons.lang3.text.StrTokenizerTest#testBasic4",
      "smells": {
        "Lazy Test": 3,
        "Eager Test": 1,
        "Assertion Roulette": 4
      }
    },
    "testBasic3": {
      "name": "testBasic3",
      "mvn_run": "org.apache.commons.lang3.text.StrTokenizerTest#testBasic3",
      "smells": {
        "Lazy Test": 3,
        "Eager Test": 1,
        "Assertion Roulette": 4
      }
    },
    "testBasic2": {
      "name": "testBasic2",
      "mvn_run": "org.apache.commons.lang3.text.StrTokenizerTest#testBasic2",
      "smells": {
        "Lazy Test": 3,
        "Eager Test": 1,
        "Assertion Roulette": 4
      }
    },
    "testBasic1": {
      "name": "testBasic1",
      "mvn_run": "org.apache.commons.lang3.text.StrTokenizerTest#testBasic1",
      "smells": {
        "Lazy Test": 3,
        "Eager Test": 1,
        "Assertion Roulette": 4
      }
    },
    "testChaining": {
      "name": "testChaining",
      "mvn_run": "org.apache.commons.lang3.text.StrTokenizerTest#testChaining",
      "smells": {
        "Lazy Test": 10,
        "Eager Test": 1,
        "Assertion Roulette": 13
      }
    },
    "testCloneReset": {
      "name": "testCloneReset",
      "mvn_run": "org.apache.commons.lang3.text.StrTokenizerTest#testCloneReset",
      "smells": {
        "Lazy Test": 4,
        "Duplicate Assert": 1,
        "Eager Test": 1,
        "Assertion Roulette": 4
      }
    },
    "testCloneNull": {
      "name": "testCloneNull",
      "mvn_run": "org.apache.commons.lang3.text.StrTokenizerTest#testCloneNull",
      "smells": {
        "Lazy Test": 4,
        "Duplicate Assert": 1,
        "Eager Test": 1,
        "Assertion Roulette": 4
      }
    },
    "testCloneNotSupportedException": {
      "name": "testCloneNotSupportedException",
      "mvn_run": "org.apache.commons.lang3.text.StrTokenizerTest#testCloneNotSupportedException",
      "smells": {
        "Lazy Test": 2,
        "Eager Test": 1,
        "Assertion Roulette": 1
      }
    },
    "testGetContent": {
      "name": "testGetContent",
      "mvn_run": "org.apache.commons.lang3.text.StrTokenizerTest#testGetContent",
      "smells": {
        "Lazy Test": 1,
        "Duplicate Assert": 1,
        "Eager Test": 1,
        "Assertion Roulette": 3
      }
    }
  },
  "org.apache.commons.lang3.text.CompositeFormatTest": {
    "testCompositeFormat": {
      "name": "testCompositeFormat",
      "mvn_run": "org.apache.commons.lang3.text.CompositeFormatTest#testCompositeFormat",
      "smells": {
        "Verbose Test": 1,
        "Lazy Test": 3,
        "Eager Test": 1,
        "Assertion Roulette": 2
      }
    },
    "testUsage": {
      "name": "testUsage",
      "mvn_run": "org.apache.commons.lang3.text.CompositeFormatTest#testUsage",
      "smells": {
        "Lazy Test": 3,
        "Eager Test": 1,
        "Assertion Roulette": 2
      }
    }
  },
  "org.apache.commons.lang3.text.ExtendedMessageFormatTest": {
    "testBuiltInChoiceFormat": {
      "name": "testBuiltInChoiceFormat",
      "mvn_run": "org.apache.commons.lang3.text.ExtendedMessageFormatTest#testBuiltInChoiceFormat",
      "smells": {
        "Unknown Test": 1,
        "Conditional Test Logic": 2
      }
    },
    "testBuiltInDateTimeFormat": {
      "name": "testBuiltInDateTimeFormat",
      "mvn_run": "org.apache.commons.lang3.text.ExtendedMessageFormatTest#testBuiltInDateTimeFormat",
      "smells": {
        "Unknown Test": 1
      }
    },
    "testBuiltInNumberFormat": {
      "name": "testBuiltInNumberFormat",
      "mvn_run": "org.apache.commons.lang3.text.ExtendedMessageFormatTest#testBuiltInNumberFormat",
      "smells": {
        "Unknown Test": 1
      }
    },
    "testExtendedAndBuiltInFormats": {
      "name": "testExtendedAndBuiltInFormats",
      "mvn_run": "org.apache.commons.lang3.text.ExtendedMessageFormatTest#testExtendedAndBuiltInFormats",
      "smells": {
        "Sensitive Equality": 1,
        "Verbose Test": 1,
        "Lazy Test": 21,
        "Eager Test": 1,
        "Assertion Roulette": 2,
        "Conditional Test Logic": 2
      }
    },
    "testEqualsHashcode": {
      "name": "testEqualsHashcode",
      "mvn_run": "org.apache.commons.lang3.text.ExtendedMessageFormatTest#testEqualsHashcode",
      "smells": {
        "Verbose Test": 1,
        "Lazy Test": 7,
        "Eager Test": 1,
        "Assertion Roulette": 12
      }
    },
    "testOverriddenBuiltinFormat": {
      "name": "testOverriddenBuiltinFormat",
      "mvn_run": "org.apache.commons.lang3.text.ExtendedMessageFormatTest#testOverriddenBuiltinFormat",
      "smells": {
        "Lazy Test": 21,
        "Eager Test": 1,
        "Assertion Roulette": 2,
        "Conditional Test Logic": 2
      }
    },
    "testExtendedFormats": {
      "name": "testExtendedFormats",
      "mvn_run": "org.apache.commons.lang3.text.ExtendedMessageFormatTest#testExtendedFormats",
      "smells": {
        "Lazy Test": 21,
        "Eager Test": 1,
        "Assertion Roulette": 6
      }
    },
    "testEscapedBraces_LANG_948": {
      "name": "testEscapedBraces_LANG_948",
      "mvn_run": "org.apache.commons.lang3.text.ExtendedMessageFormatTest#testEscapedBraces_LANG_948",
      "smells": {
        "Lazy Test": 14,
        "Eager Test": 1,
        "Assertion Roulette": 2
      }
    },
    "testEmbeddedPatternInChoice": {
      "name": "testEmbeddedPatternInChoice",
      "mvn_run": "org.apache.commons.lang3.text.ExtendedMessageFormatTest#testEmbeddedPatternInChoice",
      "smells": {
        "Lazy Test": 14,
        "Eager Test": 1,
        "Assertion Roulette": 1
      }
    },
    "testEscapedQuote_LANG_477": {
      "name": "testEscapedQuote_LANG_477",
      "mvn_run": "org.apache.commons.lang3.text.ExtendedMessageFormatTest#testEscapedQuote_LANG_477",
      "smells": {
        "Lazy Test": 14,
        "Eager Test": 1,
        "Assertion Roulette": 1
      }
    }
  },
  "org.apache.commons.lang3.text.StrSubstitutorTest": {
    "testReplaceSimple": {
      "name": "testReplaceSimple",
      "mvn_run": "org.apache.commons.lang3.text.StrSubstitutorTest#testReplaceSimple",
      "smells": {
        "Unknown Test": 1
      }
    },
    "testReplaceSolo": {
      "name": "testReplaceSolo",
      "mvn_run": "org.apache.commons.lang3.text.StrSubstitutorTest#testReplaceSolo",
      "smells": {
        "Unknown Test": 1
      }
    },
    "testReplaceNoVariables": {
      "name": "testReplaceNoVariables",
      "mvn_run": "org.apache.commons.lang3.text.StrSubstitutorTest#testReplaceNoVariables",
      "smells": {
        "Unknown Test": 1
      }
    },
    "testReplaceNull": {
      "name": "testReplaceNull",
      "mvn_run": "org.apache.commons.lang3.text.StrSubstitutorTest#testReplaceNull",
      "smells": {
        "Unknown Test": 1
      }
    },
    "testReplaceEmpty": {
      "name": "testReplaceEmpty",
      "mvn_run": "org.apache.commons.lang3.text.StrSubstitutorTest#testReplaceEmpty",
      "smells": {
        "Unknown Test": 1
      }
    },
    "testReplaceUnknownKey": {
      "name": "testReplaceUnknownKey",
      "mvn_run": "org.apache.commons.lang3.text.StrSubstitutorTest#testReplaceUnknownKey",
      "smells": {
        "Unknown Test": 1
      }
    },
    "testReplaceRecursive": {
      "name": "testReplaceRecursive",
      "mvn_run": "org.apache.commons.lang3.text.StrSubstitutorTest#testReplaceRecursive",
      "smells": {
        "Unknown Test": 1
      }
    },
    "testReplaceEscaping": {
      "name": "testReplaceEscaping",
      "mvn_run": "org.apache.commons.lang3.text.StrSubstitutorTest#testReplaceEscaping",
      "smells": {
        "Unknown Test": 1
      }
    },
    "testReplaceSoloEscaping": {
      "name": "testReplaceSoloEscaping",
      "mvn_run": "org.apache.commons.lang3.text.StrSubstitutorTest#testReplaceSoloEscaping",
      "smells": {
        "Unknown Test": 1
      }
    },
    "testReplaceComplexEscaping": {
      "name": "testReplaceComplexEscaping",
      "mvn_run": "org.apache.commons.lang3.text.StrSubstitutorTest#testReplaceComplexEscaping",
      "smells": {
        "Unknown Test": 1
      }
    },
    "testReplaceNoPrefixNoSuffix": {
      "name": "testReplaceNoPrefixNoSuffix",
      "mvn_run": "org.apache.commons.lang3.text.StrSubstitutorTest#testReplaceNoPrefixNoSuffix",
      "smells": {
        "Unknown Test": 1
      }
    },
    "testReplaceIncompletePrefix": {
      "name": "testReplaceIncompletePrefix",
      "mvn_run": "org.apache.commons.lang3.text.StrSubstitutorTest#testReplaceIncompletePrefix",
      "smells": {
        "Unknown Test": 1
      }
    },
    "testReplacePrefixNoSuffix": {
      "name": "testReplacePrefixNoSuffix",
      "mvn_run": "org.apache.commons.lang3.text.StrSubstitutorTest#testReplacePrefixNoSuffix",
      "smells": {
        "Unknown Test": 1
      }
    },
    "testReplaceNoPrefixSuffix": {
      "name": "testReplaceNoPrefixSuffix",
      "mvn_run": "org.apache.commons.lang3.text.StrSubstitutorTest#testReplaceNoPrefixSuffix",
      "smells": {
        "Unknown Test": 1
      }
    },
    "testReplaceEmptyKeys": {
      "name": "testReplaceEmptyKeys",
      "mvn_run": "org.apache.commons.lang3.text.StrSubstitutorTest#testReplaceEmptyKeys",
      "smells": {
        "Unknown Test": 1
      }
    },
    "testReplaceToIdentical": {
      "name": "testReplaceToIdentical",
      "mvn_run": "org.apache.commons.lang3.text.StrSubstitutorTest#testReplaceToIdentical",
      "smells": {
        "Unknown Test": 1
      }
    },
    "testReplaceWeirdPattens": {
      "name": "testReplaceWeirdPattens",
      "mvn_run": "org.apache.commons.lang3.text.StrSubstitutorTest#testReplaceWeirdPattens",
      "smells": {
        "Unknown Test": 1
      }
    },
    "testReplacePartialString_noReplace": {
      "name": "testReplacePartialString_noReplace",
      "mvn_run": "org.apache.commons.lang3.text.StrSubstitutorTest#testReplacePartialString_noReplace",
      "smells": {
        "Magic Number Test": 1,
        "Lazy Test": 2,
        "Eager Test": 1,
        "Assertion Roulette": 1
      }
    },
    "testResolveVariable": {
      "name": "testResolveVariable",
      "mvn_run": "org.apache.commons.lang3.text.StrSubstitutorTest#testResolveVariable",
      "smells": {
        "Sensitive Equality": 1,
        "Lazy Test": 1,
        "Eager Test": 1,
        "Assertion Roulette": 1
      }
    },
    "testStaticReplaceSystemProperties": {
      "name": "testStaticReplaceSystemProperties",
      "mvn_run": "org.apache.commons.lang3.text.StrSubstitutorTest#testStaticReplaceSystemProperties",
      "smells": {
        "Sensitive Equality": 1,
        "Lazy Test": 1,
        "Assertion Roulette": 1
      }
    },
    "testDefaultValueDelimiters": {
      "name": "testDefaultValueDelimiters",
      "mvn_run": "org.apache.commons.lang3.text.StrSubstitutorTest#testDefaultValueDelimiters",
      "smells": {
        "Verbose Test": 1,
        "Lazy Test": 3,
        "Duplicate Assert": 1,
        "Eager Test": 1,
        "Assertion Roulette": 6
      }
    },
    "testSubstitutePreserveEscape": {
      "name": "testSubstitutePreserveEscape",
      "mvn_run": "org.apache.commons.lang3.text.StrSubstitutorTest#testSubstitutePreserveEscape",
      "smells": {
        "Lazy Test": 2,
        "Eager Test": 1,
        "Assertion Roulette": 4
      }
    },
    "testSamePrefixAndSuffix": {
      "name": "testSamePrefixAndSuffix",
      "mvn_run": "org.apache.commons.lang3.text.StrSubstitutorTest#testSamePrefixAndSuffix",
      "smells": {
        "Lazy Test": 1,
        "Assertion Roulette": 2
      }
    },
    "testSubstituteDefaultProperties": {
      "name": "testSubstituteDefaultProperties",
      "mvn_run": "org.apache.commons.lang3.text.StrSubstitutorTest#testSubstituteDefaultProperties",
      "smells": {
        "Lazy Test": 1,
        "Assertion Roulette": 1
      }
    },
    "testLANG1055": {
      "name": "testLANG1055",
      "mvn_run": "org.apache.commons.lang3.text.StrSubstitutorTest#testLANG1055",
      "smells": {
        "Lazy Test": 2,
        "Eager Test": 1,
        "Assertion Roulette": 1
      }
    },
    "testStaticReplacePrefixSuffix": {
      "name": "testStaticReplacePrefixSuffix",
      "mvn_run": "org.apache.commons.lang3.text.StrSubstitutorTest#testStaticReplacePrefixSuffix",
      "smells": {
        "Lazy Test": 1,
        "Assertion Roulette": 1
      }
    },
    "testStaticReplace": {
      "name": "testStaticReplace",
      "mvn_run": "org.apache.commons.lang3.text.StrSubstitutorTest#testStaticReplace",
      "smells": {
        "Lazy Test": 1,
        "Assertion Roulette": 1
      }
    },
    "testConstructorMapFull": {
      "name": "testConstructorMapFull",
      "mvn_run": "org.apache.commons.lang3.text.StrSubstitutorTest#testConstructorMapFull",
      "smells": {
        "Lazy Test": 2,
        "Eager Test": 1,
        "Assertion Roulette": 2
      }
    },
    "testConstructorMapPrefixSuffix": {
      "name": "testConstructorMapPrefixSuffix",
      "mvn_run": "org.apache.commons.lang3.text.StrSubstitutorTest#testConstructorMapPrefixSuffix",
      "smells": {
        "Lazy Test": 2,
        "Eager Test": 1,
        "Assertion Roulette": 1
      }
    },
    "testConstructorNoArgs": {
      "name": "testConstructorNoArgs",
      "mvn_run": "org.apache.commons.lang3.text.StrSubstitutorTest#testConstructorNoArgs",
      "smells": {
        "Lazy Test": 2,
        "Eager Test": 1,
        "Assertion Roulette": 1
      }
    },
    "testReplaceInVariableRecursive": {
      "name": "testReplaceInVariableRecursive",
      "mvn_run": "org.apache.commons.lang3.text.StrSubstitutorTest#testReplaceInVariableRecursive",
      "smells": {
        "Lazy Test": 3,
        "Eager Test": 1
      }
    },
    "testReplaceInVariableDisabled": {
      "name": "testReplaceInVariableDisabled",
      "mvn_run": "org.apache.commons.lang3.text.StrSubstitutorTest#testReplaceInVariableDisabled",
      "smells": {
        "Lazy Test": 2,
        "Eager Test": 1
      }
    },
    "testReplaceInVariable": {
      "name": "testReplaceInVariable",
      "mvn_run": "org.apache.commons.lang3.text.StrSubstitutorTest#testReplaceInVariable",
      "smells": {
        "Lazy Test": 3,
        "Eager Test": 1
      }
    },
    "testCyclicReplacement": {
      "name": "testCyclicReplacement",
      "mvn_run": "org.apache.commons.lang3.text.StrSubstitutorTest#testCyclicReplacement",
      "smells": {
        "Lazy Test": 2,
        "Eager Test": 1
      }
    },
    "testReplaceAdjacentAtEnd": {
      "name": "testReplaceAdjacentAtEnd",
      "mvn_run": "org.apache.commons.lang3.text.StrSubstitutorTest#testReplaceAdjacentAtEnd",
      "smells": {
        "Lazy Test": 2,
        "Eager Test": 1,
        "Assertion Roulette": 1
      }
    },
    "testReplaceAdjacentAtStart": {
      "name": "testReplaceAdjacentAtStart",
      "mvn_run": "org.apache.commons.lang3.text.StrSubstitutorTest#testReplaceAdjacentAtStart",
      "smells": {
        "Lazy Test": 2,
        "Eager Test": 1,
        "Assertion Roulette": 1
      }
    },
    "testReplaceChangedMap": {
      "name": "testReplaceChangedMap",
      "mvn_run": "org.apache.commons.lang3.text.StrSubstitutorTest#testReplaceChangedMap",
      "smells": {
        "Lazy Test": 2,
        "Eager Test": 1,
        "Assertion Roulette": 1
      }
    },
    "testGetSetValueDelimiter": {
      "name": "testGetSetValueDelimiter",
      "mvn_run": "org.apache.commons.lang3.text.StrSubstitutorTest#testGetSetValueDelimiter",
      "smells": {
        "Lazy Test": 2,
        "Duplicate Assert": 2,
        "Eager Test": 1,
        "Assertion Roulette": 6
      }
    },
    "testGetSetSuffix": {
      "name": "testGetSetSuffix",
      "mvn_run": "org.apache.commons.lang3.text.StrSubstitutorTest#testGetSetSuffix",
      "smells": {
        "Lazy Test": 1,
        "Duplicate Assert": 2,
        "Eager Test": 1,
        "Assertion Roulette": 6
      }
    },
    "testGetSetPrefix": {
      "name": "testGetSetPrefix",
      "mvn_run": "org.apache.commons.lang3.text.StrSubstitutorTest#testGetSetPrefix",
      "smells": {
        "Lazy Test": 1,
        "Duplicate Assert": 2,
        "Eager Test": 1,
        "Assertion Roulette": 6
      }
    },
    "testGetSetEscape": {
      "name": "testGetSetEscape",
      "mvn_run": "org.apache.commons.lang3.text.StrSubstitutorTest#testGetSetEscape",
      "smells": {
        "Lazy Test": 1,
        "Eager Test": 1,
        "Assertion Roulette": 2
      }
    },
    "setUp": {
      "name": "setUp",
      "mvn_run": "org.apache.commons.lang3.text.StrSubstitutorTest#setUp",
      "smells": {
        "General Fixture": 1
      }
    }
  },
  "org.apache.commons.lang3.text.FormattableUtilsTest": {
    "testDefaultAppend": {
      "name": "testDefaultAppend",
      "mvn_run": "org.apache.commons.lang3.text.FormattableUtilsTest#testDefaultAppend",
      "smells": {
        "Sensitive Equality": 10,
        "Lazy Test": 1,
        "Eager Test": 1,
        "Assertion Roulette": 10
      }
    },
    "testAlternatePadCharacter": {
      "name": "testAlternatePadCharacter",
      "mvn_run": "org.apache.commons.lang3.text.FormattableUtilsTest#testAlternatePadCharacter",
      "smells": {
        "Sensitive Equality": 10,
        "Lazy Test": 1,
        "Eager Test": 1,
        "Assertion Roulette": 10
      }
    },
    "testEllipsis": {
      "name": "testEllipsis",
      "mvn_run": "org.apache.commons.lang3.text.FormattableUtilsTest#testEllipsis",
      "smells": {
        "Sensitive Equality": 20,
        "Lazy Test": 1,
        "Eager Test": 1,
        "Assertion Roulette": 20
      }
    },
    "testAlternatePadCharAndEllipsis": {
      "name": "testAlternatePadCharAndEllipsis",
      "mvn_run": "org.apache.commons.lang3.text.FormattableUtilsTest#testAlternatePadCharAndEllipsis",
      "smells": {
        "Sensitive Equality": 20,
        "Lazy Test": 1,
        "Eager Test": 1,
        "Assertion Roulette": 20
      }
    },
    "testIllegalEllipsis": {
      "name": "testIllegalEllipsis",
      "mvn_run": "org.apache.commons.lang3.text.FormattableUtilsTest#testIllegalEllipsis",
      "smells": {
        "Lazy Test": 1
      }
    }
  },
  "org.apache.commons.lang3.text.StrBuilderTest": {
    "testConstructors": {
      "name": "testConstructors",
      "mvn_run": "org.apache.commons.lang3.text.StrBuilderTest#testConstructors",
      "smells": {
        "Magic Number Test": 24,
        "Verbose Test": 1,
        "Lazy Test": 6,
        "Eager Test": 1,
        "Assertion Roulette": 24
      }
    },
    "testChaining": {
      "name": "testChaining",
      "mvn_run": "org.apache.commons.lang3.text.StrBuilderTest#testChaining",
      "smells": {
        "Magic Number Test": 3,
        "Lazy Test": 11,
        "Eager Test": 1,
        "Assertion Roulette": 9
      }
    },
    "testCapacityAndLength": {
      "name": "testCapacityAndLength",
      "mvn_run": "org.apache.commons.lang3.text.StrBuilderTest#testCapacityAndLength",
      "smells": {
        "Magic Number Test": 36,
        "Sensitive Equality": 2,
        "Verbose Test": 1,
        "Lazy Test": 11,
        "Duplicate Assert": 8,
        "Eager Test": 1,
        "Assertion Roulette": 50
      }
    },
    "testLength": {
      "name": "testLength",
      "mvn_run": "org.apache.commons.lang3.text.StrBuilderTest#testLength",
      "smells": {
        "Magic Number Test": 2,
        "Lazy Test": 3,
        "Eager Test": 1,
        "Assertion Roulette": 2
      }
    },
    "testEnsureCapacity": {
      "name": "testEnsureCapacity",
      "mvn_run": "org.apache.commons.lang3.text.StrBuilderTest#testEnsureCapacity",
      "smells": {
        "Magic Number Test": 3,
        "Lazy Test": 4,
        "Eager Test": 1,
        "Assertion Roulette": 3
      }
    },
    "testMinimizeCapacity": {
      "name": "testMinimizeCapacity",
      "mvn_run": "org.apache.commons.lang3.text.StrBuilderTest#testMinimizeCapacity",
      "smells": {
        "Magic Number Test": 2,
        "Lazy Test": 4,
        "Eager Test": 1,
        "Assertion Roulette": 2
      }
    },
    "testSize": {
      "name": "testSize",
      "mvn_run": "org.apache.commons.lang3.text.StrBuilderTest#testSize",
      "smells": {
        "Magic Number Test": 2,
        "Lazy Test": 3,
        "Eager Test": 1,
        "Assertion Roulette": 2
      }
    },
    "testClear": {
      "name": "testClear",
      "mvn_run": "org.apache.commons.lang3.text.StrBuilderTest#testClear",
      "smells": {
        "Magic Number Test": 2,
        "Lazy Test": 4,
        "Eager Test": 1,
        "Assertion Roulette": 2
      }
    },
    "testCharAt": {
      "name": "testCharAt",
      "mvn_run": "org.apache.commons.lang3.text.StrBuilderTest#testCharAt",
      "smells": {
        "Magic Number Test": 3,
        "Lazy Test": 2,
        "Duplicate Assert": 1,
        "Eager Test": 1,
        "Assertion Roulette": 3
      }
    },
    "testToCharArray": {
      "name": "testToCharArray",
      "mvn_run": "org.apache.commons.lang3.text.StrBuilderTest#testToCharArray",
      "smells": {
        "Magic Number Test": 2,
        "Lazy Test": 3,
        "Eager Test": 1,
        "Assertion Roulette": 4
      }
    },
    "testToCharArrayIntInt": {
      "name": "testToCharArrayIntInt",
      "mvn_run": "org.apache.commons.lang3.text.StrBuilderTest#testToCharArrayIntInt",
      "smells": {
        "Magic Number Test": 4,
        "Lazy Test": 3,
        "Duplicate Assert": 2,
        "Eager Test": 1,
        "Assertion Roulette": 7
      }
    },
    "testGetChars": {
      "name": "testGetChars",
      "mvn_run": "org.apache.commons.lang3.text.StrBuilderTest#testGetChars",
      "smells": {
        "Magic Number Test": 1,
        "Lazy Test": 4,
        "Duplicate Assert": 2,
        "Eager Test": 1,
        "Assertion Roulette": 9
      }
    },
    "testSubSequenceIntInt": {
      "name": "testSubSequenceIntInt",
      "mvn_run": "org.apache.commons.lang3.text.StrBuilderTest#testSubSequenceIntInt",
      "smells": {
        "Magic Number Test": 4,
        "Lazy Test": 2,
        "Eager Test": 1,
        "Assertion Roulette": 4
      }
    },
    "testSubstringInt": {
      "name": "testSubstringInt",
      "mvn_run": "org.apache.commons.lang3.text.StrBuilderTest#testSubstringInt",
      "smells": {
        "Magic Number Test": 4,
        "Lazy Test": 2,
        "Eager Test": 1,
        "Assertion Roulette": 4
      }
    },
    "testSubstringIntInt": {
      "name": "testSubstringIntInt",
      "mvn_run": "org.apache.commons.lang3.text.StrBuilderTest#testSubstringIntInt",
      "smells": {
        "Magic Number Test": 5,
        "Lazy Test": 2,
        "Eager Test": 1,
        "Assertion Roulette": 5
      }
    },
    "testMidString": {
      "name": "testMidString",
      "mvn_run": "org.apache.commons.lang3.text.StrBuilderTest#testMidString",
      "smells": {
        "Magic Number Test": 6,
        "Lazy Test": 1,
        "Eager Test": 1,
        "Assertion Roulette": 6
      }
    },
    "testRightString": {
      "name": "testRightString",
      "mvn_run": "org.apache.commons.lang3.text.StrBuilderTest#testRightString",
      "smells": {
        "Magic Number Test": 4,
        "Lazy Test": 1,
        "Eager Test": 1,
        "Assertion Roulette": 4
      }
    },
    "testLeftString": {
      "name": "testLeftString",
      "mvn_run": "org.apache.commons.lang3.text.StrBuilderTest#testLeftString",
      "smells": {
        "Magic Number Test": 4,
        "Lazy Test": 1,
        "Eager Test": 1,
        "Assertion Roulette": 4
      }
    },
    "testIndexOf_char": {
      "name": "testIndexOf_char",
      "mvn_run": "org.apache.commons.lang3.text.StrBuilderTest#testIndexOf_char",
      "smells": {
        "Magic Number Test": 3,
        "Lazy Test": 2,
        "Eager Test": 1,
        "Assertion Roulette": 5
      }
    },
    "testIndexOf_char_int": {
      "name": "testIndexOf_char_int",
      "mvn_run": "org.apache.commons.lang3.text.StrBuilderTest#testIndexOf_char_int",
      "smells": {
        "Magic Number Test": 11,
        "Lazy Test": 2,
        "Eager Test": 1,
        "Assertion Roulette": 11
      }
    },
    "testLastIndexOf_char": {
      "name": "testLastIndexOf_char",
      "mvn_run": "org.apache.commons.lang3.text.StrBuilderTest#testLastIndexOf_char",
      "smells": {
        "Magic Number Test": 3,
        "Lazy Test": 2,
        "Eager Test": 1,
        "Assertion Roulette": 5
      }
    },
    "testLastIndexOf_char_int": {
      "name": "testLastIndexOf_char_int",
      "mvn_run": "org.apache.commons.lang3.text.StrBuilderTest#testLastIndexOf_char_int",
      "smells": {
        "Magic Number Test": 9,
        "Lazy Test": 3,
        "Eager Test": 1,
        "Assertion Roulette": 9
      }
    },
    "testIndexOf_String": {
      "name": "testIndexOf_String",
      "mvn_run": "org.apache.commons.lang3.text.StrBuilderTest#testIndexOf_String",
      "smells": {
        "Magic Number Test": 6,
        "Lazy Test": 2,
        "Eager Test": 1,
        "Assertion Roulette": 10
      }
    },
    "testIndexOf_String_int": {
      "name": "testIndexOf_String_int",
      "mvn_run": "org.apache.commons.lang3.text.StrBuilderTest#testIndexOf_String_int",
      "smells": {
        "Magic Number Test": 21,
        "Verbose Test": 1,
        "Lazy Test": 2,
        "Eager Test": 1,
        "Assertion Roulette": 21
      }
    },
    "testLastIndexOf_String": {
      "name": "testLastIndexOf_String",
      "mvn_run": "org.apache.commons.lang3.text.StrBuilderTest#testLastIndexOf_String",
      "smells": {
        "Magic Number Test": 6,
        "Lazy Test": 2,
        "Eager Test": 1,
        "Assertion Roulette": 10
      }
    },
    "testLastIndexOf_String_int": {
      "name": "testLastIndexOf_String_int",
      "mvn_run": "org.apache.commons.lang3.text.StrBuilderTest#testLastIndexOf_String_int",
      "smells": {
        "Magic Number Test": 21,
        "Verbose Test": 1,
        "Lazy Test": 3,
        "Eager Test": 1,
        "Assertion Roulette": 21
      }
    },
    "testIndexOf_StrMatcher": {
      "name": "testIndexOf_StrMatcher",
      "mvn_run": "org.apache.commons.lang3.text.StrBuilderTest#testIndexOf_StrMatcher",
      "smells": {
        "Magic Number Test": 9,
        "Lazy Test": 3,
        "Duplicate Assert": 1,
        "Eager Test": 1,
        "Assertion Roulette": 9
      }
    },
    "testIndexOf_StrMatcher_int": {
      "name": "testIndexOf_StrMatcher_int",
      "mvn_run": "org.apache.commons.lang3.text.StrBuilderTest#testIndexOf_StrMatcher_int",
      "smells": {
        "Magic Number Test": 28,
        "Verbose Test": 1,
        "Lazy Test": 3,
        "Duplicate Assert": 1,
        "Eager Test": 1,
        "Assertion Roulette": 28
      }
    },
    "testLastIndexOf_StrMatcher": {
      "name": "testLastIndexOf_StrMatcher",
      "mvn_run": "org.apache.commons.lang3.text.StrBuilderTest#testLastIndexOf_StrMatcher",
      "smells": {
        "Magic Number Test": 9,
        "Lazy Test": 3,
        "Duplicate Assert": 1,
        "Eager Test": 1,
        "Assertion Roulette": 9
      }
    },
    "testLastIndexOf_StrMatcher_int": {
      "name": "testLastIndexOf_StrMatcher_int",
      "mvn_run": "org.apache.commons.lang3.text.StrBuilderTest#testLastIndexOf_StrMatcher_int",
      "smells": {
        "Magic Number Test": 29,
        "Verbose Test": 1,
        "Lazy Test": 3,
        "Eager Test": 1,
        "Assertion Roulette": 29
      }
    },
    "testAsTokenizer": {
      "name": "testAsTokenizer",
      "mvn_run": "org.apache.commons.lang3.text.StrBuilderTest#testAsTokenizer",
      "smells": {
        "Magic Number Test": 6,
        "Verbose Test": 1,
        "Lazy Test": 4,
        "Duplicate Assert": 3,
        "Eager Test": 1,
        "Assertion Roulette": 21
      }
    },
    "testAsReader": {
      "name": "testAsReader",
      "mvn_run": "org.apache.commons.lang3.text.StrBuilderTest#testAsReader",
      "smells": {
        "Magic Number Test": 14,
        "Verbose Test": 1,
        "Lazy Test": 3,
        "Duplicate Assert": 3,
        "Eager Test": 1,
        "Assertion Roulette": 27
      }
    },
    "testEquals": {
      "name": "testEquals",
      "mvn_run": "org.apache.commons.lang3.text.StrBuilderTest#testEquals",
      "smells": {
        "Magic Number Test": 1,
        "Lazy Test": 4,
        "Duplicate Assert": 4,
        "Eager Test": 1,
        "Assertion Roulette": 12
      }
    },
    "testHashCode": {
      "name": "testHashCode",
      "mvn_run": "org.apache.commons.lang3.text.StrBuilderTest#testHashCode",
      "smells": {
        "Magic Number Test": 2,
        "Lazy Test": 2,
        "Eager Test": 1,
        "Assertion Roulette": 4
      }
    },
    "testIndexOfLang294": {
      "name": "testIndexOfLang294",
      "mvn_run": "org.apache.commons.lang3.text.StrBuilderTest#testIndexOfLang294",
      "smells": {
        "Magic Number Test": 1,
        "Lazy Test": 3,
        "Eager Test": 1,
        "Assertion Roulette": 1
      }
    },
    "testLang295": {
      "name": "testLang295",
      "mvn_run": "org.apache.commons.lang3.text.StrBuilderTest#testLang295",
      "smells": {
        "Magic Number Test": 1,
        "Lazy Test": 4,
        "Eager Test": 1,
        "Assertion Roulette": 1
      }
    },
    "testReadFromReader": {
      "name": "testReadFromReader",
      "mvn_run": "org.apache.commons.lang3.text.StrBuilderTest#testReadFromReader",
      "smells": {
        "Sensitive Equality": 1,
        "Lazy Test": 8,
        "Eager Test": 1,
        "Assertion Roulette": 2,
        "Conditional Test Logic": 1
      }
    },
    "testReadFromReaderAppendsToEnd": {
      "name": "testReadFromReaderAppendsToEnd",
      "mvn_run": "org.apache.commons.lang3.text.StrBuilderTest#testReadFromReaderAppendsToEnd",
      "smells": {
        "Sensitive Equality": 1,
        "Lazy Test": 6,
        "Eager Test": 1,
        "Assertion Roulette": 1
      }
    },
    "testReadFromCharBuffer": {
      "name": "testReadFromCharBuffer",
      "mvn_run": "org.apache.commons.lang3.text.StrBuilderTest#testReadFromCharBuffer",
      "smells": {
        "Sensitive Equality": 1,
        "Lazy Test": 8,
        "Eager Test": 1,
        "Assertion Roulette": 2,
        "Conditional Test Logic": 1
      }
    },
    "testReadFromCharBufferAppendsToEnd": {
      "name": "testReadFromCharBufferAppendsToEnd",
      "mvn_run": "org.apache.commons.lang3.text.StrBuilderTest#testReadFromCharBufferAppendsToEnd",
      "smells": {
        "Sensitive Equality": 1,
        "Lazy Test": 6,
        "Eager Test": 1,
        "Assertion Roulette": 1
      }
    },
    "testReadFromReadable": {
      "name": "testReadFromReadable",
      "mvn_run": "org.apache.commons.lang3.text.StrBuilderTest#testReadFromReadable",
      "smells": {
        "Sensitive Equality": 1,
        "Lazy Test": 8,
        "Eager Test": 1,
        "Assertion Roulette": 2,
        "Conditional Test Logic": 1
      }
    },
    "testReadFromReadableAppendsToEnd": {
      "name": "testReadFromReadableAppendsToEnd",
      "mvn_run": "org.apache.commons.lang3.text.StrBuilderTest#testReadFromReadableAppendsToEnd",
      "smells": {
        "Sensitive Equality": 1,
        "Lazy Test": 6,
        "Eager Test": 1,
        "Assertion Roulette": 1
      }
    },
    "testSetLength": {
      "name": "testSetLength",
      "mvn_run": "org.apache.commons.lang3.text.StrBuilderTest#testSetLength",
      "smells": {
        "Sensitive Equality": 3,
        "Lazy Test": 4,
        "Duplicate Assert": 1,
        "Eager Test": 1,
        "Assertion Roulette": 3
      }
    },
    "testSetCharAt": {
      "name": "testSetCharAt",
      "mvn_run": "org.apache.commons.lang3.text.StrBuilderTest#testSetCharAt",
      "smells": {
        "Sensitive Equality": 1,
        "Lazy Test": 4,
        "Eager Test": 1,
        "Assertion Roulette": 1
      }
    },
    "testDeleteCharAt": {
      "name": "testDeleteCharAt",
      "mvn_run": "org.apache.commons.lang3.text.StrBuilderTest#testDeleteCharAt",
      "smells": {
        "Sensitive Equality": 1,
        "Lazy Test": 2,
        "Eager Test": 1,
        "Assertion Roulette": 1
      }
    },
    "testDeleteIntInt": {
      "name": "testDeleteIntInt",
      "mvn_run": "org.apache.commons.lang3.text.StrBuilderTest#testDeleteIntInt",
      "smells": {
        "Sensitive Equality": 4,
        "Lazy Test": 2,
        "Duplicate Assert": 1,
        "Eager Test": 1,
        "Assertion Roulette": 4
      }
    },
    "testDeleteAll_char": {
      "name": "testDeleteAll_char",
      "mvn_run": "org.apache.commons.lang3.text.StrBuilderTest#testDeleteAll_char",
      "smells": {
        "Sensitive Equality": 5,
        "Lazy Test": 3,
        "Duplicate Assert": 1,
        "Eager Test": 1,
        "Assertion Roulette": 5
      }
    },
    "testDeleteFirst_char": {
      "name": "testDeleteFirst_char",
      "mvn_run": "org.apache.commons.lang3.text.StrBuilderTest#testDeleteFirst_char",
      "smells": {
        "Sensitive Equality": 5,
        "Lazy Test": 3,
        "Eager Test": 1,
        "Assertion Roulette": 5
      }
    },
    "testDeleteAll_String": {
      "name": "testDeleteAll_String",
      "mvn_run": "org.apache.commons.lang3.text.StrBuilderTest#testDeleteAll_String",
      "smells": {
        "Sensitive Equality": 8,
        "Lazy Test": 3,
        "Duplicate Assert": 2,
        "Eager Test": 1,
        "Assertion Roulette": 8
      }
    },
    "testDeleteFirst_String": {
      "name": "testDeleteFirst_String",
      "mvn_run": "org.apache.commons.lang3.text.StrBuilderTest#testDeleteFirst_String",
      "smells": {
        "Sensitive Equality": 8,
        "Lazy Test": 3,
        "Duplicate Assert": 1,
        "Eager Test": 1,
        "Assertion Roulette": 8
      }
    },
    "testDeleteAll_StrMatcher": {
      "name": "testDeleteAll_StrMatcher",
      "mvn_run": "org.apache.commons.lang3.text.StrBuilderTest#testDeleteAll_StrMatcher",
      "smells": {
        "Sensitive Equality": 4,
        "Lazy Test": 3,
        "Eager Test": 1,
        "Assertion Roulette": 4
      }
    },
    "testDeleteFirst_StrMatcher": {
      "name": "testDeleteFirst_StrMatcher",
      "mvn_run": "org.apache.commons.lang3.text.StrBuilderTest#testDeleteFirst_StrMatcher",
      "smells": {
        "Sensitive Equality": 4,
        "Lazy Test": 3,
        "Eager Test": 1,
        "Assertion Roulette": 4
      }
    },
    "testReplace_int_int_String": {
      "name": "testReplace_int_int_String",
      "mvn_run": "org.apache.commons.lang3.text.StrBuilderTest#testReplace_int_int_String",
      "smells": {
        "Sensitive Equality": 7,
        "Lazy Test": 3,
        "Eager Test": 1,
        "Assertion Roulette": 7
      }
    },
    "testReplaceAll_char_char": {
      "name": "testReplaceAll_char_char",
      "mvn_run": "org.apache.commons.lang3.text.StrBuilderTest#testReplaceAll_char_char",
      "smells": {
        "Sensitive Equality": 5,
        "Lazy Test": 3,
        "Duplicate Assert": 1,
        "Eager Test": 1,
        "Assertion Roulette": 5
      }
    },
    "testReplaceFirst_char_char": {
      "name": "testReplaceFirst_char_char",
      "mvn_run": "org.apache.commons.lang3.text.StrBuilderTest#testReplaceFirst_char_char",
      "smells": {
        "Sensitive Equality": 5,
        "Lazy Test": 3,
        "Duplicate Assert": 1,
        "Eager Test": 1,
        "Assertion Roulette": 5
      }
    },
    "testReplaceAll_String_String": {
      "name": "testReplaceAll_String_String",
      "mvn_run": "org.apache.commons.lang3.text.StrBuilderTest#testReplaceAll_String_String",
      "smells": {
        "Sensitive Equality": 10,
        "Lazy Test": 3,
        "Duplicate Assert": 1,
        "Eager Test": 1,
        "Assertion Roulette": 10
      }
    },
    "testReplaceFirst_String_String": {
      "name": "testReplaceFirst_String_String",
      "mvn_run": "org.apache.commons.lang3.text.StrBuilderTest#testReplaceFirst_String_String",
      "smells": {
        "Sensitive Equality": 10,
        "Lazy Test": 3,
        "Duplicate Assert": 1,
        "Eager Test": 1,
        "Assertion Roulette": 10
      }
    },
    "testReplaceAll_StrMatcher_String": {
      "name": "testReplaceAll_StrMatcher_String",
      "mvn_run": "org.apache.commons.lang3.text.StrBuilderTest#testReplaceAll_StrMatcher_String",
      "smells": {
        "Sensitive Equality": 12,
        "Verbose Test": 1,
        "Lazy Test": 3,
        "Duplicate Assert": 1,
        "Eager Test": 1,
        "Assertion Roulette": 12
      }
    },
    "testReplaceFirst_StrMatcher_String": {
      "name": "testReplaceFirst_StrMatcher_String",
      "mvn_run": "org.apache.commons.lang3.text.StrBuilderTest#testReplaceFirst_StrMatcher_String",
      "smells": {
        "Sensitive Equality": 11,
        "Verbose Test": 1,
        "Lazy Test": 3,
        "Duplicate Assert": 1,
        "Eager Test": 1,
        "Assertion Roulette": 11
      }
    },
    "testReplace_StrMatcher_String_int_int_int_VaryMatcher": {
      "name": "testReplace_StrMatcher_String_int_int_int_VaryMatcher",
      "mvn_run": "org.apache.commons.lang3.text.StrBuilderTest#testReplace_StrMatcher_String_int_int_int_VaryMatcher",
      "smells": {
        "Sensitive Equality": 5,
        "Lazy Test": 4,
        "Eager Test": 1,
        "Assertion Roulette": 5
      }
    },
    "testReplace_StrMatcher_String_int_int_int_VaryReplace": {
      "name": "testReplace_StrMatcher_String_int_int_int_VaryReplace",
      "mvn_run": "org.apache.commons.lang3.text.StrBuilderTest#testReplace_StrMatcher_String_int_int_int_VaryReplace",
      "smells": {
        "Sensitive Equality": 5,
        "Lazy Test": 4,
        "Duplicate Assert": 1,
        "Eager Test": 1,
        "Assertion Roulette": 5
      }
    },
    "testReplace_StrMatcher_String_int_int_int_VaryStartIndex": {
      "name": "testReplace_StrMatcher_String_int_int_int_VaryStartIndex",
      "mvn_run": "org.apache.commons.lang3.text.StrBuilderTest#testReplace_StrMatcher_String_int_int_int_VaryStartIndex",
      "smells": {
        "Sensitive Equality": 13,
        "Verbose Test": 1,
        "Lazy Test": 4,
        "Duplicate Assert": 3,
        "Eager Test": 1,
        "Assertion Roulette": 13
      }
    },
    "testReplace_StrMatcher_String_int_int_int_VaryEndIndex": {
      "name": "testReplace_StrMatcher_String_int_int_int_VaryEndIndex",
      "mvn_run": "org.apache.commons.lang3.text.StrBuilderTest#testReplace_StrMatcher_String_int_int_int_VaryEndIndex",
      "smells": {
        "Sensitive Equality": 12,
        "Verbose Test": 1,
        "Lazy Test": 3,
        "Duplicate Assert": 4,
        "Eager Test": 1,
        "Assertion Roulette": 12
      }
    },
    "testReplace_StrMatcher_String_int_int_int_VaryCount": {
      "name": "testReplace_StrMatcher_String_int_int_int_VaryCount",
      "mvn_run": "org.apache.commons.lang3.text.StrBuilderTest#testReplace_StrMatcher_String_int_int_int_VaryCount",
      "smells": {
        "Sensitive Equality": 7,
        "Lazy Test": 3,
        "Duplicate Assert": 1,
        "Eager Test": 1,
        "Assertion Roulette": 7
      }
    },
    "testReverse": {
      "name": "testReverse",
      "mvn_run": "org.apache.commons.lang3.text.StrBuilderTest#testReverse",
      "smells": {
        "Sensitive Equality": 3,
        "Lazy Test": 5,
        "Eager Test": 1,
        "Assertion Roulette": 3
      }
    },
    "testTrim": {
      "name": "testTrim",
      "mvn_run": "org.apache.commons.lang3.text.StrBuilderTest#testTrim",
      "smells": {
        "Sensitive Equality": 6,
        "Lazy Test": 6,
        "Duplicate Assert": 1,
        "Eager Test": 1,
        "Assertion Roulette": 6
      }
    },
    "testAsWriter": {
      "name": "testAsWriter",
      "mvn_run": "org.apache.commons.lang3.text.StrBuilderTest#testAsWriter",
      "smells": {
        "Sensitive Equality": 9,
        "Verbose Test": 1,
        "Lazy Test": 4,
        "Duplicate Assert": 1,
        "Eager Test": 1,
        "Assertion Roulette": 9
      }
    },
    "testToString": {
      "name": "testToString",
      "mvn_run": "org.apache.commons.lang3.text.StrBuilderTest#testToString",
      "smells": {
        "Sensitive Equality": 1,
        "Lazy Test": 2,
        "Eager Test": 1,
        "Assertion Roulette": 1
      }
    },
    "testToStringBuffer": {
      "name": "testToStringBuffer",
      "mvn_run": "org.apache.commons.lang3.text.StrBuilderTest#testToStringBuffer",
      "smells": {
        "Sensitive Equality": 4,
        "Lazy Test": 3,
        "Eager Test": 1,
        "Assertion Roulette": 2
      }
    },
    "testToStringBuilder": {
      "name": "testToStringBuilder",
      "mvn_run": "org.apache.commons.lang3.text.StrBuilderTest#testToStringBuilder",
      "smells": {
        "Sensitive Equality": 4,
        "Lazy Test": 3,
        "Eager Test": 1,
        "Assertion Roulette": 2
      }
    },
    "testLang294": {
      "name": "testLang294",
      "mvn_run": "org.apache.commons.lang3.text.StrBuilderTest#testLang294",
      "smells": {
        "Sensitive Equality": 1,
        "Lazy Test": 3,
        "Eager Test": 1,
        "Assertion Roulette": 1
      }
    },
    "testLang412Right": {
      "name": "testLang412Right",
      "mvn_run": "org.apache.commons.lang3.text.StrBuilderTest#testLang412Right",
      "smells": {
        "Sensitive Equality": 1,
        "Lazy Test": 2,
        "Eager Test": 1
      }
    },
    "testLang412Left": {
      "name": "testLang412Left",
      "mvn_run": "org.apache.commons.lang3.text.StrBuilderTest#testLang412Left",
      "smells": {
        "Sensitive Equality": 1,
        "Lazy Test": 2,
        "Eager Test": 1
      }
    },
    "testAsBuilder": {
      "name": "testAsBuilder",
      "mvn_run": "org.apache.commons.lang3.text.StrBuilderTest#testAsBuilder",
      "smells": {
        "Sensitive Equality": 1,
        "Lazy Test": 2,
        "Eager Test": 1,
        "Assertion Roulette": 1
      }
    },
    "testAppendCharBuffer": {
      "name": "testAppendCharBuffer",
      "mvn_run": "org.apache.commons.lang3.text.StrBuilderTest#testAppendCharBuffer",
      "smells": {
        "Sensitive Equality": 2,
        "Lazy Test": 3,
        "Eager Test": 1,
        "Assertion Roulette": 2
      }
    },
    "testAppendToWriter": {
      "name": "testAppendToWriter",
      "mvn_run": "org.apache.commons.lang3.text.StrBuilderTest#testAppendToWriter",
      "smells": {
        "Sensitive Equality": 1,
        "Lazy Test": 4,
        "Eager Test": 1,
        "Assertion Roulette": 1
      }
    },
    "testAppendToStringBuilder": {
      "name": "testAppendToStringBuilder",
      "mvn_run": "org.apache.commons.lang3.text.StrBuilderTest#testAppendToStringBuilder",
      "smells": {
        "Sensitive Equality": 1,
        "Lazy Test": 3,
        "Eager Test": 1,
        "Assertion Roulette": 1
      }
    },
    "testAppendToStringBuffer": {
      "name": "testAppendToStringBuffer",
      "mvn_run": "org.apache.commons.lang3.text.StrBuilderTest#testAppendToStringBuffer",
      "smells": {
        "Sensitive Equality": 1,
        "Lazy Test": 3,
        "Eager Test": 1,
        "Assertion Roulette": 1
      }
    },
    "testAppendToCharBuffer": {
      "name": "testAppendToCharBuffer",
      "mvn_run": "org.apache.commons.lang3.text.StrBuilderTest#testAppendToCharBuffer",
      "smells": {
        "Sensitive Equality": 1,
        "Lazy Test": 5,
        "Eager Test": 1,
        "Assertion Roulette": 1
      }
    },
    "testGetSetNullText": {
      "name": "testGetSetNullText",
      "mvn_run": "org.apache.commons.lang3.text.StrBuilderTest#testGetSetNullText",
      "smells": {
        "Lazy Test": 2,
        "Duplicate Assert": 1,
        "Eager Test": 1,
        "Assertion Roulette": 5
      }
    },
    "testContains_StrMatcher": {
      "name": "testContains_StrMatcher",
      "mvn_run": "org.apache.commons.lang3.text.StrBuilderTest#testContains_StrMatcher",
      "smells": {
        "Lazy Test": 3,
        "Eager Test": 1,
        "Assertion Roulette": 7
      }
    },
    "testContains_String": {
      "name": "testContains_String",
      "mvn_run": "org.apache.commons.lang3.text.StrBuilderTest#testContains_String",
      "smells": {
        "Lazy Test": 2,
        "Eager Test": 1,
        "Assertion Roulette": 5
      }
    },
    "testContains_char": {
      "name": "testContains_char",
      "mvn_run": "org.apache.commons.lang3.text.StrBuilderTest#testContains_char",
      "smells": {
        "Lazy Test": 2,
        "Eager Test": 1,
        "Assertion Roulette": 4
      }
    },
    "testGetSetNewLineText": {
      "name": "testGetSetNewLineText",
      "mvn_run": "org.apache.commons.lang3.text.StrBuilderTest#testGetSetNewLineText",
      "smells": {
        "Lazy Test": 2,
        "Duplicate Assert": 1,
        "Eager Test": 1,
        "Assertion Roulette": 4
      }
    },
    "testCapacity": {
      "name": "testCapacity",
      "mvn_run": "org.apache.commons.lang3.text.StrBuilderTest#testCapacity",
      "smells": {
        "Lazy Test": 3,
        "Duplicate Assert": 1,
        "Eager Test": 1,
        "Assertion Roulette": 2
      }
    },
    "test_LANG_1131_EqualsWithNullStrBuilder": {
      "name": "test_LANG_1131_EqualsWithNullStrBuilder",
      "mvn_run": "org.apache.commons.lang3.text.StrBuilderTest#test_LANG_1131_EqualsWithNullStrBuilder",
      "smells": {
        "Lazy Test": 2,
        "Eager Test": 1,
        "Assertion Roulette": 1
      }
    },
    "testEqualsIgnoreCase": {
      "name": "testEqualsIgnoreCase",
      "mvn_run": "org.apache.commons.lang3.text.StrBuilderTest#testEqualsIgnoreCase",
      "smells": {
        "Lazy Test": 3,
        "Duplicate Assert": 3,
        "Eager Test": 1,
        "Assertion Roulette": 9
      }
    },
    "testEndsWith": {
      "name": "testEndsWith",
      "mvn_run": "org.apache.commons.lang3.text.StrBuilderTest#testEndsWith",
      "smells": {
        "Lazy Test": 2,
        "Eager Test": 1,
        "Assertion Roulette": 11
      }
    },
    "testStartsWith": {
      "name": "testStartsWith",
      "mvn_run": "org.apache.commons.lang3.text.StrBuilderTest#testStartsWith",
      "smells": {
        "Lazy Test": 2,
        "Eager Test": 1,
        "Assertion Roulette": 7
      }
    },
    "testGetCharsIntIntCharArrayInt": {
      "name": "testGetCharsIntIntCharArrayInt",
      "mvn_run": "org.apache.commons.lang3.text.StrBuilderTest#testGetCharsIntIntCharArrayInt",
      "smells": {
        "Lazy Test": 3,
        "Eager Test": 1,
        "Assertion Roulette": 2
      }
    },
    "testIsEmpty": {
      "name": "testIsEmpty",
      "mvn_run": "org.apache.commons.lang3.text.StrBuilderTest#testIsEmpty",
      "smells": {
        "Lazy Test": 4,
        "Duplicate Assert": 1,
        "Eager Test": 1,
        "Assertion Roulette": 3
      }
    }
  },
  "org.apache.commons.lang3.CharsetsTest": {
    "testToCharset_String": {
      "name": "testToCharset_String",
      "mvn_run": "org.apache.commons.lang3.CharsetsTest#testToCharset_String",
      "smells": {
        "Lazy Test": 1,
        "Assertion Roulette": 3
      }
    },
    "testToCharset_Charset": {
      "name": "testToCharset_Charset",
      "mvn_run": "org.apache.commons.lang3.CharsetsTest#testToCharset_Charset",
      "smells": {
        "Lazy Test": 1,
        "Assertion Roulette": 3
      }
    },
    "testToCharsetName": {
      "name": "testToCharsetName",
      "mvn_run": "org.apache.commons.lang3.CharsetsTest#testToCharsetName",
      "smells": {
        "Assertion Roulette": 2
      }
    }
  },
  "org.apache.commons.lang3.CharUtilsTest": {
    "testCompare": {
      "name": "testCompare",
      "mvn_run": "org.apache.commons.lang3.CharUtilsTest#testCompare",
      "smells": {
        "Magic Number Test": 3,
        "Assertion Roulette": 3
      }
    },
    "testConstructor": {
      "name": "testConstructor",
      "mvn_run": "org.apache.commons.lang3.CharUtilsTest#testConstructor",
      "smells": {
        "Magic Number Test": 1,
        "Assertion Roulette": 5
      }
    },
    "testIsAscii_char": {
      "name": "testIsAscii_char",
      "mvn_run": "org.apache.commons.lang3.CharUtilsTest#testIsAscii_char",
      "smells": {
        "Magic Number Test": 1,
        "Assertion Roulette": 7,
        "Conditional Test Logic": 1
      }
    },
    "testToIntValue_char": {
      "name": "testToIntValue_char",
      "mvn_run": "org.apache.commons.lang3.CharUtilsTest#testToIntValue_char",
      "smells": {
        "Magic Number Test": 10,
        "Lazy Test": 1,
        "Assertion Roulette": 10
      }
    },
    "testToIntValue_char_int": {
      "name": "testToIntValue_char_int",
      "mvn_run": "org.apache.commons.lang3.CharUtilsTest#testToIntValue_char_int",
      "smells": {
        "Magic Number Test": 3,
        "Lazy Test": 1,
        "Assertion Roulette": 3
      }
    },
    "testToIntValue_Character": {
      "name": "testToIntValue_Character",
      "mvn_run": "org.apache.commons.lang3.CharUtilsTest#testToIntValue_Character",
      "smells": {
        "Magic Number Test": 2,
        "Lazy Test": 1,
        "Assertion Roulette": 2
      }
    },
    "testToIntValue_Character_int": {
      "name": "testToIntValue_Character_int",
      "mvn_run": "org.apache.commons.lang3.CharUtilsTest#testToIntValue_Character_int",
      "smells": {
        "Magic Number Test": 4,
        "Lazy Test": 1,
        "Assertion Roulette": 4
      }
    },
    "testToString_char": {
      "name": "testToString_char",
      "mvn_run": "org.apache.commons.lang3.CharUtilsTest#testToString_char",
      "smells": {
        "Magic Number Test": 6,
        "Redundant Assertion": 1,
        "Sensitive Equality": 3,
        "Lazy Test": 1,
        "Duplicate Assert": 2,
        "Assertion Roulette": 11,
        "Conditional Test Logic": 2
      }
    },
    "testToUnicodeEscaped_char": {
      "name": "testToUnicodeEscaped_char",
      "mvn_run": "org.apache.commons.lang3.CharUtilsTest#testToUnicodeEscaped_char",
      "smells": {
        "Magic Number Test": 1,
        "Lazy Test": 1,
        "Assertion Roulette": 6,
        "Conditional Test Logic": 1
      }
    },
    "testToCharacterObject_char": {
      "name": "testToCharacterObject_char",
      "mvn_run": "org.apache.commons.lang3.CharUtilsTest#testToCharacterObject_char",
      "smells": {
        "Redundant Assertion": 1,
        "Lazy Test": 1,
        "Duplicate Assert": 1,
        "Assertion Roulette": 9,
        "Conditional Test Logic": 2
      }
    },
    "testToCharacterObject_String": {
      "name": "testToCharacterObject_String",
      "mvn_run": "org.apache.commons.lang3.CharUtilsTest#testToCharacterObject_String",
      "smells": {
        "Redundant Assertion": 1,
        "Lazy Test": 1,
        "Assertion Roulette": 5
      }
    },
    "testToString_Character": {
      "name": "testToString_Character",
      "mvn_run": "org.apache.commons.lang3.CharUtilsTest#testToString_Character",
      "smells": {
        "Redundant Assertion": 1,
        "Sensitive Equality": 4,
        "Lazy Test": 1,
        "Assertion Roulette": 3
      }
    },
    "testToUnicodeEscaped_Character": {
      "name": "testToUnicodeEscaped_Character",
      "mvn_run": "org.apache.commons.lang3.CharUtilsTest#testToUnicodeEscaped_Character",
      "smells": {
        "Lazy Test": 1,
        "Assertion Roulette": 2
      }
    },
    "testToChar_String_char": {
      "name": "testToChar_String_char",
      "mvn_run": "org.apache.commons.lang3.CharUtilsTest#testToChar_String_char",
      "smells": {
        "Lazy Test": 1,
        "Assertion Roulette": 4
      }
    },
    "testToChar_String": {
      "name": "testToChar_String",
      "mvn_run": "org.apache.commons.lang3.CharUtilsTest#testToChar_String",
      "smells": {
        "Lazy Test": 1,
        "Assertion Roulette": 2
      }
    },
    "testToChar_Character_char": {
      "name": "testToChar_Character_char",
      "mvn_run": "org.apache.commons.lang3.CharUtilsTest#testToChar_Character_char",
      "smells": {
        "Lazy Test": 1,
        "Assertion Roulette": 3
      }
    },
    "testToChar_Character": {
      "name": "testToChar_Character",
      "mvn_run": "org.apache.commons.lang3.CharUtilsTest#testToChar_Character",
      "smells": {
        "Lazy Test": 1,
        "Assertion Roulette": 2
      }
    },
    "testIsAsciiAlpha_char": {
      "name": "testIsAsciiAlpha_char",
      "mvn_run": "org.apache.commons.lang3.CharUtilsTest#testIsAsciiAlpha_char",
      "smells": {
        "Assertion Roulette": 8,
        "Conditional Test Logic": 2
      }
    },
    "testIsAsciiAlphaLower_char": {
      "name": "testIsAsciiAlphaLower_char",
      "mvn_run": "org.apache.commons.lang3.CharUtilsTest#testIsAsciiAlphaLower_char",
      "smells": {
        "Assertion Roulette": 8,
        "Conditional Test Logic": 2
      }
    },
    "testIsAsciiAlphanumeric_char": {
      "name": "testIsAsciiAlphanumeric_char",
      "mvn_run": "org.apache.commons.lang3.CharUtilsTest#testIsAsciiAlphanumeric_char",
      "smells": {
        "Assertion Roulette": 8,
        "Conditional Test Logic": 2
      }
    },
    "testIsAsciiAlphaUpper_char": {
      "name": "testIsAsciiAlphaUpper_char",
      "mvn_run": "org.apache.commons.lang3.CharUtilsTest#testIsAsciiAlphaUpper_char",
      "smells": {
        "Assertion Roulette": 8,
        "Conditional Test Logic": 2
      }
    },
    "testIsAsciiControl_char": {
      "name": "testIsAsciiControl_char",
      "mvn_run": "org.apache.commons.lang3.CharUtilsTest#testIsAsciiControl_char",
      "smells": {
        "Assertion Roulette": 8,
        "Conditional Test Logic": 2
      }
    },
    "testIsAsciiNumeric_char": {
      "name": "testIsAsciiNumeric_char",
      "mvn_run": "org.apache.commons.lang3.CharUtilsTest#testIsAsciiNumeric_char",
      "smells": {
        "Assertion Roulette": 8,
        "Conditional Test Logic": 2
      }
    },
    "testIsAsciiPrintable_char": {
      "name": "testIsAsciiPrintable_char",
      "mvn_run": "org.apache.commons.lang3.CharUtilsTest#testIsAsciiPrintable_char",
      "smells": {
        "Assertion Roulette": 8,
        "Conditional Test Logic": 2
      }
    }
  },
  "org.apache.commons.lang3.builder.StandardToStringStyleTest": {
    "testBlank": {
      "name": "testBlank",
      "mvn_run": "org.apache.commons.lang3.builder.StandardToStringStyleTest#testBlank",
      "smells": {
        "Sensitive Equality": 1,
        "Assertion Roulette": 1
      }
    },
    "testAppendSuper": {
      "name": "testAppendSuper",
      "mvn_run": "org.apache.commons.lang3.builder.StandardToStringStyleTest#testAppendSuper",
      "smells": {
        "Sensitive Equality": 5,
        "Assertion Roulette": 5
      }
    },
    "testObject": {
      "name": "testObject",
      "mvn_run": "org.apache.commons.lang3.builder.StandardToStringStyleTest#testObject",
      "smells": {
        "Sensitive Equality": 6,
        "Assertion Roulette": 6
      }
    },
    "testCollection": {
      "name": "testCollection",
      "mvn_run": "org.apache.commons.lang3.builder.StandardToStringStyleTest#testCollection",
      "smells": {
        "Sensitive Equality": 6,
        "Assertion Roulette": 6
      }
    },
    "testMap": {
      "name": "testMap",
      "mvn_run": "org.apache.commons.lang3.builder.StandardToStringStyleTest#testMap",
      "smells": {
        "Sensitive Equality": 4,
        "Assertion Roulette": 4
      }
    },
    "testArray": {
      "name": "testArray",
      "mvn_run": "org.apache.commons.lang3.builder.StandardToStringStyleTest#testArray",
      "smells": {
        "Sensitive Equality": 6,
        "Assertion Roulette": 6
      }
    },
    "testPerson": {
      "name": "testPerson",
      "mvn_run": "org.apache.commons.lang3.builder.StandardToStringStyleTest#testPerson",
      "smells": {
        "Sensitive Equality": 1,
        "Assertion Roulette": 1
      }
    },
    "testLong": {
      "name": "testLong",
      "mvn_run": "org.apache.commons.lang3.builder.StandardToStringStyleTest#testLong",
      "smells": {
        "Sensitive Equality": 3,
        "Assertion Roulette": 3
      }
    },
    "testObjectArray": {
      "name": "testObjectArray",
      "mvn_run": "org.apache.commons.lang3.builder.StandardToStringStyleTest#testObjectArray",
      "smells": {
        "Sensitive Equality": 4,
        "Assertion Roulette": 4
      }
    },
    "testLongArray": {
      "name": "testLongArray",
      "mvn_run": "org.apache.commons.lang3.builder.StandardToStringStyleTest#testLongArray",
      "smells": {
        "Sensitive Equality": 4,
        "Assertion Roulette": 4
      }
    },
    "testLongArrayArray": {
      "name": "testLongArrayArray",
      "mvn_run": "org.apache.commons.lang3.builder.StandardToStringStyleTest#testLongArrayArray",
      "smells": {
        "Sensitive Equality": 4,
        "Assertion Roulette": 4
      }
    },
    "testDefaultIsFieldSeparatorAtEnd": {
      "name": "testDefaultIsFieldSeparatorAtEnd",
      "mvn_run": "org.apache.commons.lang3.builder.StandardToStringStyleTest#testDefaultIsFieldSeparatorAtEnd",
      "smells": {
        "Lazy Test": 1,
        "Eager Test": 1,
        "Assertion Roulette": 1
      }
    },
    "testDefaultIsFieldSeparatorAtStart": {
      "name": "testDefaultIsFieldSeparatorAtStart",
      "mvn_run": "org.apache.commons.lang3.builder.StandardToStringStyleTest#testDefaultIsFieldSeparatorAtStart",
      "smells": {
        "Lazy Test": 1,
        "Eager Test": 1,
        "Assertion Roulette": 1
      }
    },
    "testDefaultIsArrayContentDetail": {
      "name": "testDefaultIsArrayContentDetail",
      "mvn_run": "org.apache.commons.lang3.builder.StandardToStringStyleTest#testDefaultIsArrayContentDetail",
      "smells": {
        "Lazy Test": 1,
        "Eager Test": 1,
        "Assertion Roulette": 1
      }
    },
    "testDefaultValueOfFullDetail": {
      "name": "testDefaultValueOfFullDetail",
      "mvn_run": "org.apache.commons.lang3.builder.StandardToStringStyleTest#testDefaultValueOfFullDetail",
      "smells": {
        "Lazy Test": 1,
        "Eager Test": 1,
        "Assertion Roulette": 1
      }
    },
    "testDefaultValueOfUseIdentityHashCode": {
      "name": "testDefaultValueOfUseIdentityHashCode",
      "mvn_run": "org.apache.commons.lang3.builder.StandardToStringStyleTest#testDefaultValueOfUseIdentityHashCode",
      "smells": {
        "Lazy Test": 1,
        "Eager Test": 1,
        "Assertion Roulette": 1
      }
    },
    "testDefaultValueOfUseShortClassName": {
      "name": "testDefaultValueOfUseShortClassName",
      "mvn_run": "org.apache.commons.lang3.builder.StandardToStringStyleTest#testDefaultValueOfUseShortClassName",
      "smells": {
        "Lazy Test": 1,
        "Eager Test": 1,
        "Assertion Roulette": 1
      }
    },
    "testDefaultValueOfUseFieldNames": {
      "name": "testDefaultValueOfUseFieldNames",
      "mvn_run": "org.apache.commons.lang3.builder.StandardToStringStyleTest#testDefaultValueOfUseFieldNames",
      "smells": {
        "Lazy Test": 1,
        "Eager Test": 1,
        "Assertion Roulette": 1
      }
    },
    "testDefaultValueOfUseClassName": {
      "name": "testDefaultValueOfUseClassName",
      "mvn_run": "org.apache.commons.lang3.builder.StandardToStringStyleTest#testDefaultValueOfUseClassName",
      "smells": {
        "Lazy Test": 1,
        "Eager Test": 1,
        "Assertion Roulette": 1
      }
    },
    "testDefaultGetter": {
      "name": "testDefaultGetter",
      "mvn_run": "org.apache.commons.lang3.builder.StandardToStringStyleTest#testDefaultGetter",
      "smells": {
        "Eager Test": 1,
        "Assertion Roulette": 9
      }
    }
  },
  "org.apache.commons.lang3.builder.RecursiveToStringStyleTest": {
    "testBlank": {
      "name": "testBlank",
      "mvn_run": "org.apache.commons.lang3.builder.RecursiveToStringStyleTest#testBlank",
      "smells": {
        "Sensitive Equality": 1,
        "Assertion Roulette": 1
      }
    },
    "testAppendSuper": {
      "name": "testAppendSuper",
      "mvn_run": "org.apache.commons.lang3.builder.RecursiveToStringStyleTest#testAppendSuper",
      "smells": {
        "Sensitive Equality": 5,
        "Assertion Roulette": 5
      }
    },
    "testObject": {
      "name": "testObject",
      "mvn_run": "org.apache.commons.lang3.builder.RecursiveToStringStyleTest#testObject",
      "smells": {
        "Sensitive Equality": 12,
        "Assertion Roulette": 12
      }
    },
    "testPerson": {
      "name": "testPerson",
      "mvn_run": "org.apache.commons.lang3.builder.RecursiveToStringStyleTest#testPerson",
      "smells": {
        "Sensitive Equality": 1,
        "Assertion Roulette": 1
      }
    },
    "testLong": {
      "name": "testLong",
      "mvn_run": "org.apache.commons.lang3.builder.RecursiveToStringStyleTest#testLong",
      "smells": {
        "Sensitive Equality": 3,
        "Assertion Roulette": 3
      }
    },
    "testObjectArray": {
      "name": "testObjectArray",
      "mvn_run": "org.apache.commons.lang3.builder.RecursiveToStringStyleTest#testObjectArray",
      "smells": {
        "Sensitive Equality": 4,
        "Assertion Roulette": 4
      }
    },
    "testLongArray": {
      "name": "testLongArray",
      "mvn_run": "org.apache.commons.lang3.builder.RecursiveToStringStyleTest#testLongArray",
      "smells": {
        "Sensitive Equality": 4,
        "Assertion Roulette": 4
      }
    },
    "testLongArrayArray": {
      "name": "testLongArrayArray",
      "mvn_run": "org.apache.commons.lang3.builder.RecursiveToStringStyleTest#testLongArrayArray",
      "smells": {
        "Sensitive Equality": 4,
        "Assertion Roulette": 4
      }
    }
  },
  "org.apache.commons.lang3.builder.ToStringBuilderTest": {
    "test_setUpToClass_valid": {
      "name": "test_setUpToClass_valid",
      "mvn_run": "org.apache.commons.lang3.builder.ToStringBuilderTest#test_setUpToClass_valid",
      "smells": {
        "Unknown Test": 1,
        "Lazy Test": 5
      }
    },
    "testAppendToStringUsingMultiLineStyle": {
      "name": "testAppendToStringUsingMultiLineStyle",
      "mvn_run": "org.apache.commons.lang3.builder.ToStringBuilderTest#testAppendToStringUsingMultiLineStyle",
      "smells": {
        "Magic Number Test": 1,
        "Sensitive Equality": 1,
        "Lazy Test": 3,
        "Eager Test": 1,
        "Assertion Roulette": 1
      }
    },
    "testConstructorEx1": {
      "name": "testConstructorEx1",
      "mvn_run": "org.apache.commons.lang3.builder.ToStringBuilderTest#testConstructorEx1",
      "smells": {
        "Sensitive Equality": 1,
        "Lazy Test": 30,
        "Eager Test": 1,
        "Assertion Roulette": 1
      }
    },
    "testConstructorEx2": {
      "name": "testConstructorEx2",
      "mvn_run": "org.apache.commons.lang3.builder.ToStringBuilderTest#testConstructorEx2",
      "smells": {
        "Sensitive Equality": 1,
        "Lazy Test": 30,
        "Eager Test": 1,
        "Assertion Roulette": 1
      }
    },
    "testConstructorEx3": {
      "name": "testConstructorEx3",
      "mvn_run": "org.apache.commons.lang3.builder.ToStringBuilderTest#testConstructorEx3",
      "smells": {
        "Sensitive Equality": 1,
        "Lazy Test": 30,
        "Eager Test": 1,
        "Assertion Roulette": 1
      }
    },
    "testBlank": {
      "name": "testBlank",
      "mvn_run": "org.apache.commons.lang3.builder.ToStringBuilderTest#testBlank",
      "smells": {
        "Sensitive Equality": 1,
        "Lazy Test": 30,
        "Eager Test": 1,
        "Assertion Roulette": 1
      }
    },
    "testReflectionHierarchyArrayList": {
      "name": "testReflectionHierarchyArrayList",
      "mvn_run": "org.apache.commons.lang3.builder.ToStringBuilderTest#testReflectionHierarchyArrayList",
      "smells": {
        "Sensitive Equality": 2,
        "Lazy Test": 15,
        "Assertion Roulette": 2,
        "Conditional Test Logic": 2
      }
    },
    "testInnerClassReflection": {
      "name": "testInnerClassReflection",
      "mvn_run": "org.apache.commons.lang3.builder.ToStringBuilderTest#testInnerClassReflection",
      "smells": {
        "Sensitive Equality": 1,
        "Lazy Test": 13,
        "Assertion Roulette": 1
      }
    },
    "testSimpleReflectionObjectCycle": {
      "name": "testSimpleReflectionObjectCycle",
      "mvn_run": "org.apache.commons.lang3.builder.ToStringBuilderTest#testSimpleReflectionObjectCycle",
      "smells": {
        "Sensitive Equality": 1,
        "Lazy Test": 12,
        "Eager Test": 1,
        "Assertion Roulette": 1
      }
    },
    "testSelfInstanceVarReflectionObjectCycle": {
      "name": "testSelfInstanceVarReflectionObjectCycle",
      "mvn_run": "org.apache.commons.lang3.builder.ToStringBuilderTest#testSelfInstanceVarReflectionObjectCycle",
      "smells": {
        "Sensitive Equality": 1,
        "Lazy Test": 6,
        "Eager Test": 1,
        "Assertion Roulette": 1
      }
    },
    "testSelfInstanceTwoVarsReflectionObjectCycle": {
      "name": "testSelfInstanceTwoVarsReflectionObjectCycle",
      "mvn_run": "org.apache.commons.lang3.builder.ToStringBuilderTest#testSelfInstanceTwoVarsReflectionObjectCycle",
      "smells": {
        "Sensitive Equality": 2,
        "Lazy Test": 6,
        "Eager Test": 1,
        "Assertion Roulette": 1
      }
    },
    "testReflectionObjectCycle": {
      "name": "testReflectionObjectCycle",
      "mvn_run": "org.apache.commons.lang3.builder.ToStringBuilderTest#testReflectionObjectCycle",
      "smells": {
        "Sensitive Equality": 1,
        "Lazy Test": 6,
        "Assertion Roulette": 1
      }
    },
    "testAppendSuper": {
      "name": "testAppendSuper",
      "mvn_run": "org.apache.commons.lang3.builder.ToStringBuilderTest#testAppendSuper",
      "smells": {
        "Sensitive Equality": 5,
        "Lazy Test": 18,
        "Eager Test": 1,
        "Assertion Roulette": 5
      }
    },
    "testAppendToString": {
      "name": "testAppendToString",
      "mvn_run": "org.apache.commons.lang3.builder.ToStringBuilderTest#testAppendToString",
      "smells": {
        "Sensitive Equality": 5,
        "Lazy Test": 19,
        "Eager Test": 1,
        "Assertion Roulette": 5
      }
    },
    "testAppendAsObjectToString": {
      "name": "testAppendAsObjectToString",
      "mvn_run": "org.apache.commons.lang3.builder.ToStringBuilderTest#testAppendAsObjectToString",
      "smells": {
        "Sensitive Equality": 3,
        "Lazy Test": 12,
        "Eager Test": 1,
        "Assertion Roulette": 3
      }
    },
    "testAppendBooleanArrayWithFieldName": {
      "name": "testAppendBooleanArrayWithFieldName",
      "mvn_run": "org.apache.commons.lang3.builder.ToStringBuilderTest#testAppendBooleanArrayWithFieldName",
      "smells": {
        "Sensitive Equality": 4,
        "Lazy Test": 18,
        "Eager Test": 1,
        "Assertion Roulette": 4
      }
    },
    "testAppendBooleanArrayWithFieldNameAndFullDetatil": {
      "name": "testAppendBooleanArrayWithFieldNameAndFullDetatil",
      "mvn_run": "org.apache.commons.lang3.builder.ToStringBuilderTest#testAppendBooleanArrayWithFieldNameAndFullDetatil",
      "smells": {
        "Sensitive Equality": 5,
        "Lazy Test": 18,
        "Eager Test": 1,
        "Assertion Roulette": 5
      }
    },
    "testAppendCharArrayWithFieldName": {
      "name": "testAppendCharArrayWithFieldName",
      "mvn_run": "org.apache.commons.lang3.builder.ToStringBuilderTest#testAppendCharArrayWithFieldName",
      "smells": {
        "Sensitive Equality": 5,
        "Lazy Test": 18,
        "Eager Test": 1,
        "Assertion Roulette": 5
      }
    },
    "testAppendCharArrayWithFieldNameAndFullDetatil": {
      "name": "testAppendCharArrayWithFieldNameAndFullDetatil",
      "mvn_run": "org.apache.commons.lang3.builder.ToStringBuilderTest#testAppendCharArrayWithFieldNameAndFullDetatil",
      "smells": {
        "Sensitive Equality": 5,
        "Lazy Test": 18,
        "Eager Test": 1,
        "Assertion Roulette": 5
      }
    },
    "testAppendDoubleArrayWithFieldName": {
      "name": "testAppendDoubleArrayWithFieldName",
      "mvn_run": "org.apache.commons.lang3.builder.ToStringBuilderTest#testAppendDoubleArrayWithFieldName",
      "smells": {
        "Sensitive Equality": 4,
        "Lazy Test": 18,
        "Eager Test": 1,
        "Assertion Roulette": 4
      }
    },
    "testAppendDoubleArrayWithFieldNameAndFullDetatil": {
      "name": "testAppendDoubleArrayWithFieldNameAndFullDetatil",
      "mvn_run": "org.apache.commons.lang3.builder.ToStringBuilderTest#testAppendDoubleArrayWithFieldNameAndFullDetatil",
      "smells": {
        "Sensitive Equality": 5,
        "Lazy Test": 18,
        "Eager Test": 1,
        "Assertion Roulette": 5
      }
    },
    "testAppendObjectArrayWithFieldName": {
      "name": "testAppendObjectArrayWithFieldName",
      "mvn_run": "org.apache.commons.lang3.builder.ToStringBuilderTest#testAppendObjectArrayWithFieldName",
      "smells": {
        "Sensitive Equality": 4,
        "Lazy Test": 18,
        "Eager Test": 1,
        "Assertion Roulette": 4
      }
    },
    "testAppendObjectArrayWithFieldNameAndFullDetatil": {
      "name": "testAppendObjectArrayWithFieldNameAndFullDetatil",
      "mvn_run": "org.apache.commons.lang3.builder.ToStringBuilderTest#testAppendObjectArrayWithFieldNameAndFullDetatil",
      "smells": {
        "Sensitive Equality": 5,
        "Lazy Test": 18,
        "Eager Test": 1,
        "Assertion Roulette": 5
      }
    },
    "testAppendLongArrayWithFieldName": {
      "name": "testAppendLongArrayWithFieldName",
      "mvn_run": "org.apache.commons.lang3.builder.ToStringBuilderTest#testAppendLongArrayWithFieldName",
      "smells": {
        "Sensitive Equality": 4,
        "Lazy Test": 18,
        "Eager Test": 1,
        "Assertion Roulette": 4
      }
    },
    "testAppendLongArrayWithFieldNameAndFullDetatil": {
      "name": "testAppendLongArrayWithFieldNameAndFullDetatil",
      "mvn_run": "org.apache.commons.lang3.builder.ToStringBuilderTest#testAppendLongArrayWithFieldNameAndFullDetatil",
      "smells": {
        "Sensitive Equality": 5,
        "Lazy Test": 18,
        "Eager Test": 1,
        "Assertion Roulette": 5
      }
    },
    "testAppendIntArrayWithFieldName": {
      "name": "testAppendIntArrayWithFieldName",
      "mvn_run": "org.apache.commons.lang3.builder.ToStringBuilderTest#testAppendIntArrayWithFieldName",
      "smells": {
        "Sensitive Equality": 4,
        "Lazy Test": 18,
        "Eager Test": 1,
        "Assertion Roulette": 4
      }
    },
    "testAppendIntArrayWithFieldNameAndFullDetatil": {
      "name": "testAppendIntArrayWithFieldNameAndFullDetatil",
      "mvn_run": "org.apache.commons.lang3.builder.ToStringBuilderTest#testAppendIntArrayWithFieldNameAndFullDetatil",
      "smells": {
        "Sensitive Equality": 5,
        "Lazy Test": 18,
        "Eager Test": 1,
        "Assertion Roulette": 5
      }
    },
    "testAppendShortArrayWithFieldName": {
      "name": "testAppendShortArrayWithFieldName",
      "mvn_run": "org.apache.commons.lang3.builder.ToStringBuilderTest#testAppendShortArrayWithFieldName",
      "smells": {
        "Sensitive Equality": 4,
        "Lazy Test": 18,
        "Eager Test": 1,
        "Assertion Roulette": 4
      }
    },
    "testAppendShortArrayWithFieldNameAndFullDetatil": {
      "name": "testAppendShortArrayWithFieldNameAndFullDetatil",
      "mvn_run": "org.apache.commons.lang3.builder.ToStringBuilderTest#testAppendShortArrayWithFieldNameAndFullDetatil",
      "smells": {
        "Sensitive Equality": 5,
        "Lazy Test": 18,
        "Eager Test": 1,
        "Assertion Roulette": 5
      }
    },
    "testAppendByteArrayWithFieldName": {
      "name": "testAppendByteArrayWithFieldName",
      "mvn_run": "org.apache.commons.lang3.builder.ToStringBuilderTest#testAppendByteArrayWithFieldName",
      "smells": {
        "Sensitive Equality": 4,
        "Lazy Test": 18,
        "Eager Test": 1,
        "Assertion Roulette": 4
      }
    },
    "testAppendByteArrayWithFieldNameAndFullDetatil": {
      "name": "testAppendByteArrayWithFieldNameAndFullDetatil",
      "mvn_run": "org.apache.commons.lang3.builder.ToStringBuilderTest#testAppendByteArrayWithFieldNameAndFullDetatil",
      "smells": {
        "Sensitive Equality": 5,
        "Lazy Test": 18,
        "Eager Test": 1,
        "Assertion Roulette": 5
      }
    },
    "testAppendFloatArrayWithFieldName": {
      "name": "testAppendFloatArrayWithFieldName",
      "mvn_run": "org.apache.commons.lang3.builder.ToStringBuilderTest#testAppendFloatArrayWithFieldName",
      "smells": {
        "Sensitive Equality": 4,
        "Lazy Test": 18,
        "Eager Test": 1,
        "Assertion Roulette": 4
      }
    },
    "testAppendFloatArrayWithFieldNameAndFullDetatil": {
      "name": "testAppendFloatArrayWithFieldNameAndFullDetatil",
      "mvn_run": "org.apache.commons.lang3.builder.ToStringBuilderTest#testAppendFloatArrayWithFieldNameAndFullDetatil",
      "smells": {
        "Sensitive Equality": 5,
        "Lazy Test": 18,
        "Eager Test": 1,
        "Assertion Roulette": 5
      }
    },
    "testConstructToStringBuilder": {
      "name": "testConstructToStringBuilder",
      "mvn_run": "org.apache.commons.lang3.builder.ToStringBuilderTest#testConstructToStringBuilder",
      "smells": {
        "Sensitive Equality": 2,
        "Lazy Test": 12,
        "Eager Test": 1,
        "Assertion Roulette": 6
      }
    },
    "testObject": {
      "name": "testObject",
      "mvn_run": "org.apache.commons.lang3.builder.ToStringBuilderTest#testObject",
      "smells": {
        "Sensitive Equality": 12,
        "Lazy Test": 18,
        "Eager Test": 1,
        "Assertion Roulette": 12
      }
    },
    "testLong": {
      "name": "testLong",
      "mvn_run": "org.apache.commons.lang3.builder.ToStringBuilderTest#testLong",
      "smells": {
        "Sensitive Equality": 3,
        "Lazy Test": 18,
        "Eager Test": 1,
        "Assertion Roulette": 3
      }
    },
    "testInt": {
      "name": "testInt",
      "mvn_run": "org.apache.commons.lang3.builder.ToStringBuilderTest#testInt",
      "smells": {
        "Sensitive Equality": 3,
        "Lazy Test": 18,
        "Eager Test": 1,
        "Assertion Roulette": 3
      }
    },
    "testShort": {
      "name": "testShort",
      "mvn_run": "org.apache.commons.lang3.builder.ToStringBuilderTest#testShort",
      "smells": {
        "Sensitive Equality": 3,
        "Lazy Test": 18,
        "Eager Test": 1,
        "Assertion Roulette": 3
      }
    },
    "testChar": {
      "name": "testChar",
      "mvn_run": "org.apache.commons.lang3.builder.ToStringBuilderTest#testChar",
      "smells": {
        "Sensitive Equality": 3,
        "Lazy Test": 18,
        "Eager Test": 1,
        "Assertion Roulette": 3
      }
    },
    "testByte": {
      "name": "testByte",
      "mvn_run": "org.apache.commons.lang3.builder.ToStringBuilderTest#testByte",
      "smells": {
        "Sensitive Equality": 3,
        "Lazy Test": 18,
        "Eager Test": 1,
        "Assertion Roulette": 3
      }
    },
    "testDouble": {
      "name": "testDouble",
      "mvn_run": "org.apache.commons.lang3.builder.ToStringBuilderTest#testDouble",
      "smells": {
        "Sensitive Equality": 3,
        "Lazy Test": 18,
        "Eager Test": 1,
        "Assertion Roulette": 3
      }
    },
    "testFloat": {
      "name": "testFloat",
      "mvn_run": "org.apache.commons.lang3.builder.ToStringBuilderTest#testFloat",
      "smells": {
        "Sensitive Equality": 3,
        "Lazy Test": 18,
        "Eager Test": 1,
        "Assertion Roulette": 3
      }
    },
    "testBoolean": {
      "name": "testBoolean",
      "mvn_run": "org.apache.commons.lang3.builder.ToStringBuilderTest#testBoolean",
      "smells": {
        "Sensitive Equality": 3,
        "Lazy Test": 18,
        "Eager Test": 1,
        "Assertion Roulette": 3
      }
    },
    "testObjectArray": {
      "name": "testObjectArray",
      "mvn_run": "org.apache.commons.lang3.builder.ToStringBuilderTest#testObjectArray",
      "smells": {
        "Sensitive Equality": 4,
        "Lazy Test": 18,
        "Eager Test": 1,
        "Assertion Roulette": 4
      }
    },
    "testLongArray": {
      "name": "testLongArray",
      "mvn_run": "org.apache.commons.lang3.builder.ToStringBuilderTest#testLongArray",
      "smells": {
        "Sensitive Equality": 4,
        "Lazy Test": 18,
        "Eager Test": 1,
        "Assertion Roulette": 4
      }
    },
    "testIntArray": {
      "name": "testIntArray",
      "mvn_run": "org.apache.commons.lang3.builder.ToStringBuilderTest#testIntArray",
      "smells": {
        "Sensitive Equality": 4,
        "Lazy Test": 18,
        "Eager Test": 1,
        "Assertion Roulette": 4
      }
    },
    "testShortArray": {
      "name": "testShortArray",
      "mvn_run": "org.apache.commons.lang3.builder.ToStringBuilderTest#testShortArray",
      "smells": {
        "Sensitive Equality": 4,
        "Lazy Test": 18,
        "Eager Test": 1,
        "Assertion Roulette": 4
      }
    },
    "testByteArray": {
      "name": "testByteArray",
      "mvn_run": "org.apache.commons.lang3.builder.ToStringBuilderTest#testByteArray",
      "smells": {
        "Sensitive Equality": 4,
        "Lazy Test": 18,
        "Eager Test": 1,
        "Assertion Roulette": 4
      }
    },
    "testCharArray": {
      "name": "testCharArray",
      "mvn_run": "org.apache.commons.lang3.builder.ToStringBuilderTest#testCharArray",
      "smells": {
        "Sensitive Equality": 4,
        "Lazy Test": 18,
        "Eager Test": 1,
        "Assertion Roulette": 4
      }
    },
    "testDoubleArray": {
      "name": "testDoubleArray",
      "mvn_run": "org.apache.commons.lang3.builder.ToStringBuilderTest#testDoubleArray",
      "smells": {
        "Sensitive Equality": 4,
        "Lazy Test": 18,
        "Eager Test": 1,
        "Assertion Roulette": 4
      }
    },
    "testFloatArray": {
      "name": "testFloatArray",
      "mvn_run": "org.apache.commons.lang3.builder.ToStringBuilderTest#testFloatArray",
      "smells": {
        "Sensitive Equality": 4,
        "Lazy Test": 18,
        "Eager Test": 1,
        "Assertion Roulette": 4
      }
    },
    "testBooleanArray": {
      "name": "testBooleanArray",
      "mvn_run": "org.apache.commons.lang3.builder.ToStringBuilderTest#testBooleanArray",
      "smells": {
        "Sensitive Equality": 4,
        "Lazy Test": 18,
        "Eager Test": 1,
        "Assertion Roulette": 4
      }
    },
    "testLongArrayArray": {
      "name": "testLongArrayArray",
      "mvn_run": "org.apache.commons.lang3.builder.ToStringBuilderTest#testLongArrayArray",
      "smells": {
        "Sensitive Equality": 4,
        "Lazy Test": 18,
        "Eager Test": 1,
        "Assertion Roulette": 4
      }
    },
    "testIntArrayArray": {
      "name": "testIntArrayArray",
      "mvn_run": "org.apache.commons.lang3.builder.ToStringBuilderTest#testIntArrayArray",
      "smells": {
        "Sensitive Equality": 4,
        "Lazy Test": 18,
        "Eager Test": 1,
        "Assertion Roulette": 4
      }
    },
    "testShortArrayArray": {
      "name": "testShortArrayArray",
      "mvn_run": "org.apache.commons.lang3.builder.ToStringBuilderTest#testShortArrayArray",
      "smells": {
        "Sensitive Equality": 4,
        "Lazy Test": 18,
        "Eager Test": 1,
        "Assertion Roulette": 4
      }
    },
    "testByteArrayArray": {
      "name": "testByteArrayArray",
      "mvn_run": "org.apache.commons.lang3.builder.ToStringBuilderTest#testByteArrayArray",
      "smells": {
        "Sensitive Equality": 4,
        "Lazy Test": 18,
        "Eager Test": 1,
        "Assertion Roulette": 4
      }
    },
    "testCharArrayArray": {
      "name": "testCharArrayArray",
      "mvn_run": "org.apache.commons.lang3.builder.ToStringBuilderTest#testCharArrayArray",
      "smells": {
        "Sensitive Equality": 4,
        "Lazy Test": 18,
        "Eager Test": 1,
        "Assertion Roulette": 4
      }
    },
    "testDoubleArrayArray": {
      "name": "testDoubleArrayArray",
      "mvn_run": "org.apache.commons.lang3.builder.ToStringBuilderTest#testDoubleArrayArray",
      "smells": {
        "Sensitive Equality": 4,
        "Lazy Test": 18,
        "Eager Test": 1,
        "Assertion Roulette": 4
      }
    },
    "testFloatArrayArray": {
      "name": "testFloatArrayArray",
      "mvn_run": "org.apache.commons.lang3.builder.ToStringBuilderTest#testFloatArrayArray",
      "smells": {
        "Sensitive Equality": 4,
        "Lazy Test": 18,
        "Eager Test": 1,
        "Assertion Roulette": 4
      }
    },
    "testBooleanArrayArray": {
      "name": "testBooleanArrayArray",
      "mvn_run": "org.apache.commons.lang3.builder.ToStringBuilderTest#testBooleanArrayArray",
      "smells": {
        "Sensitive Equality": 4,
        "Lazy Test": 18,
        "Eager Test": 1,
        "Assertion Roulette": 4
      }
    },
    "testObjectCycle": {
      "name": "testObjectCycle",
      "mvn_run": "org.apache.commons.lang3.builder.ToStringBuilderTest#testObjectCycle",
      "smells": {
        "Sensitive Equality": 1,
        "Lazy Test": 6,
        "Assertion Roulette": 1
      }
    },
    "testSimpleReflectionStatics": {
      "name": "testSimpleReflectionStatics",
      "mvn_run": "org.apache.commons.lang3.builder.ToStringBuilderTest#testSimpleReflectionStatics",
      "smells": {
        "Sensitive Equality": 4,
        "Duplicate Assert": 1,
        "Assertion Roulette": 4
      }
    },
    "testReflectionStatics": {
      "name": "testReflectionStatics",
      "mvn_run": "org.apache.commons.lang3.builder.ToStringBuilderTest#testReflectionStatics",
      "smells": {
        "Sensitive Equality": 4,
        "Duplicate Assert": 1,
        "Assertion Roulette": 4
      }
    },
    "testInheritedReflectionStatics": {
      "name": "testInheritedReflectionStatics",
      "mvn_run": "org.apache.commons.lang3.builder.ToStringBuilderTest#testInheritedReflectionStatics",
      "smells": {
        "Sensitive Equality": 4,
        "Duplicate Assert": 1,
        "Assertion Roulette": 4
      }
    },
    "testReflectionNull": {
      "name": "testReflectionNull",
      "mvn_run": "org.apache.commons.lang3.builder.ToStringBuilderTest#testReflectionNull",
      "smells": {
        "Sensitive Equality": 1
      }
    },
    "testSetDefaultEx": {
      "name": "testSetDefaultEx",
      "mvn_run": "org.apache.commons.lang3.builder.ToStringBuilderTest#testSetDefaultEx",
      "smells": {
        "Lazy Test": 15
      }
    },
    "testGetSetDefault": {
      "name": "testGetSetDefault",
      "mvn_run": "org.apache.commons.lang3.builder.ToStringBuilderTest#testGetSetDefault",
      "smells": {
        "Lazy Test": 15,
        "Eager Test": 1,
        "Assertion Roulette": 1,
        "Exception Catching Throwing": 1
      }
    },
    "testReflectionHierarchy": {
      "name": "testReflectionHierarchy",
      "mvn_run": "org.apache.commons.lang3.builder.ToStringBuilderTest#testReflectionHierarchy",
      "smells": {
        "Lazy Test": 15,
        "Duplicate Assert": 1,
        "Assertion Roulette": 16
      }
    },
    "testReflectionBooleanArrayArray": {
      "name": "testReflectionBooleanArrayArray",
      "mvn_run": "org.apache.commons.lang3.builder.ToStringBuilderTest#testReflectionBooleanArrayArray",
      "smells": {
        "Lazy Test": 15,
        "Duplicate Assert": 1,
        "Assertion Roulette": 2
      }
    },
    "testReflectionDoubleArrayArray": {
      "name": "testReflectionDoubleArrayArray",
      "mvn_run": "org.apache.commons.lang3.builder.ToStringBuilderTest#testReflectionDoubleArrayArray",
      "smells": {
        "Lazy Test": 15,
        "Assertion Roulette": 1
      }
    },
    "testReflectionCharArrayArray": {
      "name": "testReflectionCharArrayArray",
      "mvn_run": "org.apache.commons.lang3.builder.ToStringBuilderTest#testReflectionCharArrayArray",
      "smells": {
        "Lazy Test": 15,
        "Assertion Roulette": 1
      }
    },
    "testReflectionByteArrayArray": {
      "name": "testReflectionByteArrayArray",
      "mvn_run": "org.apache.commons.lang3.builder.ToStringBuilderTest#testReflectionByteArrayArray",
      "smells": {
        "Lazy Test": 15,
        "Assertion Roulette": 1
      }
    },
    "testReflectionhortArrayArray": {
      "name": "testReflectionhortArrayArray",
      "mvn_run": "org.apache.commons.lang3.builder.ToStringBuilderTest#testReflectionhortArrayArray",
      "smells": {
        "Lazy Test": 15,
        "Assertion Roulette": 1
      }
    },
    "testReflectionIntArrayArray": {
      "name": "testReflectionIntArrayArray",
      "mvn_run": "org.apache.commons.lang3.builder.ToStringBuilderTest#testReflectionIntArrayArray",
      "smells": {
        "Lazy Test": 15,
        "Assertion Roulette": 1
      }
    },
    "testReflectionLongArrayArray": {
      "name": "testReflectionLongArrayArray",
      "mvn_run": "org.apache.commons.lang3.builder.ToStringBuilderTest#testReflectionLongArrayArray",
      "smells": {
        "Lazy Test": 15,
        "Assertion Roulette": 1
      }
    },
    "testReflectionFloatArrayArray": {
      "name": "testReflectionFloatArrayArray",
      "mvn_run": "org.apache.commons.lang3.builder.ToStringBuilderTest#testReflectionFloatArrayArray",
      "smells": {
        "Lazy Test": 15,
        "Assertion Roulette": 1
      }
    },
    "testReflectionBooleanArray": {
      "name": "testReflectionBooleanArray",
      "mvn_run": "org.apache.commons.lang3.builder.ToStringBuilderTest#testReflectionBooleanArray",
      "smells": {
        "Lazy Test": 15,
        "Assertion Roulette": 1
      }
    },
    "testReflectionFloatArray": {
      "name": "testReflectionFloatArray",
      "mvn_run": "org.apache.commons.lang3.builder.ToStringBuilderTest#testReflectionFloatArray",
      "smells": {
        "Lazy Test": 15,
        "Assertion Roulette": 1
      }
    },
    "testReflectionDoubleArray": {
      "name": "testReflectionDoubleArray",
      "mvn_run": "org.apache.commons.lang3.builder.ToStringBuilderTest#testReflectionDoubleArray",
      "smells": {
        "Lazy Test": 15,
        "Assertion Roulette": 1
      }
    },
    "testReflectionCharArray": {
      "name": "testReflectionCharArray",
      "mvn_run": "org.apache.commons.lang3.builder.ToStringBuilderTest#testReflectionCharArray",
      "smells": {
        "Lazy Test": 15,
        "Assertion Roulette": 1
      }
    },
    "testReflectionyteArray": {
      "name": "testReflectionyteArray",
      "mvn_run": "org.apache.commons.lang3.builder.ToStringBuilderTest#testReflectionyteArray",
      "smells": {
        "Lazy Test": 15,
        "Assertion Roulette": 1
      }
    },
    "testReflectionShortArray": {
      "name": "testReflectionShortArray",
      "mvn_run": "org.apache.commons.lang3.builder.ToStringBuilderTest#testReflectionShortArray",
      "smells": {
        "Lazy Test": 15,
        "Assertion Roulette": 1
      }
    },
    "testReflectionIntArray": {
      "name": "testReflectionIntArray",
      "mvn_run": "org.apache.commons.lang3.builder.ToStringBuilderTest#testReflectionIntArray",
      "smells": {
        "Lazy Test": 15,
        "Assertion Roulette": 1
      }
    },
    "testReflectionLongArray": {
      "name": "testReflectionLongArray",
      "mvn_run": "org.apache.commons.lang3.builder.ToStringBuilderTest#testReflectionLongArray",
      "smells": {
        "Lazy Test": 15,
        "Assertion Roulette": 1
      }
    },
    "testReflectionObjectArray": {
      "name": "testReflectionObjectArray",
      "mvn_run": "org.apache.commons.lang3.builder.ToStringBuilderTest#testReflectionObjectArray",
      "smells": {
        "Lazy Test": 15,
        "Assertion Roulette": 1
      }
    },
    "testReflectionBoolean": {
      "name": "testReflectionBoolean",
      "mvn_run": "org.apache.commons.lang3.builder.ToStringBuilderTest#testReflectionBoolean",
      "smells": {
        "Lazy Test": 15,
        "Assertion Roulette": 2
      }
    },
    "testReflectionCharacter": {
      "name": "testReflectionCharacter",
      "mvn_run": "org.apache.commons.lang3.builder.ToStringBuilderTest#testReflectionCharacter",
      "smells": {
        "Lazy Test": 15,
        "Assertion Roulette": 1
      }
    },
    "testReflectionInteger": {
      "name": "testReflectionInteger",
      "mvn_run": "org.apache.commons.lang3.builder.ToStringBuilderTest#testReflectionInteger",
      "smells": {
        "Lazy Test": 15,
        "Assertion Roulette": 1
      }
    },
    "testReflectionArrayArrayCycle": {
      "name": "testReflectionArrayArrayCycle",
      "mvn_run": "org.apache.commons.lang3.builder.ToStringBuilderTest#testReflectionArrayArrayCycle",
      "smells": {
        "Lazy Test": 11,
        "Assertion Roulette": 1
      }
    },
    "testReflectionArrayCycleLevel2": {
      "name": "testReflectionArrayCycleLevel2",
      "mvn_run": "org.apache.commons.lang3.builder.ToStringBuilderTest#testReflectionArrayCycleLevel2",
      "smells": {
        "Lazy Test": 11,
        "Assertion Roulette": 2
      }
    },
    "testReflectionArrayCycle": {
      "name": "testReflectionArrayCycle",
      "mvn_run": "org.apache.commons.lang3.builder.ToStringBuilderTest#testReflectionArrayCycle",
      "smells": {
        "Lazy Test": 11,
        "Assertion Roulette": 1
      }
    },
    "testReflectionArrayAndObjectCycle": {
      "name": "testReflectionArrayAndObjectCycle",
      "mvn_run": "org.apache.commons.lang3.builder.ToStringBuilderTest#testReflectionArrayAndObjectCycle",
      "smells": {
        "Lazy Test": 12,
        "Eager Test": 1,
        "Assertion Roulette": 2
      }
    },
    "testObjectBuild": {
      "name": "testObjectBuild",
      "mvn_run": "org.apache.commons.lang3.builder.ToStringBuilderTest#testObjectBuild",
      "smells": {
        "Lazy Test": 12,
        "Eager Test": 1,
        "Assertion Roulette": 12
      }
    },
    "test_setUpToClass_invalid": {
      "name": "test_setUpToClass_invalid",
      "mvn_run": "org.apache.commons.lang3.builder.ToStringBuilderTest#test_setUpToClass_invalid",
      "smells": {
        "Lazy Test": 5
      }
    }
  },
  "org.apache.commons.lang3.builder.MultilineRecursiveToStringStyleTest": {
    "simpleObject": {
      "name": "simpleObject",
      "mvn_run": "org.apache.commons.lang3.builder.MultilineRecursiveToStringStyleTest#simpleObject",
      "smells": {
        "Sensitive Equality": 1,
        "Assertion Roulette": 1
      }
    },
    "nestedElements": {
      "name": "nestedElements",
      "mvn_run": "org.apache.commons.lang3.builder.MultilineRecursiveToStringStyleTest#nestedElements",
      "smells": {
        "Sensitive Equality": 1,
        "Assertion Roulette": 1
      }
    },
    "nestedAndArray": {
      "name": "nestedAndArray",
      "mvn_run": "org.apache.commons.lang3.builder.MultilineRecursiveToStringStyleTest#nestedAndArray",
      "smells": {
        "Sensitive Equality": 1,
        "Assertion Roulette": 1
      }
    },
    "noArray": {
      "name": "noArray",
      "mvn_run": "org.apache.commons.lang3.builder.MultilineRecursiveToStringStyleTest#noArray",
      "smells": {
        "Sensitive Equality": 1,
        "Assertion Roulette": 1
      }
    },
    "boolArray": {
      "name": "boolArray",
      "mvn_run": "org.apache.commons.lang3.builder.MultilineRecursiveToStringStyleTest#boolArray",
      "smells": {
        "Sensitive Equality": 1,
        "Assertion Roulette": 1
      }
    },
    "byteArray": {
      "name": "byteArray",
      "mvn_run": "org.apache.commons.lang3.builder.MultilineRecursiveToStringStyleTest#byteArray",
      "smells": {
        "Sensitive Equality": 1,
        "Assertion Roulette": 1
      }
    },
    "charArray": {
      "name": "charArray",
      "mvn_run": "org.apache.commons.lang3.builder.MultilineRecursiveToStringStyleTest#charArray",
      "smells": {
        "Sensitive Equality": 1,
        "Assertion Roulette": 1
      }
    },
    "intArray": {
      "name": "intArray",
      "mvn_run": "org.apache.commons.lang3.builder.MultilineRecursiveToStringStyleTest#intArray",
      "smells": {
        "Sensitive Equality": 1,
        "Assertion Roulette": 1
      }
    },
    "doubleArray": {
      "name": "doubleArray",
      "mvn_run": "org.apache.commons.lang3.builder.MultilineRecursiveToStringStyleTest#doubleArray",
      "smells": {
        "Sensitive Equality": 1,
        "Assertion Roulette": 1
      }
    },
    "floatArray": {
      "name": "floatArray",
      "mvn_run": "org.apache.commons.lang3.builder.MultilineRecursiveToStringStyleTest#floatArray",
      "smells": {
        "Sensitive Equality": 1,
        "Assertion Roulette": 1
      }
    },
    "longArray": {
      "name": "longArray",
      "mvn_run": "org.apache.commons.lang3.builder.MultilineRecursiveToStringStyleTest#longArray",
      "smells": {
        "Sensitive Equality": 1,
        "Assertion Roulette": 1
      }
    },
    "stringArray": {
      "name": "stringArray",
      "mvn_run": "org.apache.commons.lang3.builder.MultilineRecursiveToStringStyleTest#stringArray",
      "smells": {
        "Sensitive Equality": 1,
        "Assertion Roulette": 1
      }
    },
    "shortArray": {
      "name": "shortArray",
      "mvn_run": "org.apache.commons.lang3.builder.MultilineRecursiveToStringStyleTest#shortArray",
      "smells": {
        "Sensitive Equality": 1,
        "Assertion Roulette": 1
      }
    },
    "testLANG1319": {
      "name": "testLANG1319",
      "mvn_run": "org.apache.commons.lang3.builder.MultilineRecursiveToStringStyleTest#testLANG1319",
      "smells": {
        "Sensitive Equality": 1,
        "Assertion Roulette": 1
      }
    }
  },
  "org.apache.commons.lang3.exception.UncheckedIllegalAccessExceptionTest": {
    "testConstructWithCause": {
      "name": "testConstructWithCause",
      "mvn_run": "org.apache.commons.lang3.exception.UncheckedIllegalAccessExceptionTest#testConstructWithCause",
      "smells": {
        "Assertion Roulette": 1
      }
    }
  },
  "org.apache.commons.lang3.exception.UncheckedReflectiveOperationExceptionTest": {
    "testConstructWithCause": {
      "name": "testConstructWithCause",
      "mvn_run": "org.apache.commons.lang3.exception.UncheckedReflectiveOperationExceptionTest#testConstructWithCause",
      "smells": {
        "Assertion Roulette": 1
      }
    }
  },
  "org.apache.commons.lang3.exception.ContextedExceptionTest": {
    "testRawMessage": {
      "name": "testRawMessage",
      "mvn_run": "org.apache.commons.lang3.exception.ContextedExceptionTest#testRawMessage",
      "smells": {
        "Lazy Test": 1,
        "Eager Test": 1,
        "Assertion Roulette": 3
      }
    },
    "testNullExceptionPassing": {
      "name": "testNullExceptionPassing",
      "mvn_run": "org.apache.commons.lang3.exception.ContextedExceptionTest#testNullExceptionPassing",
      "smells": {
        "Lazy Test": 2,
        "Eager Test": 1,
        "Assertion Roulette": 1
      }
    },
    "testContextedExceptionStringThrowableContext": {
      "name": "testContextedExceptionStringThrowableContext",
      "mvn_run": "org.apache.commons.lang3.exception.ContextedExceptionTest#testContextedExceptionStringThrowableContext",
      "smells": {
        "Lazy Test": 2,
        "Eager Test": 1,
        "Assertion Roulette": 4
      }
    },
    "testContextedExceptionStringThrowable": {
      "name": "testContextedExceptionStringThrowable",
      "mvn_run": "org.apache.commons.lang3.exception.ContextedExceptionTest#testContextedExceptionStringThrowable",
      "smells": {
        "Lazy Test": 2,
        "Eager Test": 1,
        "Assertion Roulette": 4
      }
    },
    "testContextedExceptionThrowable": {
      "name": "testContextedExceptionThrowable",
      "mvn_run": "org.apache.commons.lang3.exception.ContextedExceptionTest#testContextedExceptionThrowable",
      "smells": {
        "Lazy Test": 2,
        "Eager Test": 1,
        "Assertion Roulette": 3
      }
    },
    "testContextedExceptionString": {
      "name": "testContextedExceptionString",
      "mvn_run": "org.apache.commons.lang3.exception.ContextedExceptionTest#testContextedExceptionString",
      "smells": {
        "Lazy Test": 2,
        "Eager Test": 1,
        "Assertion Roulette": 2
      }
    },
    "testContextedException": {
      "name": "testContextedException",
      "mvn_run": "org.apache.commons.lang3.exception.ContextedExceptionTest#testContextedException",
      "smells": {
        "Lazy Test": 2,
        "Eager Test": 1,
        "Assertion Roulette": 2
      }
    },
    "testNullException": {
      "name": "testNullException",
      "mvn_run": "org.apache.commons.lang3.exception.ContextedExceptionTest#testNullException",
      "smells": {
        "Assertion Roulette": 1
      }
    }
  },
  "org.apache.commons.lang3.exception.ContextedRuntimeExceptionTest": {
    "testRawMessage": {
      "name": "testRawMessage",
      "mvn_run": "org.apache.commons.lang3.exception.ContextedRuntimeExceptionTest#testRawMessage",
      "smells": {
        "Lazy Test": 1,
        "Eager Test": 1,
        "Assertion Roulette": 3
      }
    },
    "testNullExceptionPassing": {
      "name": "testNullExceptionPassing",
      "mvn_run": "org.apache.commons.lang3.exception.ContextedRuntimeExceptionTest#testNullExceptionPassing",
      "smells": {
        "Lazy Test": 2,
        "Eager Test": 1,
        "Assertion Roulette": 1
      }
    },
    "testContextedExceptionStringThrowableContext": {
      "name": "testContextedExceptionStringThrowableContext",
      "mvn_run": "org.apache.commons.lang3.exception.ContextedRuntimeExceptionTest#testContextedExceptionStringThrowableContext",
      "smells": {
        "Lazy Test": 2,
        "Eager Test": 1,
        "Assertion Roulette": 4
      }
    },
    "testContextedExceptionStringThrowable": {
      "name": "testContextedExceptionStringThrowable",
      "mvn_run": "org.apache.commons.lang3.exception.ContextedRuntimeExceptionTest#testContextedExceptionStringThrowable",
      "smells": {
        "Lazy Test": 2,
        "Eager Test": 1,
        "Assertion Roulette": 4
      }
    },
    "testContextedExceptionThrowable": {
      "name": "testContextedExceptionThrowable",
      "mvn_run": "org.apache.commons.lang3.exception.ContextedRuntimeExceptionTest#testContextedExceptionThrowable",
      "smells": {
        "Lazy Test": 2,
        "Eager Test": 1,
        "Assertion Roulette": 3
      }
    },
    "testContextedExceptionString": {
      "name": "testContextedExceptionString",
      "mvn_run": "org.apache.commons.lang3.exception.ContextedRuntimeExceptionTest#testContextedExceptionString",
      "smells": {
        "Lazy Test": 2,
        "Eager Test": 1,
        "Assertion Roulette": 2
      }
    },
    "testContextedException": {
      "name": "testContextedException",
      "mvn_run": "org.apache.commons.lang3.exception.ContextedRuntimeExceptionTest#testContextedException",
      "smells": {
        "Lazy Test": 2,
        "Eager Test": 1,
        "Assertion Roulette": 2
      }
    }
  },
  "org.apache.commons.lang3.exception.UncheckedExceptionTest": {
    "testConstructWithCause": {
      "name": "testConstructWithCause",
      "mvn_run": "org.apache.commons.lang3.exception.UncheckedExceptionTest#testConstructWithCause",
      "smells": {
        "Assertion Roulette": 1
      }
    }
  },
  "org.apache.commons.lang3.exception.CloneFailedExceptionTest": {
    "testWithoutMessage": {
      "name": "testWithoutMessage",
      "mvn_run": "org.apache.commons.lang3.exception.CloneFailedExceptionTest#testWithoutMessage",
      "smells": {
        "Lazy Test": 1,
        "Assertion Roulette": 4
      }
    },
    "testWithoutCause": {
      "name": "testWithoutCause",
      "mvn_run": "org.apache.commons.lang3.exception.CloneFailedExceptionTest#testWithoutCause",
      "smells": {
        "Lazy Test": 1,
        "Assertion Roulette": 3
      }
    },
    "testWithCauseAndMessage": {
      "name": "testWithCauseAndMessage",
      "mvn_run": "org.apache.commons.lang3.exception.CloneFailedExceptionTest#testWithCauseAndMessage",
      "smells": {
        "Lazy Test": 1,
        "Assertion Roulette": 4
      }
    },
    "testThrowingExceptionWithCause": {
      "name": "testThrowingExceptionWithCause",
      "mvn_run": "org.apache.commons.lang3.exception.CloneFailedExceptionTest#testThrowingExceptionWithCause",
      "smells": {
        "Lazy Test": 1
      }
    },
    "testThrowingExceptionWithMessage": {
      "name": "testThrowingExceptionWithMessage",
      "mvn_run": "org.apache.commons.lang3.exception.CloneFailedExceptionTest#testThrowingExceptionWithMessage",
      "smells": {
        "Lazy Test": 1
      }
    },
    "testThrowingInformativeException": {
      "name": "testThrowingInformativeException",
      "mvn_run": "org.apache.commons.lang3.exception.CloneFailedExceptionTest#testThrowingInformativeException",
      "smells": {
        "Lazy Test": 1
      }
    }
  },
  "org.apache.commons.lang3.exception.DefaultExceptionContextTest": {
    "testFormattedExceptionMessageNull": {
      "name": "testFormattedExceptionMessageNull",
      "mvn_run": "org.apache.commons.lang3.exception.DefaultExceptionContextTest#testFormattedExceptionMessageNull",
      "smells": {
        "Unknown Test": 1
      }
    }
  },
  "org.apache.commons.lang3.exception.UncheckedInterruptedExceptionTest": {
    "testConstructWithCause": {
      "name": "testConstructWithCause",
      "mvn_run": "org.apache.commons.lang3.exception.UncheckedInterruptedExceptionTest#testConstructWithCause",
      "smells": {
        "Assertion Roulette": 1
      }
    }
  },
  "org.apache.commons.lang3.CharSequenceUtilsTest": {
    "testRegionMatches": {
      "name": "testRegionMatches",
      "mvn_run": "org.apache.commons.lang3.CharSequenceUtilsTest#testRegionMatches",
      "smells": {
        "Unknown Test": 1,
        "Conditional Test Logic": 1
      }
    },
    "testNewLastIndexOf": {
      "name": "testNewLastIndexOf",
      "mvn_run": "org.apache.commons.lang3.CharSequenceUtilsTest#testNewLastIndexOf",
      "smells": {
        "Unknown Test": 1,
        "Verbose Test": 1,
        "Conditional Test Logic": 3
      }
    },
    "testNewLastIndexOfSingle": {
      "name": "testNewLastIndexOfSingle",
      "mvn_run": "org.apache.commons.lang3.CharSequenceUtilsTest#testNewLastIndexOfSingle",
      "smells": {
        "Unknown Test": 2,
        "IgnoredTest": 2,
        "Conditional Test Logic": 1
      }
    },
    "testNewLastIndexOfSingleSingle": {
      "name": "testNewLastIndexOfSingleSingle",
      "mvn_run": "org.apache.commons.lang3.CharSequenceUtilsTest#testNewLastIndexOfSingleSingle",
      "smells": {
        "IgnoredTest": 1,
        "Sensitive Equality": 2,
        "Lazy Test": 1,
        "Eager Test": 1,
        "Assertion Roulette": 1
      }
    },
    "testConstructor": {
      "name": "testConstructor",
      "mvn_run": "org.apache.commons.lang3.CharSequenceUtilsTest#testConstructor",
      "smells": {
        "Magic Number Test": 1,
        "Assertion Roulette": 5
      }
    },
    "testSubSequence": {
      "name": "testSubSequence",
      "mvn_run": "org.apache.commons.lang3.CharSequenceUtilsTest#testSubSequence",
      "smells": {
        "Magic Number Test": 8,
        "Lazy Test": 4,
        "Assertion Roulette": 8
      }
    },
    "testToCharArray": {
      "name": "testToCharArray",
      "mvn_run": "org.apache.commons.lang3.CharSequenceUtilsTest#testToCharArray",
      "smells": {
        "Sensitive Equality": 1,
        "Assertion Roulette": 3
      }
    },
    "testSubSequenceTooLong": {
      "name": "testSubSequenceTooLong",
      "mvn_run": "org.apache.commons.lang3.CharSequenceUtilsTest#testSubSequenceTooLong",
      "smells": {
        "Lazy Test": 4
      }
    },
    "testSubSequenceNegativeStart": {
      "name": "testSubSequenceNegativeStart",
      "mvn_run": "org.apache.commons.lang3.CharSequenceUtilsTest#testSubSequenceNegativeStart",
      "smells": {
        "Lazy Test": 4
      }
    },
    "testLastIndexOfWithDifferentCharSequences": {
      "name": "testLastIndexOfWithDifferentCharSequences",
      "mvn_run": "org.apache.commons.lang3.CharSequenceUtilsTest#testLastIndexOfWithDifferentCharSequences",
      "smells": {
        "Lazy Test": 1,
        "Assertion Roulette": 1
      }
    }
  },
  "org.apache.commons.lang3.event.EventListenerSupportTest": {
    "testSubclassInvocationHandling": {
      "name": "testSubclassInvocationHandling",
      "mvn_run": "org.apache.commons.lang3.event.EventListenerSupportTest#testSubclassInvocationHandling",
      "smells": {
        "Unknown Test": 1,
        "Lazy Test": 2,
        "Eager Test": 1
      }
    },
    "testAddListenerNoDuplicates": {
      "name": "testAddListenerNoDuplicates",
      "mvn_run": "org.apache.commons.lang3.event.EventListenerSupportTest#testAddListenerNoDuplicates",
      "smells": {
        "Magic Number Test": 3,
        "Lazy Test": 4,
        "Duplicate Assert": 2,
        "Eager Test": 1,
        "Assertion Roulette": 6
      }
    },
    "testEventDispatchOrder": {
      "name": "testEventDispatchOrder",
      "mvn_run": "org.apache.commons.lang3.event.EventListenerSupportTest#testEventDispatchOrder",
      "smells": {
        "Magic Number Test": 3,
        "Lazy Test": 3,
        "Eager Test": 1,
        "Assertion Roulette": 3
      }
    },
    "testRemoveListenerDuringEvent": {
      "name": "testRemoveListenerDuringEvent",
      "mvn_run": "org.apache.commons.lang3.event.EventListenerSupportTest#testRemoveListenerDuringEvent",
      "smells": {
        "Magic Number Test": 2,
        "Lazy Test": 2,
        "Eager Test": 1,
        "Assertion Roulette": 2,
        "Conditional Test Logic": 1
      }
    },
    "testGetListeners": {
      "name": "testGetListeners",
      "mvn_run": "org.apache.commons.lang3.event.EventListenerSupportTest#testGetListeners",
      "smells": {
        "Magic Number Test": 4,
        "Lazy Test": 4,
        "Duplicate Assert": 2,
        "Eager Test": 1,
        "Assertion Roulette": 7
      }
    },
    "testSerialization": {
      "name": "testSerialization",
      "mvn_run": "org.apache.commons.lang3.event.EventListenerSupportTest#testSerialization",
      "smells": {
        "Magic Number Test": 2,
        "Verbose Test": 1,
        "Lazy Test": 5,
        "Eager Test": 1,
        "Assertion Roulette": 3,
        "Exception Catching Throwing": 1
      }
    },
    "testCreateWithNullParameter": {
      "name": "testCreateWithNullParameter",
      "mvn_run": "org.apache.commons.lang3.event.EventListenerSupportTest#testCreateWithNullParameter",
      "smells": {
        "Lazy Test": 1
      }
    },
    "testCreateWithNonInterfaceParameter": {
      "name": "testCreateWithNonInterfaceParameter",
      "mvn_run": "org.apache.commons.lang3.event.EventListenerSupportTest#testCreateWithNonInterfaceParameter",
      "smells": {
        "Lazy Test": 1
      }
    },
    "testRemoveNullListener": {
      "name": "testRemoveNullListener",
      "mvn_run": "org.apache.commons.lang3.event.EventListenerSupportTest#testRemoveNullListener",
      "smells": {
        "Lazy Test": 2,
        "Eager Test": 1
      }
    },
    "testAddNullListener": {
      "name": "testAddNullListener",
      "mvn_run": "org.apache.commons.lang3.event.EventListenerSupportTest#testAddNullListener",
      "smells": {
        "Lazy Test": 2,
        "Eager Test": 1
      }
    }
  },
  "org.apache.commons.lang3.event.EventUtilsTest": {
    "testConstructor": {
      "name": "testConstructor",
      "mvn_run": "org.apache.commons.lang3.event.EventUtilsTest#testConstructor",
      "smells": {
        "Magic Number Test": 1,
        "Assertion Roulette": 5
      }
    },
    "testAddEventListener": {
      "name": "testAddEventListener",
      "mvn_run": "org.apache.commons.lang3.event.EventUtilsTest#testAddEventListener",
      "smells": {
        "Magic Number Test": 3,
        "Lazy Test": 8,
        "Duplicate Assert": 1,
        "Assertion Roulette": 3
      }
    },
    "testBindEventsToMethod": {
      "name": "testBindEventsToMethod",
      "mvn_run": "org.apache.commons.lang3.event.EventUtilsTest#testBindEventsToMethod",
      "smells": {
        "Magic Number Test": 2,
        "Assertion Roulette": 2
      }
    },
    "testBindEventsToMethodWithEvent": {
      "name": "testBindEventsToMethodWithEvent",
      "mvn_run": "org.apache.commons.lang3.event.EventUtilsTest#testBindEventsToMethodWithEvent",
      "smells": {
        "Magic Number Test": 2,
        "Assertion Roulette": 2
      }
    },
    "testBindFilteredEventsToMethod": {
      "name": "testBindFilteredEventsToMethod",
      "mvn_run": "org.apache.commons.lang3.event.EventUtilsTest#testBindFilteredEventsToMethod",
      "smells": {
        "Magic Number Test": 3,
        "Duplicate Assert": 1,
        "Assertion Roulette": 3
      }
    },
    "testAddEventListenerWithPrivateAddMethod": {
      "name": "testAddEventListenerWithPrivateAddMethod",
      "mvn_run": "org.apache.commons.lang3.event.EventUtilsTest#testAddEventListenerWithPrivateAddMethod",
      "smells": {
        "Lazy Test": 8,
        "Assertion Roulette": 1
      }
    },
    "testAddEventListenerThrowsException": {
      "name": "testAddEventListenerThrowsException",
      "mvn_run": "org.apache.commons.lang3.event.EventUtilsTest#testAddEventListenerThrowsException",
      "smells": {
        "Lazy Test": 8
      }
    },
    "testAddEventListenerWithNoAddMethod": {
      "name": "testAddEventListenerWithNoAddMethod",
      "mvn_run": "org.apache.commons.lang3.event.EventUtilsTest#testAddEventListenerWithNoAddMethod",
      "smells": {
        "Lazy Test": 8,
        "Assertion Roulette": 1
      }
    }
  },
  "org.apache.commons.lang3.JavaVersionTest": {
    "testToString": {
      "name": "testToString",
      "mvn_run": "org.apache.commons.lang3.JavaVersionTest#testToString",
      "smells": {
        "Sensitive Equality": 1,
        "Assertion Roulette": 1
      }
    },
    "testGetJavaVersion": {
      "name": "testGetJavaVersion",
      "mvn_run": "org.apache.commons.lang3.JavaVersionTest#testGetJavaVersion",
      "smells": {
        "Assertion Roulette": 22
      }
    }
  }
}